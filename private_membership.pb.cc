// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: private_membership.proto

#include "private_membership.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace private_membership {
PROTOBUF_CONSTEXPR DoublyEncryptedId::DoublyEncryptedId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queried_encrypted_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doubly_encrypted_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DoublyEncryptedIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoublyEncryptedIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoublyEncryptedIdDefaultTypeInternal() {}
  union {
    DoublyEncryptedId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoublyEncryptedIdDefaultTypeInternal _DoublyEncryptedId_default_instance_;
PROTOBUF_CONSTEXPR MembershipResponse::MembershipResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_member_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MembershipResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MembershipResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MembershipResponseDefaultTypeInternal() {}
  union {
    MembershipResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MembershipResponseDefaultTypeInternal _MembershipResponse_default_instance_;
}  // namespace private_membership
namespace private_membership {
bool HashType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HashType_strings[3] = {};

static const char HashType_names[] =
  "HASH_TYPE_UNDEFINED"
  "SHA256"
  "TEST_HASH_TYPE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HashType_entries[] = {
  { {HashType_names + 0, 19}, 0 },
  { {HashType_names + 19, 6}, 2 },
  { {HashType_names + 25, 14}, 1 },
};

static const int HashType_entries_by_number[] = {
  0, // 0 -> HASH_TYPE_UNDEFINED
  2, // 1 -> TEST_HASH_TYPE
  1, // 2 -> SHA256
};

const std::string& HashType_Name(
    HashType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HashType_entries,
          HashType_entries_by_number,
          3, HashType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HashType_entries,
      HashType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HashType_strings[idx].get();
}
bool HashType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HashType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HashType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<HashType>(int_value);
  }
  return success;
}
bool EncryptedBucketHashType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EncryptedBucketHashType_strings[3] = {};

static const char EncryptedBucketHashType_names[] =
  "ENCRYPTED_BUCKET_HASH_TYPE_UNDEFINED"
  "ENCRYPTED_BUCKET_TEST_HASH_TYPE"
  "SHA256_NON_SENSITIVE_AND_SENSITIVE_ID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncryptedBucketHashType_entries[] = {
  { {EncryptedBucketHashType_names + 0, 36}, 0 },
  { {EncryptedBucketHashType_names + 36, 31}, 3 },
  { {EncryptedBucketHashType_names + 67, 37}, 1 },
};

static const int EncryptedBucketHashType_entries_by_number[] = {
  0, // 0 -> ENCRYPTED_BUCKET_HASH_TYPE_UNDEFINED
  2, // 1 -> SHA256_NON_SENSITIVE_AND_SENSITIVE_ID
  1, // 3 -> ENCRYPTED_BUCKET_TEST_HASH_TYPE
};

const std::string& EncryptedBucketHashType_Name(
    EncryptedBucketHashType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncryptedBucketHashType_entries,
          EncryptedBucketHashType_entries_by_number,
          3, EncryptedBucketHashType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncryptedBucketHashType_entries,
      EncryptedBucketHashType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EncryptedBucketHashType_strings[idx].get();
}
bool EncryptedBucketHashType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptedBucketHashType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncryptedBucketHashType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<EncryptedBucketHashType>(int_value);
  }
  return success;
}

// ===================================================================

class DoublyEncryptedId::_Internal {
 public:
};

DoublyEncryptedId::DoublyEncryptedId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.DoublyEncryptedId)
}
DoublyEncryptedId::DoublyEncryptedId(const DoublyEncryptedId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DoublyEncryptedId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queried_encrypted_id_){}
    , decltype(_impl_.doubly_encrypted_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.queried_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queried_encrypted_id().empty()) {
    _this->_impl_.queried_encrypted_id_.Set(from._internal_queried_encrypted_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doubly_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doubly_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doubly_encrypted_id().empty()) {
    _this->_impl_.doubly_encrypted_id_.Set(from._internal_doubly_encrypted_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.DoublyEncryptedId)
}

inline void DoublyEncryptedId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queried_encrypted_id_){}
    , decltype(_impl_.doubly_encrypted_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.queried_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doubly_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doubly_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DoublyEncryptedId::~DoublyEncryptedId() {
  // @@protoc_insertion_point(destructor:private_membership.DoublyEncryptedId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoublyEncryptedId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queried_encrypted_id_.Destroy();
  _impl_.doubly_encrypted_id_.Destroy();
}

void DoublyEncryptedId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DoublyEncryptedId::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.DoublyEncryptedId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queried_encrypted_id_.ClearToEmpty();
  _impl_.doubly_encrypted_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* DoublyEncryptedId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes queried_encrypted_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_queried_encrypted_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes doubly_encrypted_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_doubly_encrypted_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoublyEncryptedId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.DoublyEncryptedId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes queried_encrypted_id = 1;
  if (!this->_internal_queried_encrypted_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_queried_encrypted_id(), target);
  }

  // bytes doubly_encrypted_id = 2;
  if (!this->_internal_doubly_encrypted_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_doubly_encrypted_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.DoublyEncryptedId)
  return target;
}

size_t DoublyEncryptedId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.DoublyEncryptedId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes queried_encrypted_id = 1;
  if (!this->_internal_queried_encrypted_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_queried_encrypted_id());
  }

  // bytes doubly_encrypted_id = 2;
  if (!this->_internal_doubly_encrypted_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_doubly_encrypted_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoublyEncryptedId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DoublyEncryptedId*>(
      &from));
}

void DoublyEncryptedId::MergeFrom(const DoublyEncryptedId& from) {
  DoublyEncryptedId* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.DoublyEncryptedId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_queried_encrypted_id().empty()) {
    _this->_internal_set_queried_encrypted_id(from._internal_queried_encrypted_id());
  }
  if (!from._internal_doubly_encrypted_id().empty()) {
    _this->_internal_set_doubly_encrypted_id(from._internal_doubly_encrypted_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DoublyEncryptedId::CopyFrom(const DoublyEncryptedId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.DoublyEncryptedId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoublyEncryptedId::IsInitialized() const {
  return true;
}

void DoublyEncryptedId::InternalSwap(DoublyEncryptedId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.queried_encrypted_id_, lhs_arena,
      &other->_impl_.queried_encrypted_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doubly_encrypted_id_, lhs_arena,
      &other->_impl_.doubly_encrypted_id_, rhs_arena
  );
}

std::string DoublyEncryptedId::GetTypeName() const {
  return "private_membership.DoublyEncryptedId";
}


// ===================================================================

class MembershipResponse::_Internal {
 public:
};

MembershipResponse::MembershipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.MembershipResponse)
}
MembershipResponse::MembershipResponse(const MembershipResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MembershipResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.is_member_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_member_ = from._impl_.is_member_;
  // @@protoc_insertion_point(copy_constructor:private_membership.MembershipResponse)
}

inline void MembershipResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , decltype(_impl_.is_member_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MembershipResponse::~MembershipResponse() {
  // @@protoc_insertion_point(destructor:private_membership.MembershipResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MembershipResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void MembershipResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MembershipResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.MembershipResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.ClearToEmpty();
  _impl_.is_member_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* MembershipResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_member = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_member_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MembershipResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.MembershipResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_member = 1;
  if (this->_internal_is_member() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_member(), target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "private_membership.MembershipResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.MembershipResponse)
  return target;
}

size_t MembershipResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.MembershipResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool is_member = 1;
  if (this->_internal_is_member() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MembershipResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MembershipResponse*>(
      &from));
}

void MembershipResponse::MergeFrom(const MembershipResponse& from) {
  MembershipResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.MembershipResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  if (from._internal_is_member() != 0) {
    _this->_internal_set_is_member(from._internal_is_member());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MembershipResponse::CopyFrom(const MembershipResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.MembershipResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MembershipResponse::IsInitialized() const {
  return true;
}

void MembershipResponse::InternalSwap(MembershipResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.is_member_, other->_impl_.is_member_);
}

std::string MembershipResponse::GetTypeName() const {
  return "private_membership.MembershipResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace private_membership
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::private_membership::DoublyEncryptedId*
Arena::CreateMaybeMessage< ::private_membership::DoublyEncryptedId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::DoublyEncryptedId >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::MembershipResponse*
Arena::CreateMaybeMessage< ::private_membership::MembershipResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::MembershipResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
