// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#include "serialization.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace rlwe {
PROTOBUF_CONSTEXPR SerializedNttPolynomial::SerializedNttPolynomial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coeffs_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_coeffs_)*/0} {}
struct SerializedNttPolynomialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedNttPolynomialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedNttPolynomialDefaultTypeInternal() {}
  union {
    SerializedNttPolynomial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedNttPolynomialDefaultTypeInternal _SerializedNttPolynomial_default_instance_;
PROTOBUF_CONSTEXPR SerializedSymmetricRlweCiphertext::SerializedSymmetricRlweCiphertext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.c_)*/{}
  , /*decltype(_impl_.error_)*/0
  , /*decltype(_impl_.power_of_s_)*/0} {}
struct SerializedSymmetricRlweCiphertextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedSymmetricRlweCiphertextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedSymmetricRlweCiphertextDefaultTypeInternal() {}
  union {
    SerializedSymmetricRlweCiphertext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedSymmetricRlweCiphertextDefaultTypeInternal _SerializedSymmetricRlweCiphertext_default_instance_;
PROTOBUF_CONSTEXPR SerializedRelinearizationKey::SerializedRelinearizationKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.c_)*/{}
  , /*decltype(_impl_.prng_seed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.log_decomposition_modulus_)*/0
  , /*decltype(_impl_.num_parts_)*/0
  , /*decltype(_impl_.power_of_s_)*/0} {}
struct SerializedRelinearizationKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedRelinearizationKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedRelinearizationKeyDefaultTypeInternal() {}
  union {
    SerializedRelinearizationKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedRelinearizationKeyDefaultTypeInternal _SerializedRelinearizationKey_default_instance_;
PROTOBUF_CONSTEXPR SerializedGaloisKey::SerializedGaloisKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr} {}
struct SerializedGaloisKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedGaloisKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedGaloisKeyDefaultTypeInternal() {}
  union {
    SerializedGaloisKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedGaloisKeyDefaultTypeInternal _SerializedGaloisKey_default_instance_;
}  // namespace rlwe
namespace rlwe {

// ===================================================================

class SerializedNttPolynomial::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedNttPolynomial>()._impl_._has_bits_);
  static void set_has_coeffs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_coeffs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SerializedNttPolynomial::SerializedNttPolynomial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rlwe.SerializedNttPolynomial)
}
SerializedNttPolynomial::SerializedNttPolynomial(const SerializedNttPolynomial& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SerializedNttPolynomial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coeffs_){}
    , decltype(_impl_.num_coeffs_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.coeffs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coeffs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_coeffs()) {
    _this->_impl_.coeffs_.Set(from._internal_coeffs(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.num_coeffs_ = from._impl_.num_coeffs_;
  // @@protoc_insertion_point(copy_constructor:rlwe.SerializedNttPolynomial)
}

inline void SerializedNttPolynomial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coeffs_){}
    , decltype(_impl_.num_coeffs_){0}
  };
  _impl_.coeffs_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.coeffs_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SerializedNttPolynomial::~SerializedNttPolynomial() {
  // @@protoc_insertion_point(destructor:rlwe.SerializedNttPolynomial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedNttPolynomial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coeffs_.Destroy();
}

void SerializedNttPolynomial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedNttPolynomial::Clear() {
// @@protoc_insertion_point(message_clear_start:rlwe.SerializedNttPolynomial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.coeffs_.ClearNonDefaultToEmpty();
  }
  _impl_.num_coeffs_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SerializedNttPolynomial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes coeffs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_coeffs();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_coeffs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_coeffs(&has_bits);
          _impl_.num_coeffs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerializedNttPolynomial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlwe.SerializedNttPolynomial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes coeffs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_coeffs(), target);
  }

  // optional int32 num_coeffs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_coeffs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlwe.SerializedNttPolynomial)
  return target;
}

size_t SerializedNttPolynomial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlwe.SerializedNttPolynomial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes coeffs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_coeffs());
    }

    // optional int32 num_coeffs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_coeffs());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedNttPolynomial::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SerializedNttPolynomial*>(
      &from));
}

void SerializedNttPolynomial::MergeFrom(const SerializedNttPolynomial& from) {
  SerializedNttPolynomial* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:rlwe.SerializedNttPolynomial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_coeffs(from._internal_coeffs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_coeffs_ = from._impl_.num_coeffs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SerializedNttPolynomial::CopyFrom(const SerializedNttPolynomial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlwe.SerializedNttPolynomial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedNttPolynomial::IsInitialized() const {
  return true;
}

void SerializedNttPolynomial::InternalSwap(SerializedNttPolynomial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.coeffs_, lhs_arena,
      &other->_impl_.coeffs_, rhs_arena
  );
  swap(_impl_.num_coeffs_, other->_impl_.num_coeffs_);
}

std::string SerializedNttPolynomial::GetTypeName() const {
  return "rlwe.SerializedNttPolynomial";
}


// ===================================================================

class SerializedSymmetricRlweCiphertext::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedSymmetricRlweCiphertext>()._impl_._has_bits_);
  static void set_has_power_of_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SerializedSymmetricRlweCiphertext::SerializedSymmetricRlweCiphertext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rlwe.SerializedSymmetricRlweCiphertext)
}
SerializedSymmetricRlweCiphertext::SerializedSymmetricRlweCiphertext(const SerializedSymmetricRlweCiphertext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SerializedSymmetricRlweCiphertext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c_){from._impl_.c_}
    , decltype(_impl_.error_){}
    , decltype(_impl_.power_of_s_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.error_, &from._impl_.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.power_of_s_) -
    reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.power_of_s_));
  // @@protoc_insertion_point(copy_constructor:rlwe.SerializedSymmetricRlweCiphertext)
}

inline void SerializedSymmetricRlweCiphertext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c_){arena}
    , decltype(_impl_.error_){0}
    , decltype(_impl_.power_of_s_){0}
  };
}

SerializedSymmetricRlweCiphertext::~SerializedSymmetricRlweCiphertext() {
  // @@protoc_insertion_point(destructor:rlwe.SerializedSymmetricRlweCiphertext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedSymmetricRlweCiphertext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.c_.~RepeatedPtrField();
}

void SerializedSymmetricRlweCiphertext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedSymmetricRlweCiphertext::Clear() {
// @@protoc_insertion_point(message_clear_start:rlwe.SerializedSymmetricRlweCiphertext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.power_of_s_) -
        reinterpret_cast<char*>(&_impl_.error_)) + sizeof(_impl_.power_of_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SerializedSymmetricRlweCiphertext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rlwe.SerializedNttPolynomial c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 power_of_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_power_of_s(&has_bits);
          _impl_.power_of_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_error(&has_bits);
          _impl_.error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerializedSymmetricRlweCiphertext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlwe.SerializedSymmetricRlweCiphertext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rlwe.SerializedNttPolynomial c = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_c_size()); i < n; i++) {
    const auto& repfield = this->_internal_c(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 power_of_s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_power_of_s(), target);
  }

  // optional double error = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlwe.SerializedSymmetricRlweCiphertext)
  return target;
}

size_t SerializedSymmetricRlweCiphertext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlwe.SerializedSymmetricRlweCiphertext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rlwe.SerializedNttPolynomial c = 1;
  total_size += 1UL * this->_internal_c_size();
  for (const auto& msg : this->_impl_.c_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double error = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 power_of_s = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power_of_s());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedSymmetricRlweCiphertext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SerializedSymmetricRlweCiphertext*>(
      &from));
}

void SerializedSymmetricRlweCiphertext::MergeFrom(const SerializedSymmetricRlweCiphertext& from) {
  SerializedSymmetricRlweCiphertext* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:rlwe.SerializedSymmetricRlweCiphertext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.c_.MergeFrom(from._impl_.c_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.error_ = from._impl_.error_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.power_of_s_ = from._impl_.power_of_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SerializedSymmetricRlweCiphertext::CopyFrom(const SerializedSymmetricRlweCiphertext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlwe.SerializedSymmetricRlweCiphertext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedSymmetricRlweCiphertext::IsInitialized() const {
  return true;
}

void SerializedSymmetricRlweCiphertext::InternalSwap(SerializedSymmetricRlweCiphertext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.c_.InternalSwap(&other->_impl_.c_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedSymmetricRlweCiphertext, _impl_.power_of_s_)
      + sizeof(SerializedSymmetricRlweCiphertext::_impl_.power_of_s_)
      - PROTOBUF_FIELD_OFFSET(SerializedSymmetricRlweCiphertext, _impl_.error_)>(
          reinterpret_cast<char*>(&_impl_.error_),
          reinterpret_cast<char*>(&other->_impl_.error_));
}

std::string SerializedSymmetricRlweCiphertext::GetTypeName() const {
  return "rlwe.SerializedSymmetricRlweCiphertext";
}


// ===================================================================

class SerializedRelinearizationKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedRelinearizationKey>()._impl_._has_bits_);
  static void set_has_log_decomposition_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_parts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prng_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_power_of_s(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SerializedRelinearizationKey::SerializedRelinearizationKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rlwe.SerializedRelinearizationKey)
}
SerializedRelinearizationKey::SerializedRelinearizationKey(const SerializedRelinearizationKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SerializedRelinearizationKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c_){from._impl_.c_}
    , decltype(_impl_.prng_seed_){}
    , decltype(_impl_.log_decomposition_modulus_){}
    , decltype(_impl_.num_parts_){}
    , decltype(_impl_.power_of_s_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prng_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_prng_seed()) {
    _this->_impl_.prng_seed_.Set(from._internal_prng_seed(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.log_decomposition_modulus_, &from._impl_.log_decomposition_modulus_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.power_of_s_) -
    reinterpret_cast<char*>(&_impl_.log_decomposition_modulus_)) + sizeof(_impl_.power_of_s_));
  // @@protoc_insertion_point(copy_constructor:rlwe.SerializedRelinearizationKey)
}

inline void SerializedRelinearizationKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.c_){arena}
    , decltype(_impl_.prng_seed_){}
    , decltype(_impl_.log_decomposition_modulus_){0}
    , decltype(_impl_.num_parts_){0}
    , decltype(_impl_.power_of_s_){0}
  };
  _impl_.prng_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SerializedRelinearizationKey::~SerializedRelinearizationKey() {
  // @@protoc_insertion_point(destructor:rlwe.SerializedRelinearizationKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedRelinearizationKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.c_.~RepeatedPtrField();
  _impl_.prng_seed_.Destroy();
}

void SerializedRelinearizationKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedRelinearizationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:rlwe.SerializedRelinearizationKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.c_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.prng_seed_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.log_decomposition_modulus_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.power_of_s_) -
        reinterpret_cast<char*>(&_impl_.log_decomposition_modulus_)) + sizeof(_impl_.power_of_s_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SerializedRelinearizationKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rlwe.SerializedNttPolynomial c = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_c(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 log_decomposition_modulus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_log_decomposition_modulus(&has_bits);
          _impl_.log_decomposition_modulus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_parts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_parts(&has_bits);
          _impl_.num_parts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes prng_seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_prng_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 power_of_s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_power_of_s(&has_bits);
          _impl_.power_of_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerializedRelinearizationKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlwe.SerializedRelinearizationKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rlwe.SerializedNttPolynomial c = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_c_size()); i < n; i++) {
    const auto& repfield = this->_internal_c(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 log_decomposition_modulus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_log_decomposition_modulus(), target);
  }

  // optional int32 num_parts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_parts(), target);
  }

  // optional bytes prng_seed = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_prng_seed(), target);
  }

  // optional int32 power_of_s = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_power_of_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlwe.SerializedRelinearizationKey)
  return target;
}

size_t SerializedRelinearizationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlwe.SerializedRelinearizationKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rlwe.SerializedNttPolynomial c = 1;
  total_size += 1UL * this->_internal_c_size();
  for (const auto& msg : this->_impl_.c_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes prng_seed = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prng_seed());
    }

    // optional int32 log_decomposition_modulus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_log_decomposition_modulus());
    }

    // optional int32 num_parts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_parts());
    }

    // optional int32 power_of_s = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_power_of_s());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedRelinearizationKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SerializedRelinearizationKey*>(
      &from));
}

void SerializedRelinearizationKey::MergeFrom(const SerializedRelinearizationKey& from) {
  SerializedRelinearizationKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:rlwe.SerializedRelinearizationKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.c_.MergeFrom(from._impl_.c_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_prng_seed(from._internal_prng_seed());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.log_decomposition_modulus_ = from._impl_.log_decomposition_modulus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_parts_ = from._impl_.num_parts_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.power_of_s_ = from._impl_.power_of_s_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SerializedRelinearizationKey::CopyFrom(const SerializedRelinearizationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlwe.SerializedRelinearizationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedRelinearizationKey::IsInitialized() const {
  return true;
}

void SerializedRelinearizationKey::InternalSwap(SerializedRelinearizationKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.c_.InternalSwap(&other->_impl_.c_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prng_seed_, lhs_arena,
      &other->_impl_.prng_seed_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedRelinearizationKey, _impl_.power_of_s_)
      + sizeof(SerializedRelinearizationKey::_impl_.power_of_s_)
      - PROTOBUF_FIELD_OFFSET(SerializedRelinearizationKey, _impl_.log_decomposition_modulus_)>(
          reinterpret_cast<char*>(&_impl_.log_decomposition_modulus_),
          reinterpret_cast<char*>(&other->_impl_.log_decomposition_modulus_));
}

std::string SerializedRelinearizationKey::GetTypeName() const {
  return "rlwe.SerializedRelinearizationKey";
}


// ===================================================================

class SerializedGaloisKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SerializedGaloisKey>()._impl_._has_bits_);
  static const ::rlwe::SerializedRelinearizationKey& key(const SerializedGaloisKey* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rlwe::SerializedRelinearizationKey&
SerializedGaloisKey::_Internal::key(const SerializedGaloisKey* msg) {
  return *msg->_impl_.key_;
}
SerializedGaloisKey::SerializedGaloisKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:rlwe.SerializedGaloisKey)
}
SerializedGaloisKey::SerializedGaloisKey(const SerializedGaloisKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SerializedGaloisKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::rlwe::SerializedRelinearizationKey(*from._impl_.key_);
  }
  // @@protoc_insertion_point(copy_constructor:rlwe.SerializedGaloisKey)
}

inline void SerializedGaloisKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
  };
}

SerializedGaloisKey::~SerializedGaloisKey() {
  // @@protoc_insertion_point(destructor:rlwe.SerializedGaloisKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedGaloisKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
}

void SerializedGaloisKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedGaloisKey::Clear() {
// @@protoc_insertion_point(message_clear_start:rlwe.SerializedGaloisKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.key_ != nullptr);
    _impl_.key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SerializedGaloisKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rlwe.SerializedRelinearizationKey key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerializedGaloisKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rlwe.SerializedGaloisKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .rlwe.SerializedRelinearizationKey key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rlwe.SerializedGaloisKey)
  return target;
}

size_t SerializedGaloisKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rlwe.SerializedGaloisKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .rlwe.SerializedRelinearizationKey key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SerializedGaloisKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SerializedGaloisKey*>(
      &from));
}

void SerializedGaloisKey::MergeFrom(const SerializedGaloisKey& from) {
  SerializedGaloisKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:rlwe.SerializedGaloisKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key()) {
    _this->_internal_mutable_key()->::rlwe::SerializedRelinearizationKey::MergeFrom(
        from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SerializedGaloisKey::CopyFrom(const SerializedGaloisKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rlwe.SerializedGaloisKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedGaloisKey::IsInitialized() const {
  return true;
}

void SerializedGaloisKey::InternalSwap(SerializedGaloisKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.key_, other->_impl_.key_);
}

std::string SerializedGaloisKey::GetTypeName() const {
  return "rlwe.SerializedGaloisKey";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rlwe
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rlwe::SerializedNttPolynomial*
Arena::CreateMaybeMessage< ::rlwe::SerializedNttPolynomial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rlwe::SerializedNttPolynomial >(arena);
}
template<> PROTOBUF_NOINLINE ::rlwe::SerializedSymmetricRlweCiphertext*
Arena::CreateMaybeMessage< ::rlwe::SerializedSymmetricRlweCiphertext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rlwe::SerializedSymmetricRlweCiphertext >(arena);
}
template<> PROTOBUF_NOINLINE ::rlwe::SerializedRelinearizationKey*
Arena::CreateMaybeMessage< ::rlwe::SerializedRelinearizationKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rlwe::SerializedRelinearizationKey >(arena);
}
template<> PROTOBUF_NOINLINE ::rlwe::SerializedGaloisKey*
Arena::CreateMaybeMessage< ::rlwe::SerializedGaloisKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rlwe::SerializedGaloisKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
