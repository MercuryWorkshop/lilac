// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: private_membership_rlwe.proto

#include "private_membership_rlwe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace private_membership {
namespace rlwe {
PROTOBUF_CONSTEXPR PrivateMembershipRlweOprfRequest::PrivateMembershipRlweOprfRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_ids_)*/{}
  , /*decltype(_impl_.use_case_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlweOprfRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweOprfRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweOprfRequestDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweOprfRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweOprfRequestDefaultTypeInternal _PrivateMembershipRlweOprfRequest_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlweOprfResponse::PrivateMembershipRlweOprfResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.doubly_encrypted_ids_)*/{}
  , /*decltype(_impl_.hashed_buckets_parameters_)*/nullptr
  , /*decltype(_impl_.encrypted_buckets_parameters_)*/nullptr
  , /*decltype(_impl_.rlwe_parameters_)*/nullptr
  , /*decltype(_impl_.key_version_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlweOprfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweOprfResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweOprfResponseDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweOprfResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweOprfResponseDefaultTypeInternal _PrivateMembershipRlweOprfResponse_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryRequest::PrivateMembershipRlweQueryRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queries_)*/{}
  , /*decltype(_impl_.key_version_)*/int64_t{0}
  , /*decltype(_impl_.use_case_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlweQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweQueryRequestDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweQueryRequestDefaultTypeInternal _PrivateMembershipRlweQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryResponse::PrivateMembershipRlweQueryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pir_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlweQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweQueryResponseDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweQueryResponseDefaultTypeInternal _PrivateMembershipRlweQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR RlwePlaintextId::RlwePlaintextId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.non_sensitive_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sensitive_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RlwePlaintextIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RlwePlaintextIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RlwePlaintextIdDefaultTypeInternal() {}
  union {
    RlwePlaintextId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RlwePlaintextIdDefaultTypeInternal _RlwePlaintextId_default_instance_;
PROTOBUF_CONSTEXPR HashedBucketsParameters::HashedBucketsParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashed_bucket_id_length_)*/0
  , /*decltype(_impl_.non_sensitive_id_hash_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HashedBucketsParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashedBucketsParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashedBucketsParametersDefaultTypeInternal() {}
  union {
    HashedBucketsParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashedBucketsParametersDefaultTypeInternal _HashedBucketsParameters_default_instance_;
PROTOBUF_CONSTEXPR EncryptedBucketsParameters::EncryptedBucketsParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_bucket_id_length_)*/0
  , /*decltype(_impl_.sensitive_id_hash_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedBucketsParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedBucketsParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedBucketsParametersDefaultTypeInternal() {}
  union {
    EncryptedBucketsParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedBucketsParametersDefaultTypeInternal _EncryptedBucketsParameters_default_instance_;
PROTOBUF_CONSTEXPR RlweParameters::RlweParameters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.modulus_)*/{}
  , /*decltype(_impl_.log_degree_)*/0
  , /*decltype(_impl_.log_t_)*/0
  , /*decltype(_impl_.variance_)*/0
  , /*decltype(_impl_.levels_of_recursion_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RlweParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RlweParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RlweParametersDefaultTypeInternal() {}
  union {
    RlweParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RlweParametersDefaultTypeInternal _RlweParameters_default_instance_;
PROTOBUF_CONSTEXPR Uint128::Uint128(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lo_)*/uint64_t{0u}
  , /*decltype(_impl_.hi_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Uint128DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Uint128DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Uint128DefaultTypeInternal() {}
  union {
    Uint128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Uint128DefaultTypeInternal _Uint128_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlweQuery_HashedBucketId::PrivateMembershipRlweQuery_HashedBucketId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashed_bucket_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bit_length_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlweQuery_HashedBucketIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweQuery_HashedBucketIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweQuery_HashedBucketIdDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweQuery_HashedBucketId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweQuery_HashedBucketIdDefaultTypeInternal _PrivateMembershipRlweQuery_HashedBucketId_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlweQuery::PrivateMembershipRlweQuery(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queried_encrypted_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pir_request_)*/nullptr
  , /*decltype(_impl_.hashed_bucket_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlweQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlweQueryDefaultTypeInternal() {}
  union {
    PrivateMembershipRlweQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlweQueryDefaultTypeInternal _PrivateMembershipRlweQuery_default_instance_;
PROTOBUF_CONSTEXPR PrivateMembershipRlwePirResponse::PrivateMembershipRlwePirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queried_encrypted_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pir_response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PrivateMembershipRlwePirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateMembershipRlwePirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateMembershipRlwePirResponseDefaultTypeInternal() {}
  union {
    PrivateMembershipRlwePirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateMembershipRlwePirResponseDefaultTypeInternal _PrivateMembershipRlwePirResponse_default_instance_;
PROTOBUF_CONSTEXPR PirRequest::PirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_.prng_seed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PirRequestDefaultTypeInternal() {}
  union {
    PirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PirRequestDefaultTypeInternal _PirRequest_default_instance_;
PROTOBUF_CONSTEXPR PirResponse::PirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_.plaintext_entry_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PirResponseDefaultTypeInternal() {}
  union {
    PirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PirResponseDefaultTypeInternal _PirResponse_default_instance_;
PROTOBUF_CONSTEXPR EncryptedBucket_EncryptedIdValuePair::EncryptedBucket_EncryptedIdValuePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.encrypted_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedBucket_EncryptedIdValuePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedBucket_EncryptedIdValuePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedBucket_EncryptedIdValuePairDefaultTypeInternal() {}
  union {
    EncryptedBucket_EncryptedIdValuePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedBucket_EncryptedIdValuePairDefaultTypeInternal _EncryptedBucket_EncryptedIdValuePair_default_instance_;
PROTOBUF_CONSTEXPR EncryptedBucket::EncryptedBucket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encrypted_id_value_pairs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EncryptedBucketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedBucketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedBucketDefaultTypeInternal() {}
  union {
    EncryptedBucket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedBucketDefaultTypeInternal _EncryptedBucket_default_instance_;
PROTOBUF_CONSTEXPR RlweMembershipResponses_MembershipResponseEntry::RlweMembershipResponses_MembershipResponseEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plaintext_id_)*/nullptr
  , /*decltype(_impl_.membership_response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RlweMembershipResponses_MembershipResponseEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RlweMembershipResponses_MembershipResponseEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RlweMembershipResponses_MembershipResponseEntryDefaultTypeInternal() {}
  union {
    RlweMembershipResponses_MembershipResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RlweMembershipResponses_MembershipResponseEntryDefaultTypeInternal _RlweMembershipResponses_MembershipResponseEntry_default_instance_;
PROTOBUF_CONSTEXPR RlweMembershipResponses::RlweMembershipResponses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_responses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RlweMembershipResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RlweMembershipResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RlweMembershipResponsesDefaultTypeInternal() {}
  union {
    RlweMembershipResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RlweMembershipResponsesDefaultTypeInternal _RlweMembershipResponses_default_instance_;
}  // namespace rlwe
}  // namespace private_membership
namespace private_membership {
namespace rlwe {
bool RlweUseCase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RlweUseCase_strings[13] = {};

static const char RlweUseCase_names[] =
  "CROS_DEVICE_SECONDARY_STATE"
  "CROS_DEVICE_STATE"
  "CROS_FRESNEL_28DAY_ACTIVE"
  "CROS_FRESNEL_7DAY_ACTIVE"
  "CROS_FRESNEL_CHURN_MONTHLY_COHORT"
  "CROS_FRESNEL_CHURN_MONTHLY_OBSERVATION"
  "CROS_FRESNEL_DAILY"
  "CROS_FRESNEL_FIRST_ACTIVE"
  "CROS_FRESNEL_MONTHLY"
  "RLWE_USE_CASE_UNDEFINED"
  "TEST_USE_CASE"
  "TEST_USE_CASE2"
  "TEST_USE_CASE3";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RlweUseCase_entries[] = {
  { {RlweUseCase_names + 0, 27}, 12 },
  { {RlweUseCase_names + 27, 17}, 5 },
  { {RlweUseCase_names + 44, 25}, 17 },
  { {RlweUseCase_names + 69, 24}, 16 },
  { {RlweUseCase_names + 93, 33}, 19 },
  { {RlweUseCase_names + 126, 38}, 20 },
  { {RlweUseCase_names + 164, 18}, 13 },
  { {RlweUseCase_names + 182, 25}, 15 },
  { {RlweUseCase_names + 207, 20}, 14 },
  { {RlweUseCase_names + 227, 23}, 0 },
  { {RlweUseCase_names + 250, 13}, 1 },
  { {RlweUseCase_names + 263, 14}, 2 },
  { {RlweUseCase_names + 277, 14}, 3 },
};

static const int RlweUseCase_entries_by_number[] = {
  9, // 0 -> RLWE_USE_CASE_UNDEFINED
  10, // 1 -> TEST_USE_CASE
  11, // 2 -> TEST_USE_CASE2
  12, // 3 -> TEST_USE_CASE3
  1, // 5 -> CROS_DEVICE_STATE
  0, // 12 -> CROS_DEVICE_SECONDARY_STATE
  6, // 13 -> CROS_FRESNEL_DAILY
  8, // 14 -> CROS_FRESNEL_MONTHLY
  7, // 15 -> CROS_FRESNEL_FIRST_ACTIVE
  3, // 16 -> CROS_FRESNEL_7DAY_ACTIVE
  2, // 17 -> CROS_FRESNEL_28DAY_ACTIVE
  4, // 19 -> CROS_FRESNEL_CHURN_MONTHLY_COHORT
  5, // 20 -> CROS_FRESNEL_CHURN_MONTHLY_OBSERVATION
};

const std::string& RlweUseCase_Name(
    RlweUseCase value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RlweUseCase_entries,
          RlweUseCase_entries_by_number,
          13, RlweUseCase_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RlweUseCase_entries,
      RlweUseCase_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RlweUseCase_strings[idx].get();
}
bool RlweUseCase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RlweUseCase* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RlweUseCase_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<RlweUseCase>(int_value);
  }
  return success;
}

// ===================================================================

class PrivateMembershipRlweOprfRequest::_Internal {
 public:
};

PrivateMembershipRlweOprfRequest::PrivateMembershipRlweOprfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
}
PrivateMembershipRlweOprfRequest::PrivateMembershipRlweOprfRequest(const PrivateMembershipRlweOprfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlweOprfRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_ids_){from._impl_.encrypted_ids_}
    , decltype(_impl_.use_case_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.use_case_ = from._impl_.use_case_;
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
}

inline void PrivateMembershipRlweOprfRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_ids_){arena}
    , decltype(_impl_.use_case_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrivateMembershipRlweOprfRequest::~PrivateMembershipRlweOprfRequest() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweOprfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_ids_.~RepeatedPtrField();
}

void PrivateMembershipRlweOprfRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlweOprfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_ids_.Clear();
  _impl_.use_case_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweOprfRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes encrypted_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_encrypted_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.RlweUseCase use_case = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_case(static_cast<::private_membership::rlwe::RlweUseCase>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweOprfRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes encrypted_ids = 1;
  for (int i = 0, n = this->_internal_encrypted_ids_size(); i < n; i++) {
    const auto& s = this->_internal_encrypted_ids(i);
    target = stream->WriteBytes(1, s, target);
  }

  // .private_membership.rlwe.RlweUseCase use_case = 2;
  if (this->_internal_use_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_use_case(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  return target;
}

size_t PrivateMembershipRlweOprfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes encrypted_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.encrypted_ids_.size());
  for (int i = 0, n = _impl_.encrypted_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.encrypted_ids_.Get(i));
  }

  // .private_membership.rlwe.RlweUseCase use_case = 2;
  if (this->_internal_use_case() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_case());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweOprfRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweOprfRequest*>(
      &from));
}

void PrivateMembershipRlweOprfRequest::MergeFrom(const PrivateMembershipRlweOprfRequest& from) {
  PrivateMembershipRlweOprfRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.encrypted_ids_.MergeFrom(from._impl_.encrypted_ids_);
  if (from._internal_use_case() != 0) {
    _this->_internal_set_use_case(from._internal_use_case());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweOprfRequest::CopyFrom(const PrivateMembershipRlweOprfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweOprfRequest::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweOprfRequest::InternalSwap(PrivateMembershipRlweOprfRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.encrypted_ids_.InternalSwap(&other->_impl_.encrypted_ids_);
  swap(_impl_.use_case_, other->_impl_.use_case_);
}

std::string PrivateMembershipRlweOprfRequest::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweOprfRequest";
}


// ===================================================================

class PrivateMembershipRlweOprfResponse::_Internal {
 public:
  static const ::private_membership::rlwe::HashedBucketsParameters& hashed_buckets_parameters(const PrivateMembershipRlweOprfResponse* msg);
  static const ::private_membership::rlwe::EncryptedBucketsParameters& encrypted_buckets_parameters(const PrivateMembershipRlweOprfResponse* msg);
  static const ::private_membership::rlwe::RlweParameters& rlwe_parameters(const PrivateMembershipRlweOprfResponse* msg);
};

const ::private_membership::rlwe::HashedBucketsParameters&
PrivateMembershipRlweOprfResponse::_Internal::hashed_buckets_parameters(const PrivateMembershipRlweOprfResponse* msg) {
  return *msg->_impl_.hashed_buckets_parameters_;
}
const ::private_membership::rlwe::EncryptedBucketsParameters&
PrivateMembershipRlweOprfResponse::_Internal::encrypted_buckets_parameters(const PrivateMembershipRlweOprfResponse* msg) {
  return *msg->_impl_.encrypted_buckets_parameters_;
}
const ::private_membership::rlwe::RlweParameters&
PrivateMembershipRlweOprfResponse::_Internal::rlwe_parameters(const PrivateMembershipRlweOprfResponse* msg) {
  return *msg->_impl_.rlwe_parameters_;
}
void PrivateMembershipRlweOprfResponse::clear_doubly_encrypted_ids() {
  _impl_.doubly_encrypted_ids_.Clear();
}
PrivateMembershipRlweOprfResponse::PrivateMembershipRlweOprfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
}
PrivateMembershipRlweOprfResponse::PrivateMembershipRlweOprfResponse(const PrivateMembershipRlweOprfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlweOprfResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.doubly_encrypted_ids_){from._impl_.doubly_encrypted_ids_}
    , decltype(_impl_.hashed_buckets_parameters_){nullptr}
    , decltype(_impl_.encrypted_buckets_parameters_){nullptr}
    , decltype(_impl_.rlwe_parameters_){nullptr}
    , decltype(_impl_.key_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_hashed_buckets_parameters()) {
    _this->_impl_.hashed_buckets_parameters_ = new ::private_membership::rlwe::HashedBucketsParameters(*from._impl_.hashed_buckets_parameters_);
  }
  if (from._internal_has_encrypted_buckets_parameters()) {
    _this->_impl_.encrypted_buckets_parameters_ = new ::private_membership::rlwe::EncryptedBucketsParameters(*from._impl_.encrypted_buckets_parameters_);
  }
  if (from._internal_has_rlwe_parameters()) {
    _this->_impl_.rlwe_parameters_ = new ::private_membership::rlwe::RlweParameters(*from._impl_.rlwe_parameters_);
  }
  _this->_impl_.key_version_ = from._impl_.key_version_;
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
}

inline void PrivateMembershipRlweOprfResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.doubly_encrypted_ids_){arena}
    , decltype(_impl_.hashed_buckets_parameters_){nullptr}
    , decltype(_impl_.encrypted_buckets_parameters_){nullptr}
    , decltype(_impl_.rlwe_parameters_){nullptr}
    , decltype(_impl_.key_version_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrivateMembershipRlweOprfResponse::~PrivateMembershipRlweOprfResponse() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweOprfResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.doubly_encrypted_ids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.hashed_buckets_parameters_;
  if (this != internal_default_instance()) delete _impl_.encrypted_buckets_parameters_;
  if (this != internal_default_instance()) delete _impl_.rlwe_parameters_;
}

void PrivateMembershipRlweOprfResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlweOprfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.doubly_encrypted_ids_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.hashed_buckets_parameters_ != nullptr) {
    delete _impl_.hashed_buckets_parameters_;
  }
  _impl_.hashed_buckets_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.encrypted_buckets_parameters_ != nullptr) {
    delete _impl_.encrypted_buckets_parameters_;
  }
  _impl_.encrypted_buckets_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rlwe_parameters_ != nullptr) {
    delete _impl_.rlwe_parameters_;
  }
  _impl_.rlwe_parameters_ = nullptr;
  _impl_.key_version_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweOprfResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.DoublyEncryptedId doubly_encrypted_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_doubly_encrypted_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.HashedBucketsParameters hashed_buckets_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hashed_buckets_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.EncryptedBucketsParameters encrypted_buckets_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypted_buckets_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.RlweParameters rlwe_parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rlwe_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 key_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweOprfResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.DoublyEncryptedId doubly_encrypted_ids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_doubly_encrypted_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_doubly_encrypted_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.HashedBucketsParameters hashed_buckets_parameters = 2;
  if (this->_internal_has_hashed_buckets_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hashed_buckets_parameters(this),
        _Internal::hashed_buckets_parameters(this).GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.EncryptedBucketsParameters encrypted_buckets_parameters = 3;
  if (this->_internal_has_encrypted_buckets_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::encrypted_buckets_parameters(this),
        _Internal::encrypted_buckets_parameters(this).GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.RlweParameters rlwe_parameters = 4;
  if (this->_internal_has_rlwe_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rlwe_parameters(this),
        _Internal::rlwe_parameters(this).GetCachedSize(), target, stream);
  }

  // int64 key_version = 5;
  if (this->_internal_key_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_key_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  return target;
}

size_t PrivateMembershipRlweOprfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.DoublyEncryptedId doubly_encrypted_ids = 1;
  total_size += 1UL * this->_internal_doubly_encrypted_ids_size();
  for (const auto& msg : this->_impl_.doubly_encrypted_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .private_membership.rlwe.HashedBucketsParameters hashed_buckets_parameters = 2;
  if (this->_internal_has_hashed_buckets_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hashed_buckets_parameters_);
  }

  // .private_membership.rlwe.EncryptedBucketsParameters encrypted_buckets_parameters = 3;
  if (this->_internal_has_encrypted_buckets_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.encrypted_buckets_parameters_);
  }

  // .private_membership.rlwe.RlweParameters rlwe_parameters = 4;
  if (this->_internal_has_rlwe_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rlwe_parameters_);
  }

  // int64 key_version = 5;
  if (this->_internal_key_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_key_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweOprfResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweOprfResponse*>(
      &from));
}

void PrivateMembershipRlweOprfResponse::MergeFrom(const PrivateMembershipRlweOprfResponse& from) {
  PrivateMembershipRlweOprfResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.doubly_encrypted_ids_.MergeFrom(from._impl_.doubly_encrypted_ids_);
  if (from._internal_has_hashed_buckets_parameters()) {
    _this->_internal_mutable_hashed_buckets_parameters()->::private_membership::rlwe::HashedBucketsParameters::MergeFrom(
        from._internal_hashed_buckets_parameters());
  }
  if (from._internal_has_encrypted_buckets_parameters()) {
    _this->_internal_mutable_encrypted_buckets_parameters()->::private_membership::rlwe::EncryptedBucketsParameters::MergeFrom(
        from._internal_encrypted_buckets_parameters());
  }
  if (from._internal_has_rlwe_parameters()) {
    _this->_internal_mutable_rlwe_parameters()->::private_membership::rlwe::RlweParameters::MergeFrom(
        from._internal_rlwe_parameters());
  }
  if (from._internal_key_version() != 0) {
    _this->_internal_set_key_version(from._internal_key_version());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweOprfResponse::CopyFrom(const PrivateMembershipRlweOprfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweOprfResponse::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweOprfResponse::InternalSwap(PrivateMembershipRlweOprfResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.doubly_encrypted_ids_.InternalSwap(&other->_impl_.doubly_encrypted_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweOprfResponse, _impl_.key_version_)
      + sizeof(PrivateMembershipRlweOprfResponse::_impl_.key_version_)
      - PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweOprfResponse, _impl_.hashed_buckets_parameters_)>(
          reinterpret_cast<char*>(&_impl_.hashed_buckets_parameters_),
          reinterpret_cast<char*>(&other->_impl_.hashed_buckets_parameters_));
}

std::string PrivateMembershipRlweOprfResponse::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweOprfResponse";
}


// ===================================================================

class PrivateMembershipRlweQueryRequest::_Internal {
 public:
};

PrivateMembershipRlweQueryRequest::PrivateMembershipRlweQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
}
PrivateMembershipRlweQueryRequest::PrivateMembershipRlweQueryRequest(const PrivateMembershipRlweQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlweQueryRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queries_){from._impl_.queries_}
    , decltype(_impl_.key_version_){}
    , decltype(_impl_.use_case_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.key_version_, &from._impl_.key_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.use_case_) -
    reinterpret_cast<char*>(&_impl_.key_version_)) + sizeof(_impl_.use_case_));
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
}

inline void PrivateMembershipRlweQueryRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queries_){arena}
    , decltype(_impl_.key_version_){int64_t{0}}
    , decltype(_impl_.use_case_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrivateMembershipRlweQueryRequest::~PrivateMembershipRlweQueryRequest() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queries_.~RepeatedPtrField();
}

void PrivateMembershipRlweQueryRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlweQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queries_.Clear();
  ::memset(&_impl_.key_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.use_case_) -
      reinterpret_cast<char*>(&_impl_.key_version_)) + sizeof(_impl_.use_case_));
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.rlwe.PrivateMembershipRlweQuery queries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.RlweUseCase use_case = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_use_case(static_cast<::private_membership::rlwe::RlweUseCase>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 key_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.key_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.PrivateMembershipRlweQuery queries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queries_size()); i < n; i++) {
    const auto& repfield = this->_internal_queries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.RlweUseCase use_case = 2;
  if (this->_internal_use_case() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_use_case(), target);
  }

  // int64 key_version = 3;
  if (this->_internal_key_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_key_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  return target;
}

size_t PrivateMembershipRlweQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.PrivateMembershipRlweQuery queries = 1;
  total_size += 1UL * this->_internal_queries_size();
  for (const auto& msg : this->_impl_.queries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 key_version = 3;
  if (this->_internal_key_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_key_version());
  }

  // .private_membership.rlwe.RlweUseCase use_case = 2;
  if (this->_internal_use_case() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_use_case());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweQueryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweQueryRequest*>(
      &from));
}

void PrivateMembershipRlweQueryRequest::MergeFrom(const PrivateMembershipRlweQueryRequest& from) {
  PrivateMembershipRlweQueryRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queries_.MergeFrom(from._impl_.queries_);
  if (from._internal_key_version() != 0) {
    _this->_internal_set_key_version(from._internal_key_version());
  }
  if (from._internal_use_case() != 0) {
    _this->_internal_set_use_case(from._internal_use_case());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweQueryRequest::CopyFrom(const PrivateMembershipRlweQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweQueryRequest::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweQueryRequest::InternalSwap(PrivateMembershipRlweQueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.queries_.InternalSwap(&other->_impl_.queries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweQueryRequest, _impl_.use_case_)
      + sizeof(PrivateMembershipRlweQueryRequest::_impl_.use_case_)
      - PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweQueryRequest, _impl_.key_version_)>(
          reinterpret_cast<char*>(&_impl_.key_version_),
          reinterpret_cast<char*>(&other->_impl_.key_version_));
}

std::string PrivateMembershipRlweQueryRequest::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweQueryRequest";
}


// ===================================================================

class PrivateMembershipRlweQueryResponse::_Internal {
 public:
};

PrivateMembershipRlweQueryResponse::PrivateMembershipRlweQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
}
PrivateMembershipRlweQueryResponse::PrivateMembershipRlweQueryResponse(const PrivateMembershipRlweQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlweQueryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pir_responses_){from._impl_.pir_responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
}

inline void PrivateMembershipRlweQueryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pir_responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PrivateMembershipRlweQueryResponse::~PrivateMembershipRlweQueryResponse() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pir_responses_.~RepeatedPtrField();
}

void PrivateMembershipRlweQueryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlweQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pir_responses_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.rlwe.PrivateMembershipRlwePirResponse pir_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pir_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.PrivateMembershipRlwePirResponse pir_responses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pir_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_pir_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  return target;
}

size_t PrivateMembershipRlweQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.PrivateMembershipRlwePirResponse pir_responses = 1;
  total_size += 1UL * this->_internal_pir_responses_size();
  for (const auto& msg : this->_impl_.pir_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweQueryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweQueryResponse*>(
      &from));
}

void PrivateMembershipRlweQueryResponse::MergeFrom(const PrivateMembershipRlweQueryResponse& from) {
  PrivateMembershipRlweQueryResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pir_responses_.MergeFrom(from._impl_.pir_responses_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweQueryResponse::CopyFrom(const PrivateMembershipRlweQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweQueryResponse::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweQueryResponse::InternalSwap(PrivateMembershipRlweQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pir_responses_.InternalSwap(&other->_impl_.pir_responses_);
}

std::string PrivateMembershipRlweQueryResponse::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweQueryResponse";
}


// ===================================================================

class RlwePlaintextId::_Internal {
 public:
};

RlwePlaintextId::RlwePlaintextId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.RlwePlaintextId)
}
RlwePlaintextId::RlwePlaintextId(const RlwePlaintextId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RlwePlaintextId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.non_sensitive_id_){}
    , decltype(_impl_.sensitive_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.non_sensitive_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.non_sensitive_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_non_sensitive_id().empty()) {
    _this->_impl_.non_sensitive_id_.Set(from._internal_non_sensitive_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sensitive_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensitive_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sensitive_id().empty()) {
    _this->_impl_.sensitive_id_.Set(from._internal_sensitive_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.RlwePlaintextId)
}

inline void RlwePlaintextId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.non_sensitive_id_){}
    , decltype(_impl_.sensitive_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.non_sensitive_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.non_sensitive_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sensitive_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sensitive_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RlwePlaintextId::~RlwePlaintextId() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.RlwePlaintextId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RlwePlaintextId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.non_sensitive_id_.Destroy();
  _impl_.sensitive_id_.Destroy();
}

void RlwePlaintextId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RlwePlaintextId::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.RlwePlaintextId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.non_sensitive_id_.ClearToEmpty();
  _impl_.sensitive_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* RlwePlaintextId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string non_sensitive_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_non_sensitive_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string sensitive_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sensitive_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RlwePlaintextId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.RlwePlaintextId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string non_sensitive_id = 1;
  if (!this->_internal_non_sensitive_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_non_sensitive_id().data(), static_cast<int>(this->_internal_non_sensitive_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "private_membership.rlwe.RlwePlaintextId.non_sensitive_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_non_sensitive_id(), target);
  }

  // string sensitive_id = 2;
  if (!this->_internal_sensitive_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensitive_id().data(), static_cast<int>(this->_internal_sensitive_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "private_membership.rlwe.RlwePlaintextId.sensitive_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensitive_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.RlwePlaintextId)
  return target;
}

size_t RlwePlaintextId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.RlwePlaintextId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string non_sensitive_id = 1;
  if (!this->_internal_non_sensitive_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_non_sensitive_id());
  }

  // string sensitive_id = 2;
  if (!this->_internal_sensitive_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensitive_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RlwePlaintextId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RlwePlaintextId*>(
      &from));
}

void RlwePlaintextId::MergeFrom(const RlwePlaintextId& from) {
  RlwePlaintextId* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.RlwePlaintextId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_non_sensitive_id().empty()) {
    _this->_internal_set_non_sensitive_id(from._internal_non_sensitive_id());
  }
  if (!from._internal_sensitive_id().empty()) {
    _this->_internal_set_sensitive_id(from._internal_sensitive_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RlwePlaintextId::CopyFrom(const RlwePlaintextId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.RlwePlaintextId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RlwePlaintextId::IsInitialized() const {
  return true;
}

void RlwePlaintextId::InternalSwap(RlwePlaintextId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.non_sensitive_id_, lhs_arena,
      &other->_impl_.non_sensitive_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sensitive_id_, lhs_arena,
      &other->_impl_.sensitive_id_, rhs_arena
  );
}

std::string RlwePlaintextId::GetTypeName() const {
  return "private_membership.rlwe.RlwePlaintextId";
}


// ===================================================================

class HashedBucketsParameters::_Internal {
 public:
};

HashedBucketsParameters::HashedBucketsParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.HashedBucketsParameters)
}
HashedBucketsParameters::HashedBucketsParameters(const HashedBucketsParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HashedBucketsParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashed_bucket_id_length_){}
    , decltype(_impl_.non_sensitive_id_hash_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.hashed_bucket_id_length_, &from._impl_.hashed_bucket_id_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.non_sensitive_id_hash_type_) -
    reinterpret_cast<char*>(&_impl_.hashed_bucket_id_length_)) + sizeof(_impl_.non_sensitive_id_hash_type_));
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.HashedBucketsParameters)
}

inline void HashedBucketsParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashed_bucket_id_length_){0}
    , decltype(_impl_.non_sensitive_id_hash_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HashedBucketsParameters::~HashedBucketsParameters() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.HashedBucketsParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HashedBucketsParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashedBucketsParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HashedBucketsParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.HashedBucketsParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hashed_bucket_id_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.non_sensitive_id_hash_type_) -
      reinterpret_cast<char*>(&_impl_.hashed_bucket_id_length_)) + sizeof(_impl_.non_sensitive_id_hash_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* HashedBucketsParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hashed_bucket_id_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hashed_bucket_id_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.HashType non_sensitive_id_hash_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_non_sensitive_id_hash_type(static_cast<::private_membership::HashType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashedBucketsParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.HashedBucketsParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hashed_bucket_id_length = 1;
  if (this->_internal_hashed_bucket_id_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_hashed_bucket_id_length(), target);
  }

  // .private_membership.HashType non_sensitive_id_hash_type = 2;
  if (this->_internal_non_sensitive_id_hash_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_non_sensitive_id_hash_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.HashedBucketsParameters)
  return target;
}

size_t HashedBucketsParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.HashedBucketsParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hashed_bucket_id_length = 1;
  if (this->_internal_hashed_bucket_id_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hashed_bucket_id_length());
  }

  // .private_membership.HashType non_sensitive_id_hash_type = 2;
  if (this->_internal_non_sensitive_id_hash_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_non_sensitive_id_hash_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashedBucketsParameters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HashedBucketsParameters*>(
      &from));
}

void HashedBucketsParameters::MergeFrom(const HashedBucketsParameters& from) {
  HashedBucketsParameters* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.HashedBucketsParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hashed_bucket_id_length() != 0) {
    _this->_internal_set_hashed_bucket_id_length(from._internal_hashed_bucket_id_length());
  }
  if (from._internal_non_sensitive_id_hash_type() != 0) {
    _this->_internal_set_non_sensitive_id_hash_type(from._internal_non_sensitive_id_hash_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HashedBucketsParameters::CopyFrom(const HashedBucketsParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.HashedBucketsParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashedBucketsParameters::IsInitialized() const {
  return true;
}

void HashedBucketsParameters::InternalSwap(HashedBucketsParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashedBucketsParameters, _impl_.non_sensitive_id_hash_type_)
      + sizeof(HashedBucketsParameters::_impl_.non_sensitive_id_hash_type_)
      - PROTOBUF_FIELD_OFFSET(HashedBucketsParameters, _impl_.hashed_bucket_id_length_)>(
          reinterpret_cast<char*>(&_impl_.hashed_bucket_id_length_),
          reinterpret_cast<char*>(&other->_impl_.hashed_bucket_id_length_));
}

std::string HashedBucketsParameters::GetTypeName() const {
  return "private_membership.rlwe.HashedBucketsParameters";
}


// ===================================================================

class EncryptedBucketsParameters::_Internal {
 public:
};

EncryptedBucketsParameters::EncryptedBucketsParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.EncryptedBucketsParameters)
}
EncryptedBucketsParameters::EncryptedBucketsParameters(const EncryptedBucketsParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedBucketsParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_bucket_id_length_){}
    , decltype(_impl_.sensitive_id_hash_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.encrypted_bucket_id_length_, &from._impl_.encrypted_bucket_id_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sensitive_id_hash_type_) -
    reinterpret_cast<char*>(&_impl_.encrypted_bucket_id_length_)) + sizeof(_impl_.sensitive_id_hash_type_));
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.EncryptedBucketsParameters)
}

inline void EncryptedBucketsParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_bucket_id_length_){0}
    , decltype(_impl_.sensitive_id_hash_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncryptedBucketsParameters::~EncryptedBucketsParameters() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.EncryptedBucketsParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedBucketsParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EncryptedBucketsParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedBucketsParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.EncryptedBucketsParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.encrypted_bucket_id_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sensitive_id_hash_type_) -
      reinterpret_cast<char*>(&_impl_.encrypted_bucket_id_length_)) + sizeof(_impl_.sensitive_id_hash_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedBucketsParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 encrypted_bucket_id_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.encrypted_bucket_id_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.EncryptedBucketHashType sensitive_id_hash_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sensitive_id_hash_type(static_cast<::private_membership::EncryptedBucketHashType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedBucketsParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.EncryptedBucketsParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 encrypted_bucket_id_length = 1;
  if (this->_internal_encrypted_bucket_id_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_encrypted_bucket_id_length(), target);
  }

  // .private_membership.EncryptedBucketHashType sensitive_id_hash_type = 2;
  if (this->_internal_sensitive_id_hash_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sensitive_id_hash_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.EncryptedBucketsParameters)
  return target;
}

size_t EncryptedBucketsParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.EncryptedBucketsParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 encrypted_bucket_id_length = 1;
  if (this->_internal_encrypted_bucket_id_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_encrypted_bucket_id_length());
  }

  // .private_membership.EncryptedBucketHashType sensitive_id_hash_type = 2;
  if (this->_internal_sensitive_id_hash_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sensitive_id_hash_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedBucketsParameters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedBucketsParameters*>(
      &from));
}

void EncryptedBucketsParameters::MergeFrom(const EncryptedBucketsParameters& from) {
  EncryptedBucketsParameters* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.EncryptedBucketsParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_encrypted_bucket_id_length() != 0) {
    _this->_internal_set_encrypted_bucket_id_length(from._internal_encrypted_bucket_id_length());
  }
  if (from._internal_sensitive_id_hash_type() != 0) {
    _this->_internal_set_sensitive_id_hash_type(from._internal_sensitive_id_hash_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedBucketsParameters::CopyFrom(const EncryptedBucketsParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.EncryptedBucketsParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedBucketsParameters::IsInitialized() const {
  return true;
}

void EncryptedBucketsParameters::InternalSwap(EncryptedBucketsParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncryptedBucketsParameters, _impl_.sensitive_id_hash_type_)
      + sizeof(EncryptedBucketsParameters::_impl_.sensitive_id_hash_type_)
      - PROTOBUF_FIELD_OFFSET(EncryptedBucketsParameters, _impl_.encrypted_bucket_id_length_)>(
          reinterpret_cast<char*>(&_impl_.encrypted_bucket_id_length_),
          reinterpret_cast<char*>(&other->_impl_.encrypted_bucket_id_length_));
}

std::string EncryptedBucketsParameters::GetTypeName() const {
  return "private_membership.rlwe.EncryptedBucketsParameters";
}


// ===================================================================

class RlweParameters::_Internal {
 public:
};

RlweParameters::RlweParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.RlweParameters)
}
RlweParameters::RlweParameters(const RlweParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RlweParameters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.modulus_){from._impl_.modulus_}
    , decltype(_impl_.log_degree_){}
    , decltype(_impl_.log_t_){}
    , decltype(_impl_.variance_){}
    , decltype(_impl_.levels_of_recursion_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.log_degree_, &from._impl_.log_degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.levels_of_recursion_) -
    reinterpret_cast<char*>(&_impl_.log_degree_)) + sizeof(_impl_.levels_of_recursion_));
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.RlweParameters)
}

inline void RlweParameters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.modulus_){arena}
    , decltype(_impl_.log_degree_){0}
    , decltype(_impl_.log_t_){0}
    , decltype(_impl_.variance_){0}
    , decltype(_impl_.levels_of_recursion_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RlweParameters::~RlweParameters() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.RlweParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RlweParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.modulus_.~RepeatedPtrField();
}

void RlweParameters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RlweParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.RlweParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.modulus_.Clear();
  ::memset(&_impl_.log_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.levels_of_recursion_) -
      reinterpret_cast<char*>(&_impl_.log_degree_)) + sizeof(_impl_.levels_of_recursion_));
  _internal_metadata_.Clear<std::string>();
}

const char* RlweParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.rlwe.Uint128 modulus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modulus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 log_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.log_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 log_t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.log_t_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 variance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 levels_of_recursion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.levels_of_recursion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RlweParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.RlweParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.Uint128 modulus = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modulus_size()); i < n; i++) {
    const auto& repfield = this->_internal_modulus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 log_degree = 2;
  if (this->_internal_log_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_log_degree(), target);
  }

  // int32 log_t = 3;
  if (this->_internal_log_t() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_log_t(), target);
  }

  // int32 variance = 4;
  if (this->_internal_variance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_variance(), target);
  }

  // int32 levels_of_recursion = 5;
  if (this->_internal_levels_of_recursion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_levels_of_recursion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.RlweParameters)
  return target;
}

size_t RlweParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.RlweParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.Uint128 modulus = 1;
  total_size += 1UL * this->_internal_modulus_size();
  for (const auto& msg : this->_impl_.modulus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 log_degree = 2;
  if (this->_internal_log_degree() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_log_degree());
  }

  // int32 log_t = 3;
  if (this->_internal_log_t() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_log_t());
  }

  // int32 variance = 4;
  if (this->_internal_variance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_variance());
  }

  // int32 levels_of_recursion = 5;
  if (this->_internal_levels_of_recursion() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_levels_of_recursion());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RlweParameters::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RlweParameters*>(
      &from));
}

void RlweParameters::MergeFrom(const RlweParameters& from) {
  RlweParameters* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.RlweParameters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.modulus_.MergeFrom(from._impl_.modulus_);
  if (from._internal_log_degree() != 0) {
    _this->_internal_set_log_degree(from._internal_log_degree());
  }
  if (from._internal_log_t() != 0) {
    _this->_internal_set_log_t(from._internal_log_t());
  }
  if (from._internal_variance() != 0) {
    _this->_internal_set_variance(from._internal_variance());
  }
  if (from._internal_levels_of_recursion() != 0) {
    _this->_internal_set_levels_of_recursion(from._internal_levels_of_recursion());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RlweParameters::CopyFrom(const RlweParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.RlweParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RlweParameters::IsInitialized() const {
  return true;
}

void RlweParameters::InternalSwap(RlweParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.modulus_.InternalSwap(&other->_impl_.modulus_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RlweParameters, _impl_.levels_of_recursion_)
      + sizeof(RlweParameters::_impl_.levels_of_recursion_)
      - PROTOBUF_FIELD_OFFSET(RlweParameters, _impl_.log_degree_)>(
          reinterpret_cast<char*>(&_impl_.log_degree_),
          reinterpret_cast<char*>(&other->_impl_.log_degree_));
}

std::string RlweParameters::GetTypeName() const {
  return "private_membership.rlwe.RlweParameters";
}


// ===================================================================

class Uint128::_Internal {
 public:
};

Uint128::Uint128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.Uint128)
}
Uint128::Uint128(const Uint128& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Uint128* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){}
    , decltype(_impl_.hi_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.lo_, &from._impl_.lo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hi_) -
    reinterpret_cast<char*>(&_impl_.lo_)) + sizeof(_impl_.hi_));
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.Uint128)
}

inline void Uint128::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lo_){uint64_t{0u}}
    , decltype(_impl_.hi_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Uint128::~Uint128() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.Uint128)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uint128::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uint128::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uint128::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.Uint128)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.lo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hi_) -
      reinterpret_cast<char*>(&_impl_.lo_)) + sizeof(_impl_.hi_));
  _internal_metadata_.Clear<std::string>();
}

const char* Uint128::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 lo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 hi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint128::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.Uint128)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 lo = 1;
  if (this->_internal_lo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lo(), target);
  }

  // uint64 hi = 2;
  if (this->_internal_hi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_hi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.Uint128)
  return target;
}

size_t Uint128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.Uint128)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 lo = 1;
  if (this->_internal_lo() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lo());
  }

  // uint64 hi = 2;
  if (this->_internal_hi() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint128::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Uint128*>(
      &from));
}

void Uint128::MergeFrom(const Uint128& from) {
  Uint128* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.Uint128)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_lo() != 0) {
    _this->_internal_set_lo(from._internal_lo());
  }
  if (from._internal_hi() != 0) {
    _this->_internal_set_hi(from._internal_hi());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Uint128::CopyFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint128::IsInitialized() const {
  return true;
}

void Uint128::InternalSwap(Uint128* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uint128, _impl_.hi_)
      + sizeof(Uint128::_impl_.hi_)
      - PROTOBUF_FIELD_OFFSET(Uint128, _impl_.lo_)>(
          reinterpret_cast<char*>(&_impl_.lo_),
          reinterpret_cast<char*>(&other->_impl_.lo_));
}

std::string Uint128::GetTypeName() const {
  return "private_membership.rlwe.Uint128";
}


// ===================================================================

class PrivateMembershipRlweQuery_HashedBucketId::_Internal {
 public:
};

PrivateMembershipRlweQuery_HashedBucketId::PrivateMembershipRlweQuery_HashedBucketId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
}
PrivateMembershipRlweQuery_HashedBucketId::PrivateMembershipRlweQuery_HashedBucketId(const PrivateMembershipRlweQuery_HashedBucketId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlweQuery_HashedBucketId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashed_bucket_id_){}
    , decltype(_impl_.bit_length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hashed_bucket_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashed_bucket_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashed_bucket_id().empty()) {
    _this->_impl_.hashed_bucket_id_.Set(from._internal_hashed_bucket_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bit_length_ = from._impl_.bit_length_;
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
}

inline void PrivateMembershipRlweQuery_HashedBucketId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hashed_bucket_id_){}
    , decltype(_impl_.bit_length_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hashed_bucket_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hashed_bucket_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrivateMembershipRlweQuery_HashedBucketId::~PrivateMembershipRlweQuery_HashedBucketId() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweQuery_HashedBucketId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashed_bucket_id_.Destroy();
}

void PrivateMembershipRlweQuery_HashedBucketId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlweQuery_HashedBucketId::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashed_bucket_id_.ClearToEmpty();
  _impl_.bit_length_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweQuery_HashedBucketId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hashed_bucket_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hashed_bucket_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bit_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bit_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweQuery_HashedBucketId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hashed_bucket_id = 1;
  if (!this->_internal_hashed_bucket_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_hashed_bucket_id(), target);
  }

  // int32 bit_length = 2;
  if (this->_internal_bit_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bit_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  return target;
}

size_t PrivateMembershipRlweQuery_HashedBucketId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hashed_bucket_id = 1;
  if (!this->_internal_hashed_bucket_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hashed_bucket_id());
  }

  // int32 bit_length = 2;
  if (this->_internal_bit_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bit_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweQuery_HashedBucketId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweQuery_HashedBucketId*>(
      &from));
}

void PrivateMembershipRlweQuery_HashedBucketId::MergeFrom(const PrivateMembershipRlweQuery_HashedBucketId& from) {
  PrivateMembershipRlweQuery_HashedBucketId* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hashed_bucket_id().empty()) {
    _this->_internal_set_hashed_bucket_id(from._internal_hashed_bucket_id());
  }
  if (from._internal_bit_length() != 0) {
    _this->_internal_set_bit_length(from._internal_bit_length());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweQuery_HashedBucketId::CopyFrom(const PrivateMembershipRlweQuery_HashedBucketId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweQuery_HashedBucketId::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweQuery_HashedBucketId::InternalSwap(PrivateMembershipRlweQuery_HashedBucketId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hashed_bucket_id_, lhs_arena,
      &other->_impl_.hashed_bucket_id_, rhs_arena
  );
  swap(_impl_.bit_length_, other->_impl_.bit_length_);
}

std::string PrivateMembershipRlweQuery_HashedBucketId::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId";
}


// ===================================================================

class PrivateMembershipRlweQuery::_Internal {
 public:
  static const ::private_membership::rlwe::PirRequest& pir_request(const PrivateMembershipRlweQuery* msg);
  static const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId& hashed_bucket_id(const PrivateMembershipRlweQuery* msg);
};

const ::private_membership::rlwe::PirRequest&
PrivateMembershipRlweQuery::_Internal::pir_request(const PrivateMembershipRlweQuery* msg) {
  return *msg->_impl_.pir_request_;
}
const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId&
PrivateMembershipRlweQuery::_Internal::hashed_bucket_id(const PrivateMembershipRlweQuery* msg) {
  return *msg->_impl_.hashed_bucket_id_;
}
PrivateMembershipRlweQuery::PrivateMembershipRlweQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlweQuery)
}
PrivateMembershipRlweQuery::PrivateMembershipRlweQuery(const PrivateMembershipRlweQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlweQuery* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queried_encrypted_id_){}
    , decltype(_impl_.pir_request_){nullptr}
    , decltype(_impl_.hashed_bucket_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.queried_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queried_encrypted_id().empty()) {
    _this->_impl_.queried_encrypted_id_.Set(from._internal_queried_encrypted_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pir_request()) {
    _this->_impl_.pir_request_ = new ::private_membership::rlwe::PirRequest(*from._impl_.pir_request_);
  }
  if (from._internal_has_hashed_bucket_id()) {
    _this->_impl_.hashed_bucket_id_ = new ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId(*from._impl_.hashed_bucket_id_);
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlweQuery)
}

inline void PrivateMembershipRlweQuery::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queried_encrypted_id_){}
    , decltype(_impl_.pir_request_){nullptr}
    , decltype(_impl_.hashed_bucket_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.queried_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrivateMembershipRlweQuery::~PrivateMembershipRlweQuery() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlweQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlweQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queried_encrypted_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pir_request_;
  if (this != internal_default_instance()) delete _impl_.hashed_bucket_id_;
}

void PrivateMembershipRlweQuery::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlweQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlweQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queried_encrypted_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pir_request_ != nullptr) {
    delete _impl_.pir_request_;
  }
  _impl_.pir_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.hashed_bucket_id_ != nullptr) {
    delete _impl_.hashed_bucket_id_;
  }
  _impl_.hashed_bucket_id_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlweQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes queried_encrypted_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_queried_encrypted_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PirRequest pir_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pir_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId hashed_bucket_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hashed_bucket_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlweQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlweQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes queried_encrypted_id = 1;
  if (!this->_internal_queried_encrypted_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_queried_encrypted_id(), target);
  }

  // .private_membership.rlwe.PirRequest pir_request = 2;
  if (this->_internal_has_pir_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pir_request(this),
        _Internal::pir_request(this).GetCachedSize(), target, stream);
  }

  // .private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId hashed_bucket_id = 3;
  if (this->_internal_has_hashed_bucket_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hashed_bucket_id(this),
        _Internal::hashed_bucket_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlweQuery)
  return target;
}

size_t PrivateMembershipRlweQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlweQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes queried_encrypted_id = 1;
  if (!this->_internal_queried_encrypted_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_queried_encrypted_id());
  }

  // .private_membership.rlwe.PirRequest pir_request = 2;
  if (this->_internal_has_pir_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pir_request_);
  }

  // .private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId hashed_bucket_id = 3;
  if (this->_internal_has_hashed_bucket_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hashed_bucket_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlweQuery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlweQuery*>(
      &from));
}

void PrivateMembershipRlweQuery::MergeFrom(const PrivateMembershipRlweQuery& from) {
  PrivateMembershipRlweQuery* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlweQuery)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_queried_encrypted_id().empty()) {
    _this->_internal_set_queried_encrypted_id(from._internal_queried_encrypted_id());
  }
  if (from._internal_has_pir_request()) {
    _this->_internal_mutable_pir_request()->::private_membership::rlwe::PirRequest::MergeFrom(
        from._internal_pir_request());
  }
  if (from._internal_has_hashed_bucket_id()) {
    _this->_internal_mutable_hashed_bucket_id()->::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId::MergeFrom(
        from._internal_hashed_bucket_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlweQuery::CopyFrom(const PrivateMembershipRlweQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlweQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlweQuery::IsInitialized() const {
  return true;
}

void PrivateMembershipRlweQuery::InternalSwap(PrivateMembershipRlweQuery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.queried_encrypted_id_, lhs_arena,
      &other->_impl_.queried_encrypted_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweQuery, _impl_.hashed_bucket_id_)
      + sizeof(PrivateMembershipRlweQuery::_impl_.hashed_bucket_id_)
      - PROTOBUF_FIELD_OFFSET(PrivateMembershipRlweQuery, _impl_.pir_request_)>(
          reinterpret_cast<char*>(&_impl_.pir_request_),
          reinterpret_cast<char*>(&other->_impl_.pir_request_));
}

std::string PrivateMembershipRlweQuery::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlweQuery";
}


// ===================================================================

class PrivateMembershipRlwePirResponse::_Internal {
 public:
  static const ::private_membership::rlwe::PirResponse& pir_response(const PrivateMembershipRlwePirResponse* msg);
};

const ::private_membership::rlwe::PirResponse&
PrivateMembershipRlwePirResponse::_Internal::pir_response(const PrivateMembershipRlwePirResponse* msg) {
  return *msg->_impl_.pir_response_;
}
PrivateMembershipRlwePirResponse::PrivateMembershipRlwePirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PrivateMembershipRlwePirResponse)
}
PrivateMembershipRlwePirResponse::PrivateMembershipRlwePirResponse(const PrivateMembershipRlwePirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PrivateMembershipRlwePirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queried_encrypted_id_){}
    , decltype(_impl_.pir_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.queried_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queried_encrypted_id().empty()) {
    _this->_impl_.queried_encrypted_id_.Set(from._internal_queried_encrypted_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_pir_response()) {
    _this->_impl_.pir_response_ = new ::private_membership::rlwe::PirResponse(*from._impl_.pir_response_);
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PrivateMembershipRlwePirResponse)
}

inline void PrivateMembershipRlwePirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queried_encrypted_id_){}
    , decltype(_impl_.pir_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.queried_encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PrivateMembershipRlwePirResponse::~PrivateMembershipRlwePirResponse() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateMembershipRlwePirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queried_encrypted_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pir_response_;
}

void PrivateMembershipRlwePirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PrivateMembershipRlwePirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queried_encrypted_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.pir_response_ != nullptr) {
    delete _impl_.pir_response_;
  }
  _impl_.pir_response_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateMembershipRlwePirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes queried_encrypted_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_queried_encrypted_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.PirResponse pir_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pir_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateMembershipRlwePirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes queried_encrypted_id = 1;
  if (!this->_internal_queried_encrypted_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_queried_encrypted_id(), target);
  }

  // .private_membership.rlwe.PirResponse pir_response = 2;
  if (this->_internal_has_pir_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pir_response(this),
        _Internal::pir_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  return target;
}

size_t PrivateMembershipRlwePirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes queried_encrypted_id = 1;
  if (!this->_internal_queried_encrypted_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_queried_encrypted_id());
  }

  // .private_membership.rlwe.PirResponse pir_response = 2;
  if (this->_internal_has_pir_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pir_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateMembershipRlwePirResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateMembershipRlwePirResponse*>(
      &from));
}

void PrivateMembershipRlwePirResponse::MergeFrom(const PrivateMembershipRlwePirResponse& from) {
  PrivateMembershipRlwePirResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_queried_encrypted_id().empty()) {
    _this->_internal_set_queried_encrypted_id(from._internal_queried_encrypted_id());
  }
  if (from._internal_has_pir_response()) {
    _this->_internal_mutable_pir_response()->::private_membership::rlwe::PirResponse::MergeFrom(
        from._internal_pir_response());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateMembershipRlwePirResponse::CopyFrom(const PrivateMembershipRlwePirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PrivateMembershipRlwePirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateMembershipRlwePirResponse::IsInitialized() const {
  return true;
}

void PrivateMembershipRlwePirResponse::InternalSwap(PrivateMembershipRlwePirResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.queried_encrypted_id_, lhs_arena,
      &other->_impl_.queried_encrypted_id_, rhs_arena
  );
  swap(_impl_.pir_response_, other->_impl_.pir_response_);
}

std::string PrivateMembershipRlwePirResponse::GetTypeName() const {
  return "private_membership.rlwe.PrivateMembershipRlwePirResponse";
}


// ===================================================================

class PirRequest::_Internal {
 public:
};

void PirRequest::clear_request() {
  _impl_.request_.Clear();
}
PirRequest::PirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PirRequest)
}
PirRequest::PirRequest(const PirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){from._impl_.request_}
    , decltype(_impl_.prng_seed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.prng_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prng_seed().empty()) {
    _this->_impl_.prng_seed_.Set(from._internal_prng_seed(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PirRequest)
}

inline void PirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){arena}
    , decltype(_impl_.prng_seed_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prng_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PirRequest::~PirRequest() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_.~RepeatedPtrField();
  _impl_.prng_seed_.Destroy();
}

void PirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_.Clear();
  _impl_.prng_seed_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* PirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rlwe.SerializedNttPolynomial request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes prng_seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_prng_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rlwe.SerializedNttPolynomial request = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_request_size()); i < n; i++) {
    const auto& repfield = this->_internal_request(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bytes prng_seed = 2;
  if (!this->_internal_prng_seed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_prng_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PirRequest)
  return target;
}

size_t PirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rlwe.SerializedNttPolynomial request = 1;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->_impl_.request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes prng_seed = 2;
  if (!this->_internal_prng_seed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_prng_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PirRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PirRequest*>(
      &from));
}

void PirRequest::MergeFrom(const PirRequest& from) {
  PirRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.request_.MergeFrom(from._impl_.request_);
  if (!from._internal_prng_seed().empty()) {
    _this->_internal_set_prng_seed(from._internal_prng_seed());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PirRequest::CopyFrom(const PirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirRequest::IsInitialized() const {
  return true;
}

void PirRequest::InternalSwap(PirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.request_.InternalSwap(&other->_impl_.request_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prng_seed_, lhs_arena,
      &other->_impl_.prng_seed_, rhs_arena
  );
}

std::string PirRequest::GetTypeName() const {
  return "private_membership.rlwe.PirRequest";
}


// ===================================================================

class PirResponse::_Internal {
 public:
};

void PirResponse::clear_response() {
  _impl_.response_.Clear();
}
PirResponse::PirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.PirResponse)
}
PirResponse::PirResponse(const PirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){from._impl_.response_}
    , decltype(_impl_.plaintext_entry_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.plaintext_entry_size_ = from._impl_.plaintext_entry_size_;
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.PirResponse)
}

inline void PirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){arena}
    , decltype(_impl_.plaintext_entry_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PirResponse::~PirResponse() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.PirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.response_.~RepeatedPtrField();
}

void PirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.PirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_.Clear();
  _impl_.plaintext_entry_size_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* PirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rlwe.SerializedSymmetricRlweCiphertext response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 plaintext_entry_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.plaintext_entry_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.PirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rlwe.SerializedSymmetricRlweCiphertext response = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_response_size()); i < n; i++) {
    const auto& repfield = this->_internal_response(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 plaintext_entry_size = 2;
  if (this->_internal_plaintext_entry_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_plaintext_entry_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.PirResponse)
  return target;
}

size_t PirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.PirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rlwe.SerializedSymmetricRlweCiphertext response = 1;
  total_size += 1UL * this->_internal_response_size();
  for (const auto& msg : this->_impl_.response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 plaintext_entry_size = 2;
  if (this->_internal_plaintext_entry_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plaintext_entry_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PirResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PirResponse*>(
      &from));
}

void PirResponse::MergeFrom(const PirResponse& from) {
  PirResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.PirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.response_.MergeFrom(from._impl_.response_);
  if (from._internal_plaintext_entry_size() != 0) {
    _this->_internal_set_plaintext_entry_size(from._internal_plaintext_entry_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PirResponse::CopyFrom(const PirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.PirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PirResponse::IsInitialized() const {
  return true;
}

void PirResponse::InternalSwap(PirResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.response_.InternalSwap(&other->_impl_.response_);
  swap(_impl_.plaintext_entry_size_, other->_impl_.plaintext_entry_size_);
}

std::string PirResponse::GetTypeName() const {
  return "private_membership.rlwe.PirResponse";
}


// ===================================================================

class EncryptedBucket_EncryptedIdValuePair::_Internal {
 public:
  static const ::private_membership::rlwe::RlwePlaintextId& id(const EncryptedBucket_EncryptedIdValuePair* msg);
};

const ::private_membership::rlwe::RlwePlaintextId&
EncryptedBucket_EncryptedIdValuePair::_Internal::id(const EncryptedBucket_EncryptedIdValuePair* msg) {
  return *msg->_impl_.id_;
}
EncryptedBucket_EncryptedIdValuePair::EncryptedBucket_EncryptedIdValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
}
EncryptedBucket_EncryptedIdValuePair::EncryptedBucket_EncryptedIdValuePair(const EncryptedBucket_EncryptedIdValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedBucket_EncryptedIdValuePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_id_){}
    , decltype(_impl_.encrypted_value_){}
    , decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_id().empty()) {
    _this->_impl_.encrypted_id_.Set(from._internal_encrypted_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.encrypted_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_value().empty()) {
    _this->_impl_.encrypted_value_.Set(from._internal_encrypted_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::private_membership::rlwe::RlwePlaintextId(*from._impl_.id_);
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
}

inline void EncryptedBucket_EncryptedIdValuePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_id_){}
    , decltype(_impl_.encrypted_value_){}
    , decltype(_impl_.id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encrypted_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encrypted_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptedBucket_EncryptedIdValuePair::~EncryptedBucket_EncryptedIdValuePair() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedBucket_EncryptedIdValuePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_id_.Destroy();
  _impl_.encrypted_value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
}

void EncryptedBucket_EncryptedIdValuePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedBucket_EncryptedIdValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_id_.ClearToEmpty();
  _impl_.encrypted_value_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedBucket_EncryptedIdValuePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes encrypted_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encrypted_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_encrypted_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.rlwe.RlwePlaintextId id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedBucket_EncryptedIdValuePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes encrypted_id = 1;
  if (!this->_internal_encrypted_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_id(), target);
  }

  // bytes encrypted_value = 2;
  if (!this->_internal_encrypted_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_encrypted_value(), target);
  }

  // .private_membership.rlwe.RlwePlaintextId id = 3;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  return target;
}

size_t EncryptedBucket_EncryptedIdValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encrypted_id = 1;
  if (!this->_internal_encrypted_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_id());
  }

  // bytes encrypted_value = 2;
  if (!this->_internal_encrypted_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_value());
  }

  // .private_membership.rlwe.RlwePlaintextId id = 3;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedBucket_EncryptedIdValuePair::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedBucket_EncryptedIdValuePair*>(
      &from));
}

void EncryptedBucket_EncryptedIdValuePair::MergeFrom(const EncryptedBucket_EncryptedIdValuePair& from) {
  EncryptedBucket_EncryptedIdValuePair* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encrypted_id().empty()) {
    _this->_internal_set_encrypted_id(from._internal_encrypted_id());
  }
  if (!from._internal_encrypted_value().empty()) {
    _this->_internal_set_encrypted_value(from._internal_encrypted_value());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::private_membership::rlwe::RlwePlaintextId::MergeFrom(
        from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedBucket_EncryptedIdValuePair::CopyFrom(const EncryptedBucket_EncryptedIdValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedBucket_EncryptedIdValuePair::IsInitialized() const {
  return true;
}

void EncryptedBucket_EncryptedIdValuePair::InternalSwap(EncryptedBucket_EncryptedIdValuePair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_id_, lhs_arena,
      &other->_impl_.encrypted_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encrypted_value_, lhs_arena,
      &other->_impl_.encrypted_value_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

std::string EncryptedBucket_EncryptedIdValuePair::GetTypeName() const {
  return "private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair";
}


// ===================================================================

class EncryptedBucket::_Internal {
 public:
};

EncryptedBucket::EncryptedBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.EncryptedBucket)
}
EncryptedBucket::EncryptedBucket(const EncryptedBucket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedBucket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_id_value_pairs_){from._impl_.encrypted_id_value_pairs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.EncryptedBucket)
}

inline void EncryptedBucket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encrypted_id_value_pairs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EncryptedBucket::~EncryptedBucket() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.EncryptedBucket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedBucket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encrypted_id_value_pairs_.~RepeatedPtrField();
}

void EncryptedBucket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.EncryptedBucket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encrypted_id_value_pairs_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedBucket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair encrypted_id_value_pairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_id_value_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EncryptedBucket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.EncryptedBucket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair encrypted_id_value_pairs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_encrypted_id_value_pairs_size()); i < n; i++) {
    const auto& repfield = this->_internal_encrypted_id_value_pairs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.EncryptedBucket)
  return target;
}

size_t EncryptedBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.EncryptedBucket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair encrypted_id_value_pairs = 1;
  total_size += 1UL * this->_internal_encrypted_id_value_pairs_size();
  for (const auto& msg : this->_impl_.encrypted_id_value_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedBucket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedBucket*>(
      &from));
}

void EncryptedBucket::MergeFrom(const EncryptedBucket& from) {
  EncryptedBucket* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.EncryptedBucket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.encrypted_id_value_pairs_.MergeFrom(from._impl_.encrypted_id_value_pairs_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedBucket::CopyFrom(const EncryptedBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.EncryptedBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedBucket::IsInitialized() const {
  return true;
}

void EncryptedBucket::InternalSwap(EncryptedBucket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.encrypted_id_value_pairs_.InternalSwap(&other->_impl_.encrypted_id_value_pairs_);
}

std::string EncryptedBucket::GetTypeName() const {
  return "private_membership.rlwe.EncryptedBucket";
}


// ===================================================================

class RlweMembershipResponses_MembershipResponseEntry::_Internal {
 public:
  static const ::private_membership::rlwe::RlwePlaintextId& plaintext_id(const RlweMembershipResponses_MembershipResponseEntry* msg);
  static const ::private_membership::MembershipResponse& membership_response(const RlweMembershipResponses_MembershipResponseEntry* msg);
};

const ::private_membership::rlwe::RlwePlaintextId&
RlweMembershipResponses_MembershipResponseEntry::_Internal::plaintext_id(const RlweMembershipResponses_MembershipResponseEntry* msg) {
  return *msg->_impl_.plaintext_id_;
}
const ::private_membership::MembershipResponse&
RlweMembershipResponses_MembershipResponseEntry::_Internal::membership_response(const RlweMembershipResponses_MembershipResponseEntry* msg) {
  return *msg->_impl_.membership_response_;
}
void RlweMembershipResponses_MembershipResponseEntry::clear_membership_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.membership_response_ != nullptr) {
    delete _impl_.membership_response_;
  }
  _impl_.membership_response_ = nullptr;
}
RlweMembershipResponses_MembershipResponseEntry::RlweMembershipResponses_MembershipResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
}
RlweMembershipResponses_MembershipResponseEntry::RlweMembershipResponses_MembershipResponseEntry(const RlweMembershipResponses_MembershipResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RlweMembershipResponses_MembershipResponseEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plaintext_id_){nullptr}
    , decltype(_impl_.membership_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_plaintext_id()) {
    _this->_impl_.plaintext_id_ = new ::private_membership::rlwe::RlwePlaintextId(*from._impl_.plaintext_id_);
  }
  if (from._internal_has_membership_response()) {
    _this->_impl_.membership_response_ = new ::private_membership::MembershipResponse(*from._impl_.membership_response_);
  }
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
}

inline void RlweMembershipResponses_MembershipResponseEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plaintext_id_){nullptr}
    , decltype(_impl_.membership_response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RlweMembershipResponses_MembershipResponseEntry::~RlweMembershipResponses_MembershipResponseEntry() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RlweMembershipResponses_MembershipResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.plaintext_id_;
  if (this != internal_default_instance()) delete _impl_.membership_response_;
}

void RlweMembershipResponses_MembershipResponseEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RlweMembershipResponses_MembershipResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.plaintext_id_ != nullptr) {
    delete _impl_.plaintext_id_;
  }
  _impl_.plaintext_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.membership_response_ != nullptr) {
    delete _impl_.membership_response_;
  }
  _impl_.membership_response_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* RlweMembershipResponses_MembershipResponseEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .private_membership.rlwe.RlwePlaintextId plaintext_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plaintext_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .private_membership.MembershipResponse membership_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_membership_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RlweMembershipResponses_MembershipResponseEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .private_membership.rlwe.RlwePlaintextId plaintext_id = 1;
  if (this->_internal_has_plaintext_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plaintext_id(this),
        _Internal::plaintext_id(this).GetCachedSize(), target, stream);
  }

  // .private_membership.MembershipResponse membership_response = 2;
  if (this->_internal_has_membership_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::membership_response(this),
        _Internal::membership_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  return target;
}

size_t RlweMembershipResponses_MembershipResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .private_membership.rlwe.RlwePlaintextId plaintext_id = 1;
  if (this->_internal_has_plaintext_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plaintext_id_);
  }

  // .private_membership.MembershipResponse membership_response = 2;
  if (this->_internal_has_membership_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.membership_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RlweMembershipResponses_MembershipResponseEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RlweMembershipResponses_MembershipResponseEntry*>(
      &from));
}

void RlweMembershipResponses_MembershipResponseEntry::MergeFrom(const RlweMembershipResponses_MembershipResponseEntry& from) {
  RlweMembershipResponses_MembershipResponseEntry* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_plaintext_id()) {
    _this->_internal_mutable_plaintext_id()->::private_membership::rlwe::RlwePlaintextId::MergeFrom(
        from._internal_plaintext_id());
  }
  if (from._internal_has_membership_response()) {
    _this->_internal_mutable_membership_response()->::private_membership::MembershipResponse::MergeFrom(
        from._internal_membership_response());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RlweMembershipResponses_MembershipResponseEntry::CopyFrom(const RlweMembershipResponses_MembershipResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RlweMembershipResponses_MembershipResponseEntry::IsInitialized() const {
  return true;
}

void RlweMembershipResponses_MembershipResponseEntry::InternalSwap(RlweMembershipResponses_MembershipResponseEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RlweMembershipResponses_MembershipResponseEntry, _impl_.membership_response_)
      + sizeof(RlweMembershipResponses_MembershipResponseEntry::_impl_.membership_response_)
      - PROTOBUF_FIELD_OFFSET(RlweMembershipResponses_MembershipResponseEntry, _impl_.plaintext_id_)>(
          reinterpret_cast<char*>(&_impl_.plaintext_id_),
          reinterpret_cast<char*>(&other->_impl_.plaintext_id_));
}

std::string RlweMembershipResponses_MembershipResponseEntry::GetTypeName() const {
  return "private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry";
}


// ===================================================================

class RlweMembershipResponses::_Internal {
 public:
};

RlweMembershipResponses::RlweMembershipResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:private_membership.rlwe.RlweMembershipResponses)
}
RlweMembershipResponses::RlweMembershipResponses(const RlweMembershipResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RlweMembershipResponses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_responses_){from._impl_.membership_responses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:private_membership.rlwe.RlweMembershipResponses)
}

inline void RlweMembershipResponses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_responses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RlweMembershipResponses::~RlweMembershipResponses() {
  // @@protoc_insertion_point(destructor:private_membership.rlwe.RlweMembershipResponses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RlweMembershipResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_responses_.~RepeatedPtrField();
}

void RlweMembershipResponses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RlweMembershipResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:private_membership.rlwe.RlweMembershipResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_responses_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RlweMembershipResponses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry membership_responses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_membership_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RlweMembershipResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:private_membership.rlwe.RlweMembershipResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry membership_responses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_membership_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_membership_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:private_membership.rlwe.RlweMembershipResponses)
  return target;
}

size_t RlweMembershipResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:private_membership.rlwe.RlweMembershipResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry membership_responses = 1;
  total_size += 1UL * this->_internal_membership_responses_size();
  for (const auto& msg : this->_impl_.membership_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RlweMembershipResponses::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RlweMembershipResponses*>(
      &from));
}

void RlweMembershipResponses::MergeFrom(const RlweMembershipResponses& from) {
  RlweMembershipResponses* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:private_membership.rlwe.RlweMembershipResponses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.membership_responses_.MergeFrom(from._impl_.membership_responses_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RlweMembershipResponses::CopyFrom(const RlweMembershipResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:private_membership.rlwe.RlweMembershipResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RlweMembershipResponses::IsInitialized() const {
  return true;
}

void RlweMembershipResponses::InternalSwap(RlweMembershipResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.membership_responses_.InternalSwap(&other->_impl_.membership_responses_);
}

std::string RlweMembershipResponses::GetTypeName() const {
  return "private_membership.rlwe.RlweMembershipResponses";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rlwe
}  // namespace private_membership
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweOprfRequest*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweOprfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweOprfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweOprfResponse*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweOprfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweOprfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweQueryRequest*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweQueryResponse*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::RlwePlaintextId*
Arena::CreateMaybeMessage< ::private_membership::rlwe::RlwePlaintextId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::RlwePlaintextId >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::HashedBucketsParameters*
Arena::CreateMaybeMessage< ::private_membership::rlwe::HashedBucketsParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::HashedBucketsParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::EncryptedBucketsParameters*
Arena::CreateMaybeMessage< ::private_membership::rlwe::EncryptedBucketsParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::EncryptedBucketsParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::RlweParameters*
Arena::CreateMaybeMessage< ::private_membership::rlwe::RlweParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::RlweParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::Uint128*
Arena::CreateMaybeMessage< ::private_membership::rlwe::Uint128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::Uint128 >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlweQuery*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlweQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlweQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PrivateMembershipRlwePirResponse*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PrivateMembershipRlwePirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PrivateMembershipRlwePirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PirRequest*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::PirResponse*
Arena::CreateMaybeMessage< ::private_membership::rlwe::PirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::PirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair*
Arena::CreateMaybeMessage< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::EncryptedBucket*
Arena::CreateMaybeMessage< ::private_membership::rlwe::EncryptedBucket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::EncryptedBucket >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry*
Arena::CreateMaybeMessage< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::private_membership::rlwe::RlweMembershipResponses*
Arena::CreateMaybeMessage< ::private_membership::rlwe::RlweMembershipResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::private_membership::rlwe::RlweMembershipResponses >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
