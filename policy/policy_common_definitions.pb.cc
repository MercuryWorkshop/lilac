// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_common_definitions.proto

#include "policy_common_definitions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace enterprise_management {
PROTOBUF_CONSTEXPR StringList::StringList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringListDefaultTypeInternal() {}
  union {
    StringList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringListDefaultTypeInternal _StringList_default_instance_;
PROTOBUF_CONSTEXPR PolicyOptions::PolicyOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/0} {}
struct PolicyOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyOptionsDefaultTypeInternal() {}
  union {
    PolicyOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyOptionsDefaultTypeInternal _PolicyOptions_default_instance_;
PROTOBUF_CONSTEXPR BooleanPolicyProto::BooleanPolicyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.policy_options_)*/nullptr
  , /*decltype(_impl_.value_)*/false} {}
struct BooleanPolicyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanPolicyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanPolicyProtoDefaultTypeInternal() {}
  union {
    BooleanPolicyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanPolicyProtoDefaultTypeInternal _BooleanPolicyProto_default_instance_;
PROTOBUF_CONSTEXPR IntegerPolicyProto::IntegerPolicyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.policy_options_)*/nullptr
  , /*decltype(_impl_.value_)*/int64_t{0}} {}
struct IntegerPolicyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntegerPolicyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntegerPolicyProtoDefaultTypeInternal() {}
  union {
    IntegerPolicyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntegerPolicyProtoDefaultTypeInternal _IntegerPolicyProto_default_instance_;
PROTOBUF_CONSTEXPR StringPolicyProto::StringPolicyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_options_)*/nullptr} {}
struct StringPolicyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringPolicyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringPolicyProtoDefaultTypeInternal() {}
  union {
    StringPolicyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringPolicyProtoDefaultTypeInternal _StringPolicyProto_default_instance_;
PROTOBUF_CONSTEXPR StringListPolicyProto::StringListPolicyProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.policy_options_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr} {}
struct StringListPolicyProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringListPolicyProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringListPolicyProtoDefaultTypeInternal() {}
  union {
    StringListPolicyProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringListPolicyProtoDefaultTypeInternal _StringListPolicyProto_default_instance_;
}  // namespace enterprise_management
namespace enterprise_management {
bool PolicyOptions_PolicyMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PolicyOptions_PolicyMode_strings[3] = {};

static const char PolicyOptions_PolicyMode_names[] =
  "MANDATORY"
  "RECOMMENDED"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PolicyOptions_PolicyMode_entries[] = {
  { {PolicyOptions_PolicyMode_names + 0, 9}, 0 },
  { {PolicyOptions_PolicyMode_names + 9, 11}, 1 },
  { {PolicyOptions_PolicyMode_names + 20, 5}, 2 },
};

static const int PolicyOptions_PolicyMode_entries_by_number[] = {
  0, // 0 -> MANDATORY
  1, // 1 -> RECOMMENDED
  2, // 2 -> UNSET
};

const std::string& PolicyOptions_PolicyMode_Name(
    PolicyOptions_PolicyMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PolicyOptions_PolicyMode_entries,
          PolicyOptions_PolicyMode_entries_by_number,
          3, PolicyOptions_PolicyMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PolicyOptions_PolicyMode_entries,
      PolicyOptions_PolicyMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PolicyOptions_PolicyMode_strings[idx].get();
}
bool PolicyOptions_PolicyMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PolicyOptions_PolicyMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PolicyOptions_PolicyMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PolicyOptions_PolicyMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PolicyOptions_PolicyMode PolicyOptions::MANDATORY;
constexpr PolicyOptions_PolicyMode PolicyOptions::RECOMMENDED;
constexpr PolicyOptions_PolicyMode PolicyOptions::UNSET;
constexpr PolicyOptions_PolicyMode PolicyOptions::PolicyMode_MIN;
constexpr PolicyOptions_PolicyMode PolicyOptions::PolicyMode_MAX;
constexpr int PolicyOptions::PolicyMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StringList::_Internal {
 public:
};

StringList::StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StringList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StringList)
}

inline void StringList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:enterprise_management.StringList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void StringList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StringList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StringList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_entries();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.StringList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string entries = 1;
  for (int i = 0, n = this->_internal_entries_size(); i < n; i++) {
    const auto& s = this->_internal_entries(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.StringList)
  return target;
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StringList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string entries = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.entries_.size());
  for (int i = 0, n = _impl_.entries_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.entries_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StringList*>(
      &from));
}

void StringList::MergeFrom(const StringList& from) {
  StringList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StringList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

std::string StringList::GetTypeName() const {
  return "enterprise_management.StringList";
}


// ===================================================================

class PolicyOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PolicyOptions>()._impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PolicyOptions::PolicyOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.PolicyOptions)
}
PolicyOptions::PolicyOptions(const PolicyOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PolicyOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.PolicyOptions)
}

inline void PolicyOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_){0}
  };
}

PolicyOptions::~PolicyOptions() {
  // @@protoc_insertion_point(destructor:enterprise_management.PolicyOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PolicyOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PolicyOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PolicyOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.PolicyOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PolicyOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_management::PolicyOptions_PolicyMode_IsValid(val))) {
            _internal_set_mode(static_cast<::enterprise_management::PolicyOptions_PolicyMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.PolicyOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.PolicyOptions)
  return target;
}

size_t PolicyOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.PolicyOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .enterprise_management.PolicyOptions.PolicyMode mode = 1 [default = MANDATORY];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PolicyOptions*>(
      &from));
}

void PolicyOptions::MergeFrom(const PolicyOptions& from) {
  PolicyOptions* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.PolicyOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mode()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PolicyOptions::CopyFrom(const PolicyOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.PolicyOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyOptions::IsInitialized() const {
  return true;
}

void PolicyOptions::InternalSwap(PolicyOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.mode_, other->_impl_.mode_);
}

std::string PolicyOptions::GetTypeName() const {
  return "enterprise_management.PolicyOptions";
}


// ===================================================================

class BooleanPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanPolicyProto>()._impl_._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const BooleanPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::PolicyOptions&
BooleanPolicyProto::_Internal::policy_options(const BooleanPolicyProto* msg) {
  return *msg->_impl_.policy_options_;
}
BooleanPolicyProto::BooleanPolicyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.BooleanPolicyProto)
}
BooleanPolicyProto::BooleanPolicyProto(const BooleanPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  BooleanPolicyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.policy_options_){nullptr}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_policy_options()) {
    _this->_impl_.policy_options_ = new ::enterprise_management::PolicyOptions(*from._impl_.policy_options_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.BooleanPolicyProto)
}

inline void BooleanPolicyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.policy_options_){nullptr}
    , decltype(_impl_.value_){false}
  };
}

BooleanPolicyProto::~BooleanPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.BooleanPolicyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BooleanPolicyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.policy_options_;
}

void BooleanPolicyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BooleanPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.BooleanPolicyProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.policy_options_ != nullptr);
    _impl_.policy_options_->Clear();
  }
  _impl_.value_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BooleanPolicyProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BooleanPolicyProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.BooleanPolicyProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::policy_options(this),
        _Internal::policy_options(this).GetCachedSize(), target, stream);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.BooleanPolicyProto)
  return target;
}

size_t BooleanPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.BooleanPolicyProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_options_);
    }

    // optional bool value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BooleanPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BooleanPolicyProto*>(
      &from));
}

void BooleanPolicyProto::MergeFrom(const BooleanPolicyProto& from) {
  BooleanPolicyProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.BooleanPolicyProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(
          from._internal_policy_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BooleanPolicyProto::CopyFrom(const BooleanPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.BooleanPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanPolicyProto::IsInitialized() const {
  return true;
}

void BooleanPolicyProto::InternalSwap(BooleanPolicyProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BooleanPolicyProto, _impl_.value_)
      + sizeof(BooleanPolicyProto::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(BooleanPolicyProto, _impl_.policy_options_)>(
          reinterpret_cast<char*>(&_impl_.policy_options_),
          reinterpret_cast<char*>(&other->_impl_.policy_options_));
}

std::string BooleanPolicyProto::GetTypeName() const {
  return "enterprise_management.BooleanPolicyProto";
}


// ===================================================================

class IntegerPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<IntegerPolicyProto>()._impl_._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const IntegerPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::PolicyOptions&
IntegerPolicyProto::_Internal::policy_options(const IntegerPolicyProto* msg) {
  return *msg->_impl_.policy_options_;
}
IntegerPolicyProto::IntegerPolicyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.IntegerPolicyProto)
}
IntegerPolicyProto::IntegerPolicyProto(const IntegerPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IntegerPolicyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.policy_options_){nullptr}
    , decltype(_impl_.value_){}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_policy_options()) {
    _this->_impl_.policy_options_ = new ::enterprise_management::PolicyOptions(*from._impl_.policy_options_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.IntegerPolicyProto)
}

inline void IntegerPolicyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.policy_options_){nullptr}
    , decltype(_impl_.value_){int64_t{0}}
  };
}

IntegerPolicyProto::~IntegerPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.IntegerPolicyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntegerPolicyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.policy_options_;
}

void IntegerPolicyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntegerPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.IntegerPolicyProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.policy_options_ != nullptr);
    _impl_.policy_options_->Clear();
  }
  _impl_.value_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IntegerPolicyProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntegerPolicyProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.IntegerPolicyProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::policy_options(this),
        _Internal::policy_options(this).GetCachedSize(), target, stream);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.IntegerPolicyProto)
  return target;
}

size_t IntegerPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.IntegerPolicyProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_options_);
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntegerPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IntegerPolicyProto*>(
      &from));
}

void IntegerPolicyProto::MergeFrom(const IntegerPolicyProto& from) {
  IntegerPolicyProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.IntegerPolicyProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(
          from._internal_policy_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IntegerPolicyProto::CopyFrom(const IntegerPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.IntegerPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegerPolicyProto::IsInitialized() const {
  return true;
}

void IntegerPolicyProto::InternalSwap(IntegerPolicyProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntegerPolicyProto, _impl_.value_)
      + sizeof(IntegerPolicyProto::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(IntegerPolicyProto, _impl_.policy_options_)>(
          reinterpret_cast<char*>(&_impl_.policy_options_),
          reinterpret_cast<char*>(&other->_impl_.policy_options_));
}

std::string IntegerPolicyProto::GetTypeName() const {
  return "enterprise_management.IntegerPolicyProto";
}


// ===================================================================

class StringPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StringPolicyProto>()._impl_._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const StringPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::enterprise_management::PolicyOptions&
StringPolicyProto::_Internal::policy_options(const StringPolicyProto* msg) {
  return *msg->_impl_.policy_options_;
}
StringPolicyProto::StringPolicyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.StringPolicyProto)
}
StringPolicyProto::StringPolicyProto(const StringPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StringPolicyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.policy_options_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_policy_options()) {
    _this->_impl_.policy_options_ = new ::enterprise_management::PolicyOptions(*from._impl_.policy_options_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StringPolicyProto)
}

inline void StringPolicyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.policy_options_){nullptr}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringPolicyProto::~StringPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.StringPolicyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringPolicyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.policy_options_;
}

void StringPolicyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StringPolicyProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.policy_options_ != nullptr);
      _impl_.policy_options_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StringPolicyProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringPolicyProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.StringPolicyProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::policy_options(this),
        _Internal::policy_options(this).GetCachedSize(), target, stream);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.StringPolicyProto)
  return target;
}

size_t StringPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StringPolicyProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_options_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StringPolicyProto*>(
      &from));
}

void StringPolicyProto::MergeFrom(const StringPolicyProto& from) {
  StringPolicyProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StringPolicyProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(
          from._internal_policy_options());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StringPolicyProto::CopyFrom(const StringPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StringPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringPolicyProto::IsInitialized() const {
  return true;
}

void StringPolicyProto::InternalSwap(StringPolicyProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.policy_options_, other->_impl_.policy_options_);
}

std::string StringPolicyProto::GetTypeName() const {
  return "enterprise_management.StringPolicyProto";
}


// ===================================================================

class StringListPolicyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StringListPolicyProto>()._impl_._has_bits_);
  static const ::enterprise_management::PolicyOptions& policy_options(const StringListPolicyProto* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::StringList& value(const StringListPolicyProto* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::enterprise_management::PolicyOptions&
StringListPolicyProto::_Internal::policy_options(const StringListPolicyProto* msg) {
  return *msg->_impl_.policy_options_;
}
const ::enterprise_management::StringList&
StringListPolicyProto::_Internal::value(const StringListPolicyProto* msg) {
  return *msg->_impl_.value_;
}
StringListPolicyProto::StringListPolicyProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:enterprise_management.StringListPolicyProto)
}
StringListPolicyProto::StringListPolicyProto(const StringListPolicyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StringListPolicyProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.policy_options_){nullptr}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_policy_options()) {
    _this->_impl_.policy_options_ = new ::enterprise_management::PolicyOptions(*from._impl_.policy_options_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::enterprise_management::StringList(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.StringListPolicyProto)
}

inline void StringListPolicyProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.policy_options_){nullptr}
    , decltype(_impl_.value_){nullptr}
  };
}

StringListPolicyProto::~StringListPolicyProto() {
  // @@protoc_insertion_point(destructor:enterprise_management.StringListPolicyProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringListPolicyProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.policy_options_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void StringListPolicyProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringListPolicyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.StringListPolicyProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.policy_options_ != nullptr);
      _impl_.policy_options_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StringListPolicyProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .enterprise_management.PolicyOptions policy_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .enterprise_management.StringList value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringListPolicyProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.StringListPolicyProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .enterprise_management.PolicyOptions policy_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::policy_options(this),
        _Internal::policy_options(this).GetCachedSize(), target, stream);
  }

  // optional .enterprise_management.StringList value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.StringListPolicyProto)
  return target;
}

size_t StringListPolicyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.StringListPolicyProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .enterprise_management.PolicyOptions policy_options = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.policy_options_);
    }

    // optional .enterprise_management.StringList value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringListPolicyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StringListPolicyProto*>(
      &from));
}

void StringListPolicyProto::MergeFrom(const StringListPolicyProto& from) {
  StringListPolicyProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.StringListPolicyProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(
          from._internal_policy_options());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::enterprise_management::StringList::MergeFrom(
          from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StringListPolicyProto::CopyFrom(const StringListPolicyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.StringListPolicyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringListPolicyProto::IsInitialized() const {
  return true;
}

void StringListPolicyProto::InternalSwap(StringListPolicyProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringListPolicyProto, _impl_.value_)
      + sizeof(StringListPolicyProto::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(StringListPolicyProto, _impl_.policy_options_)>(
          reinterpret_cast<char*>(&_impl_.policy_options_),
          reinterpret_cast<char*>(&other->_impl_.policy_options_));
}

std::string StringListPolicyProto::GetTypeName() const {
  return "enterprise_management.StringListPolicyProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::StringList*
Arena::CreateMaybeMessage< ::enterprise_management::StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::PolicyOptions*
Arena::CreateMaybeMessage< ::enterprise_management::PolicyOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::PolicyOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::BooleanPolicyProto*
Arena::CreateMaybeMessage< ::enterprise_management::BooleanPolicyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::BooleanPolicyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::IntegerPolicyProto*
Arena::CreateMaybeMessage< ::enterprise_management::IntegerPolicyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::IntegerPolicyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StringPolicyProto*
Arena::CreateMaybeMessage< ::enterprise_management::StringPolicyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::StringPolicyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_management::StringListPolicyProto*
Arena::CreateMaybeMessage< ::enterprise_management::StringListPolicyProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::StringListPolicyProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
