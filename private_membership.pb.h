// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: private_membership.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_private_5fmembership_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_private_5fmembership_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_private_5fmembership_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_private_5fmembership_2eproto {
  static const uint32_t offsets[];
};
namespace private_membership {
class DoublyEncryptedId;
struct DoublyEncryptedIdDefaultTypeInternal;
extern DoublyEncryptedIdDefaultTypeInternal _DoublyEncryptedId_default_instance_;
class MembershipResponse;
struct MembershipResponseDefaultTypeInternal;
extern MembershipResponseDefaultTypeInternal _MembershipResponse_default_instance_;
}  // namespace private_membership
PROTOBUF_NAMESPACE_OPEN
template<> ::private_membership::DoublyEncryptedId* Arena::CreateMaybeMessage<::private_membership::DoublyEncryptedId>(Arena*);
template<> ::private_membership::MembershipResponse* Arena::CreateMaybeMessage<::private_membership::MembershipResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace private_membership {

enum HashType : int {
  HASH_TYPE_UNDEFINED = 0,
  TEST_HASH_TYPE = 1,
  SHA256 = 2,
  HashType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  HashType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool HashType_IsValid(int value);
constexpr HashType HashType_MIN = HASH_TYPE_UNDEFINED;
constexpr HashType HashType_MAX = SHA256;
constexpr int HashType_ARRAYSIZE = HashType_MAX + 1;

const std::string& HashType_Name(HashType value);
template<typename T>
inline const std::string& HashType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HashType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HashType_Name.");
  return HashType_Name(static_cast<HashType>(enum_t_value));
}
bool HashType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HashType* value);
enum EncryptedBucketHashType : int {
  ENCRYPTED_BUCKET_HASH_TYPE_UNDEFINED = 0,
  ENCRYPTED_BUCKET_TEST_HASH_TYPE = 3,
  SHA256_NON_SENSITIVE_AND_SENSITIVE_ID = 1,
  EncryptedBucketHashType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EncryptedBucketHashType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EncryptedBucketHashType_IsValid(int value);
constexpr EncryptedBucketHashType EncryptedBucketHashType_MIN = ENCRYPTED_BUCKET_HASH_TYPE_UNDEFINED;
constexpr EncryptedBucketHashType EncryptedBucketHashType_MAX = ENCRYPTED_BUCKET_TEST_HASH_TYPE;
constexpr int EncryptedBucketHashType_ARRAYSIZE = EncryptedBucketHashType_MAX + 1;

const std::string& EncryptedBucketHashType_Name(EncryptedBucketHashType value);
template<typename T>
inline const std::string& EncryptedBucketHashType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncryptedBucketHashType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncryptedBucketHashType_Name.");
  return EncryptedBucketHashType_Name(static_cast<EncryptedBucketHashType>(enum_t_value));
}
bool EncryptedBucketHashType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EncryptedBucketHashType* value);
// ===================================================================

class DoublyEncryptedId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.DoublyEncryptedId) */ {
 public:
  inline DoublyEncryptedId() : DoublyEncryptedId(nullptr) {}
  ~DoublyEncryptedId() override;
  explicit PROTOBUF_CONSTEXPR DoublyEncryptedId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoublyEncryptedId(const DoublyEncryptedId& from);
  DoublyEncryptedId(DoublyEncryptedId&& from) noexcept
    : DoublyEncryptedId() {
    *this = ::std::move(from);
  }

  inline DoublyEncryptedId& operator=(const DoublyEncryptedId& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoublyEncryptedId& operator=(DoublyEncryptedId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DoublyEncryptedId& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoublyEncryptedId* internal_default_instance() {
    return reinterpret_cast<const DoublyEncryptedId*>(
               &_DoublyEncryptedId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DoublyEncryptedId& a, DoublyEncryptedId& b) {
    a.Swap(&b);
  }
  inline void Swap(DoublyEncryptedId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoublyEncryptedId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoublyEncryptedId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoublyEncryptedId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DoublyEncryptedId& from);
  void MergeFrom(const DoublyEncryptedId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DoublyEncryptedId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.DoublyEncryptedId";
  }
  protected:
  explicit DoublyEncryptedId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriedEncryptedIdFieldNumber = 1,
    kDoublyEncryptedIdFieldNumber = 2,
  };
  // bytes queried_encrypted_id = 1;
  void clear_queried_encrypted_id();
  const std::string& queried_encrypted_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_queried_encrypted_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_queried_encrypted_id();
  PROTOBUF_NODISCARD std::string* release_queried_encrypted_id();
  void set_allocated_queried_encrypted_id(std::string* queried_encrypted_id);
  private:
  const std::string& _internal_queried_encrypted_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queried_encrypted_id(const std::string& value);
  std::string* _internal_mutable_queried_encrypted_id();
  public:

  // bytes doubly_encrypted_id = 2;
  void clear_doubly_encrypted_id();
  const std::string& doubly_encrypted_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doubly_encrypted_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doubly_encrypted_id();
  PROTOBUF_NODISCARD std::string* release_doubly_encrypted_id();
  void set_allocated_doubly_encrypted_id(std::string* doubly_encrypted_id);
  private:
  const std::string& _internal_doubly_encrypted_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doubly_encrypted_id(const std::string& value);
  std::string* _internal_mutable_doubly_encrypted_id();
  public:

  // @@protoc_insertion_point(class_scope:private_membership.DoublyEncryptedId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queried_encrypted_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doubly_encrypted_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_2eproto;
};
// -------------------------------------------------------------------

class MembershipResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.MembershipResponse) */ {
 public:
  inline MembershipResponse() : MembershipResponse(nullptr) {}
  ~MembershipResponse() override;
  explicit PROTOBUF_CONSTEXPR MembershipResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MembershipResponse(const MembershipResponse& from);
  MembershipResponse(MembershipResponse&& from) noexcept
    : MembershipResponse() {
    *this = ::std::move(from);
  }

  inline MembershipResponse& operator=(const MembershipResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MembershipResponse& operator=(MembershipResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const MembershipResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MembershipResponse* internal_default_instance() {
    return reinterpret_cast<const MembershipResponse*>(
               &_MembershipResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MembershipResponse& a, MembershipResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MembershipResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MembershipResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MembershipResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MembershipResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MembershipResponse& from);
  void MergeFrom(const MembershipResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MembershipResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.MembershipResponse";
  }
  protected:
  explicit MembershipResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIsMemberFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool is_member = 1;
  void clear_is_member();
  bool is_member() const;
  void set_is_member(bool value);
  private:
  bool _internal_is_member() const;
  void _internal_set_is_member(bool value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.MembershipResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    bool is_member_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DoublyEncryptedId

// bytes queried_encrypted_id = 1;
inline void DoublyEncryptedId::clear_queried_encrypted_id() {
  _impl_.queried_encrypted_id_.ClearToEmpty();
}
inline const std::string& DoublyEncryptedId::queried_encrypted_id() const {
  // @@protoc_insertion_point(field_get:private_membership.DoublyEncryptedId.queried_encrypted_id)
  return _internal_queried_encrypted_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DoublyEncryptedId::set_queried_encrypted_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.queried_encrypted_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.DoublyEncryptedId.queried_encrypted_id)
}
inline std::string* DoublyEncryptedId::mutable_queried_encrypted_id() {
  std::string* _s = _internal_mutable_queried_encrypted_id();
  // @@protoc_insertion_point(field_mutable:private_membership.DoublyEncryptedId.queried_encrypted_id)
  return _s;
}
inline const std::string& DoublyEncryptedId::_internal_queried_encrypted_id() const {
  return _impl_.queried_encrypted_id_.Get();
}
inline void DoublyEncryptedId::_internal_set_queried_encrypted_id(const std::string& value) {
  
  _impl_.queried_encrypted_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DoublyEncryptedId::_internal_mutable_queried_encrypted_id() {
  
  return _impl_.queried_encrypted_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DoublyEncryptedId::release_queried_encrypted_id() {
  // @@protoc_insertion_point(field_release:private_membership.DoublyEncryptedId.queried_encrypted_id)
  return _impl_.queried_encrypted_id_.Release();
}
inline void DoublyEncryptedId::set_allocated_queried_encrypted_id(std::string* queried_encrypted_id) {
  if (queried_encrypted_id != nullptr) {
    
  } else {
    
  }
  _impl_.queried_encrypted_id_.SetAllocated(queried_encrypted_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.queried_encrypted_id_.IsDefault()) {
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.DoublyEncryptedId.queried_encrypted_id)
}

// bytes doubly_encrypted_id = 2;
inline void DoublyEncryptedId::clear_doubly_encrypted_id() {
  _impl_.doubly_encrypted_id_.ClearToEmpty();
}
inline const std::string& DoublyEncryptedId::doubly_encrypted_id() const {
  // @@protoc_insertion_point(field_get:private_membership.DoublyEncryptedId.doubly_encrypted_id)
  return _internal_doubly_encrypted_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DoublyEncryptedId::set_doubly_encrypted_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.doubly_encrypted_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.DoublyEncryptedId.doubly_encrypted_id)
}
inline std::string* DoublyEncryptedId::mutable_doubly_encrypted_id() {
  std::string* _s = _internal_mutable_doubly_encrypted_id();
  // @@protoc_insertion_point(field_mutable:private_membership.DoublyEncryptedId.doubly_encrypted_id)
  return _s;
}
inline const std::string& DoublyEncryptedId::_internal_doubly_encrypted_id() const {
  return _impl_.doubly_encrypted_id_.Get();
}
inline void DoublyEncryptedId::_internal_set_doubly_encrypted_id(const std::string& value) {
  
  _impl_.doubly_encrypted_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DoublyEncryptedId::_internal_mutable_doubly_encrypted_id() {
  
  return _impl_.doubly_encrypted_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DoublyEncryptedId::release_doubly_encrypted_id() {
  // @@protoc_insertion_point(field_release:private_membership.DoublyEncryptedId.doubly_encrypted_id)
  return _impl_.doubly_encrypted_id_.Release();
}
inline void DoublyEncryptedId::set_allocated_doubly_encrypted_id(std::string* doubly_encrypted_id) {
  if (doubly_encrypted_id != nullptr) {
    
  } else {
    
  }
  _impl_.doubly_encrypted_id_.SetAllocated(doubly_encrypted_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.doubly_encrypted_id_.IsDefault()) {
    _impl_.doubly_encrypted_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.DoublyEncryptedId.doubly_encrypted_id)
}

// -------------------------------------------------------------------

// MembershipResponse

// bool is_member = 1;
inline void MembershipResponse::clear_is_member() {
  _impl_.is_member_ = false;
}
inline bool MembershipResponse::_internal_is_member() const {
  return _impl_.is_member_;
}
inline bool MembershipResponse::is_member() const {
  // @@protoc_insertion_point(field_get:private_membership.MembershipResponse.is_member)
  return _internal_is_member();
}
inline void MembershipResponse::_internal_set_is_member(bool value) {
  
  _impl_.is_member_ = value;
}
inline void MembershipResponse::set_is_member(bool value) {
  _internal_set_is_member(value);
  // @@protoc_insertion_point(field_set:private_membership.MembershipResponse.is_member)
}

// string value = 2;
inline void MembershipResponse::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& MembershipResponse::value() const {
  // @@protoc_insertion_point(field_get:private_membership.MembershipResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MembershipResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.MembershipResponse.value)
}
inline std::string* MembershipResponse::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:private_membership.MembershipResponse.value)
  return _s;
}
inline const std::string& MembershipResponse::_internal_value() const {
  return _impl_.value_.Get();
}
inline void MembershipResponse::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* MembershipResponse::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* MembershipResponse::release_value() {
  // @@protoc_insertion_point(field_release:private_membership.MembershipResponse.value)
  return _impl_.value_.Release();
}
inline void MembershipResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.MembershipResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace private_membership

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::private_membership::HashType> : ::std::true_type {};
template <> struct is_proto_enum< ::private_membership::EncryptedBucketHashType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_private_5fmembership_2eproto
