// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serialization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_serialization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_serialization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_serialization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_serialization_2eproto {
  static const uint32_t offsets[];
};
namespace rlwe {
class SerializedGaloisKey;
struct SerializedGaloisKeyDefaultTypeInternal;
extern SerializedGaloisKeyDefaultTypeInternal _SerializedGaloisKey_default_instance_;
class SerializedNttPolynomial;
struct SerializedNttPolynomialDefaultTypeInternal;
extern SerializedNttPolynomialDefaultTypeInternal _SerializedNttPolynomial_default_instance_;
class SerializedRelinearizationKey;
struct SerializedRelinearizationKeyDefaultTypeInternal;
extern SerializedRelinearizationKeyDefaultTypeInternal _SerializedRelinearizationKey_default_instance_;
class SerializedSymmetricRlweCiphertext;
struct SerializedSymmetricRlweCiphertextDefaultTypeInternal;
extern SerializedSymmetricRlweCiphertextDefaultTypeInternal _SerializedSymmetricRlweCiphertext_default_instance_;
}  // namespace rlwe
PROTOBUF_NAMESPACE_OPEN
template<> ::rlwe::SerializedGaloisKey* Arena::CreateMaybeMessage<::rlwe::SerializedGaloisKey>(Arena*);
template<> ::rlwe::SerializedNttPolynomial* Arena::CreateMaybeMessage<::rlwe::SerializedNttPolynomial>(Arena*);
template<> ::rlwe::SerializedRelinearizationKey* Arena::CreateMaybeMessage<::rlwe::SerializedRelinearizationKey>(Arena*);
template<> ::rlwe::SerializedSymmetricRlweCiphertext* Arena::CreateMaybeMessage<::rlwe::SerializedSymmetricRlweCiphertext>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rlwe {

// ===================================================================

class SerializedNttPolynomial final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:rlwe.SerializedNttPolynomial) */ {
 public:
  inline SerializedNttPolynomial() : SerializedNttPolynomial(nullptr) {}
  ~SerializedNttPolynomial() override;
  explicit PROTOBUF_CONSTEXPR SerializedNttPolynomial(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedNttPolynomial(const SerializedNttPolynomial& from);
  SerializedNttPolynomial(SerializedNttPolynomial&& from) noexcept
    : SerializedNttPolynomial() {
    *this = ::std::move(from);
  }

  inline SerializedNttPolynomial& operator=(const SerializedNttPolynomial& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedNttPolynomial& operator=(SerializedNttPolynomial&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerializedNttPolynomial& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedNttPolynomial* internal_default_instance() {
    return reinterpret_cast<const SerializedNttPolynomial*>(
               &_SerializedNttPolynomial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SerializedNttPolynomial& a, SerializedNttPolynomial& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedNttPolynomial* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedNttPolynomial* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedNttPolynomial* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedNttPolynomial>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerializedNttPolynomial& from);
  void MergeFrom(const SerializedNttPolynomial& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedNttPolynomial* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rlwe.SerializedNttPolynomial";
  }
  protected:
  explicit SerializedNttPolynomial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoeffsFieldNumber = 1,
    kNumCoeffsFieldNumber = 2,
  };
  // optional bytes coeffs = 1;
  bool has_coeffs() const;
  private:
  bool _internal_has_coeffs() const;
  public:
  void clear_coeffs();
  const std::string& coeffs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coeffs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coeffs();
  PROTOBUF_NODISCARD std::string* release_coeffs();
  void set_allocated_coeffs(std::string* coeffs);
  private:
  const std::string& _internal_coeffs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coeffs(const std::string& value);
  std::string* _internal_mutable_coeffs();
  public:

  // optional int32 num_coeffs = 2;
  bool has_num_coeffs() const;
  private:
  bool _internal_has_num_coeffs() const;
  public:
  void clear_num_coeffs();
  int32_t num_coeffs() const;
  void set_num_coeffs(int32_t value);
  private:
  int32_t _internal_num_coeffs() const;
  void _internal_set_num_coeffs(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rlwe.SerializedNttPolynomial)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coeffs_;
    int32_t num_coeffs_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SerializedSymmetricRlweCiphertext final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:rlwe.SerializedSymmetricRlweCiphertext) */ {
 public:
  inline SerializedSymmetricRlweCiphertext() : SerializedSymmetricRlweCiphertext(nullptr) {}
  ~SerializedSymmetricRlweCiphertext() override;
  explicit PROTOBUF_CONSTEXPR SerializedSymmetricRlweCiphertext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedSymmetricRlweCiphertext(const SerializedSymmetricRlweCiphertext& from);
  SerializedSymmetricRlweCiphertext(SerializedSymmetricRlweCiphertext&& from) noexcept
    : SerializedSymmetricRlweCiphertext() {
    *this = ::std::move(from);
  }

  inline SerializedSymmetricRlweCiphertext& operator=(const SerializedSymmetricRlweCiphertext& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedSymmetricRlweCiphertext& operator=(SerializedSymmetricRlweCiphertext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerializedSymmetricRlweCiphertext& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedSymmetricRlweCiphertext* internal_default_instance() {
    return reinterpret_cast<const SerializedSymmetricRlweCiphertext*>(
               &_SerializedSymmetricRlweCiphertext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SerializedSymmetricRlweCiphertext& a, SerializedSymmetricRlweCiphertext& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedSymmetricRlweCiphertext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedSymmetricRlweCiphertext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedSymmetricRlweCiphertext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedSymmetricRlweCiphertext>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerializedSymmetricRlweCiphertext& from);
  void MergeFrom(const SerializedSymmetricRlweCiphertext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedSymmetricRlweCiphertext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rlwe.SerializedSymmetricRlweCiphertext";
  }
  protected:
  explicit SerializedSymmetricRlweCiphertext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
    kErrorFieldNumber = 3,
    kPowerOfSFieldNumber = 2,
  };
  // repeated .rlwe.SerializedNttPolynomial c = 1;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  ::rlwe::SerializedNttPolynomial* mutable_c(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >*
      mutable_c();
  private:
  const ::rlwe::SerializedNttPolynomial& _internal_c(int index) const;
  ::rlwe::SerializedNttPolynomial* _internal_add_c();
  public:
  const ::rlwe::SerializedNttPolynomial& c(int index) const;
  ::rlwe::SerializedNttPolynomial* add_c();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >&
      c() const;

  // optional double error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  double error() const;
  void set_error(double value);
  private:
  double _internal_error() const;
  void _internal_set_error(double value);
  public:

  // optional int32 power_of_s = 2;
  bool has_power_of_s() const;
  private:
  bool _internal_has_power_of_s() const;
  public:
  void clear_power_of_s();
  int32_t power_of_s() const;
  void set_power_of_s(int32_t value);
  private:
  int32_t _internal_power_of_s() const;
  void _internal_set_power_of_s(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rlwe.SerializedSymmetricRlweCiphertext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial > c_;
    double error_;
    int32_t power_of_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SerializedRelinearizationKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:rlwe.SerializedRelinearizationKey) */ {
 public:
  inline SerializedRelinearizationKey() : SerializedRelinearizationKey(nullptr) {}
  ~SerializedRelinearizationKey() override;
  explicit PROTOBUF_CONSTEXPR SerializedRelinearizationKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedRelinearizationKey(const SerializedRelinearizationKey& from);
  SerializedRelinearizationKey(SerializedRelinearizationKey&& from) noexcept
    : SerializedRelinearizationKey() {
    *this = ::std::move(from);
  }

  inline SerializedRelinearizationKey& operator=(const SerializedRelinearizationKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedRelinearizationKey& operator=(SerializedRelinearizationKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerializedRelinearizationKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedRelinearizationKey* internal_default_instance() {
    return reinterpret_cast<const SerializedRelinearizationKey*>(
               &_SerializedRelinearizationKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SerializedRelinearizationKey& a, SerializedRelinearizationKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedRelinearizationKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedRelinearizationKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedRelinearizationKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedRelinearizationKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerializedRelinearizationKey& from);
  void MergeFrom(const SerializedRelinearizationKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedRelinearizationKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rlwe.SerializedRelinearizationKey";
  }
  protected:
  explicit SerializedRelinearizationKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 1,
    kPrngSeedFieldNumber = 4,
    kLogDecompositionModulusFieldNumber = 2,
    kNumPartsFieldNumber = 3,
    kPowerOfSFieldNumber = 5,
  };
  // repeated .rlwe.SerializedNttPolynomial c = 1;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  ::rlwe::SerializedNttPolynomial* mutable_c(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >*
      mutable_c();
  private:
  const ::rlwe::SerializedNttPolynomial& _internal_c(int index) const;
  ::rlwe::SerializedNttPolynomial* _internal_add_c();
  public:
  const ::rlwe::SerializedNttPolynomial& c(int index) const;
  ::rlwe::SerializedNttPolynomial* add_c();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >&
      c() const;

  // optional bytes prng_seed = 4;
  bool has_prng_seed() const;
  private:
  bool _internal_has_prng_seed() const;
  public:
  void clear_prng_seed();
  const std::string& prng_seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prng_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prng_seed();
  PROTOBUF_NODISCARD std::string* release_prng_seed();
  void set_allocated_prng_seed(std::string* prng_seed);
  private:
  const std::string& _internal_prng_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prng_seed(const std::string& value);
  std::string* _internal_mutable_prng_seed();
  public:

  // optional int32 log_decomposition_modulus = 2;
  bool has_log_decomposition_modulus() const;
  private:
  bool _internal_has_log_decomposition_modulus() const;
  public:
  void clear_log_decomposition_modulus();
  int32_t log_decomposition_modulus() const;
  void set_log_decomposition_modulus(int32_t value);
  private:
  int32_t _internal_log_decomposition_modulus() const;
  void _internal_set_log_decomposition_modulus(int32_t value);
  public:

  // optional int32 num_parts = 3;
  bool has_num_parts() const;
  private:
  bool _internal_has_num_parts() const;
  public:
  void clear_num_parts();
  int32_t num_parts() const;
  void set_num_parts(int32_t value);
  private:
  int32_t _internal_num_parts() const;
  void _internal_set_num_parts(int32_t value);
  public:

  // optional int32 power_of_s = 5;
  bool has_power_of_s() const;
  private:
  bool _internal_has_power_of_s() const;
  public:
  void clear_power_of_s();
  int32_t power_of_s() const;
  void set_power_of_s(int32_t value);
  private:
  int32_t _internal_power_of_s() const;
  void _internal_set_power_of_s(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rlwe.SerializedRelinearizationKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial > c_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prng_seed_;
    int32_t log_decomposition_modulus_;
    int32_t num_parts_;
    int32_t power_of_s_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2eproto;
};
// -------------------------------------------------------------------

class SerializedGaloisKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:rlwe.SerializedGaloisKey) */ {
 public:
  inline SerializedGaloisKey() : SerializedGaloisKey(nullptr) {}
  ~SerializedGaloisKey() override;
  explicit PROTOBUF_CONSTEXPR SerializedGaloisKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SerializedGaloisKey(const SerializedGaloisKey& from);
  SerializedGaloisKey(SerializedGaloisKey&& from) noexcept
    : SerializedGaloisKey() {
    *this = ::std::move(from);
  }

  inline SerializedGaloisKey& operator=(const SerializedGaloisKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SerializedGaloisKey& operator=(SerializedGaloisKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SerializedGaloisKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SerializedGaloisKey* internal_default_instance() {
    return reinterpret_cast<const SerializedGaloisKey*>(
               &_SerializedGaloisKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SerializedGaloisKey& a, SerializedGaloisKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SerializedGaloisKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SerializedGaloisKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SerializedGaloisKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SerializedGaloisKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SerializedGaloisKey& from);
  void MergeFrom(const SerializedGaloisKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SerializedGaloisKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rlwe.SerializedGaloisKey";
  }
  protected:
  explicit SerializedGaloisKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // optional .rlwe.SerializedRelinearizationKey key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::rlwe::SerializedRelinearizationKey& key() const;
  PROTOBUF_NODISCARD ::rlwe::SerializedRelinearizationKey* release_key();
  ::rlwe::SerializedRelinearizationKey* mutable_key();
  void set_allocated_key(::rlwe::SerializedRelinearizationKey* key);
  private:
  const ::rlwe::SerializedRelinearizationKey& _internal_key() const;
  ::rlwe::SerializedRelinearizationKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::rlwe::SerializedRelinearizationKey* key);
  ::rlwe::SerializedRelinearizationKey* unsafe_arena_release_key();

  // @@protoc_insertion_point(class_scope:rlwe.SerializedGaloisKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::rlwe::SerializedRelinearizationKey* key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_serialization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SerializedNttPolynomial

// optional bytes coeffs = 1;
inline bool SerializedNttPolynomial::_internal_has_coeffs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedNttPolynomial::has_coeffs() const {
  return _internal_has_coeffs();
}
inline void SerializedNttPolynomial::clear_coeffs() {
  _impl_.coeffs_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedNttPolynomial::coeffs() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedNttPolynomial.coeffs)
  return _internal_coeffs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializedNttPolynomial::set_coeffs(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.coeffs_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rlwe.SerializedNttPolynomial.coeffs)
}
inline std::string* SerializedNttPolynomial::mutable_coeffs() {
  std::string* _s = _internal_mutable_coeffs();
  // @@protoc_insertion_point(field_mutable:rlwe.SerializedNttPolynomial.coeffs)
  return _s;
}
inline const std::string& SerializedNttPolynomial::_internal_coeffs() const {
  return _impl_.coeffs_.Get();
}
inline void SerializedNttPolynomial::_internal_set_coeffs(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.coeffs_.Set(value, GetArenaForAllocation());
}
inline std::string* SerializedNttPolynomial::_internal_mutable_coeffs() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.coeffs_.Mutable(GetArenaForAllocation());
}
inline std::string* SerializedNttPolynomial::release_coeffs() {
  // @@protoc_insertion_point(field_release:rlwe.SerializedNttPolynomial.coeffs)
  if (!_internal_has_coeffs()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.coeffs_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coeffs_.IsDefault()) {
    _impl_.coeffs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SerializedNttPolynomial::set_allocated_coeffs(std::string* coeffs) {
  if (coeffs != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.coeffs_.SetAllocated(coeffs, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.coeffs_.IsDefault()) {
    _impl_.coeffs_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rlwe.SerializedNttPolynomial.coeffs)
}

// optional int32 num_coeffs = 2;
inline bool SerializedNttPolynomial::_internal_has_num_coeffs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedNttPolynomial::has_num_coeffs() const {
  return _internal_has_num_coeffs();
}
inline void SerializedNttPolynomial::clear_num_coeffs() {
  _impl_.num_coeffs_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SerializedNttPolynomial::_internal_num_coeffs() const {
  return _impl_.num_coeffs_;
}
inline int32_t SerializedNttPolynomial::num_coeffs() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedNttPolynomial.num_coeffs)
  return _internal_num_coeffs();
}
inline void SerializedNttPolynomial::_internal_set_num_coeffs(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_coeffs_ = value;
}
inline void SerializedNttPolynomial::set_num_coeffs(int32_t value) {
  _internal_set_num_coeffs(value);
  // @@protoc_insertion_point(field_set:rlwe.SerializedNttPolynomial.num_coeffs)
}

// -------------------------------------------------------------------

// SerializedSymmetricRlweCiphertext

// repeated .rlwe.SerializedNttPolynomial c = 1;
inline int SerializedSymmetricRlweCiphertext::_internal_c_size() const {
  return _impl_.c_.size();
}
inline int SerializedSymmetricRlweCiphertext::c_size() const {
  return _internal_c_size();
}
inline void SerializedSymmetricRlweCiphertext::clear_c() {
  _impl_.c_.Clear();
}
inline ::rlwe::SerializedNttPolynomial* SerializedSymmetricRlweCiphertext::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:rlwe.SerializedSymmetricRlweCiphertext.c)
  return _impl_.c_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >*
SerializedSymmetricRlweCiphertext::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:rlwe.SerializedSymmetricRlweCiphertext.c)
  return &_impl_.c_;
}
inline const ::rlwe::SerializedNttPolynomial& SerializedSymmetricRlweCiphertext::_internal_c(int index) const {
  return _impl_.c_.Get(index);
}
inline const ::rlwe::SerializedNttPolynomial& SerializedSymmetricRlweCiphertext::c(int index) const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedSymmetricRlweCiphertext.c)
  return _internal_c(index);
}
inline ::rlwe::SerializedNttPolynomial* SerializedSymmetricRlweCiphertext::_internal_add_c() {
  return _impl_.c_.Add();
}
inline ::rlwe::SerializedNttPolynomial* SerializedSymmetricRlweCiphertext::add_c() {
  ::rlwe::SerializedNttPolynomial* _add = _internal_add_c();
  // @@protoc_insertion_point(field_add:rlwe.SerializedSymmetricRlweCiphertext.c)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >&
SerializedSymmetricRlweCiphertext::c() const {
  // @@protoc_insertion_point(field_list:rlwe.SerializedSymmetricRlweCiphertext.c)
  return _impl_.c_;
}

// optional int32 power_of_s = 2;
inline bool SerializedSymmetricRlweCiphertext::_internal_has_power_of_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedSymmetricRlweCiphertext::has_power_of_s() const {
  return _internal_has_power_of_s();
}
inline void SerializedSymmetricRlweCiphertext::clear_power_of_s() {
  _impl_.power_of_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SerializedSymmetricRlweCiphertext::_internal_power_of_s() const {
  return _impl_.power_of_s_;
}
inline int32_t SerializedSymmetricRlweCiphertext::power_of_s() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedSymmetricRlweCiphertext.power_of_s)
  return _internal_power_of_s();
}
inline void SerializedSymmetricRlweCiphertext::_internal_set_power_of_s(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.power_of_s_ = value;
}
inline void SerializedSymmetricRlweCiphertext::set_power_of_s(int32_t value) {
  _internal_set_power_of_s(value);
  // @@protoc_insertion_point(field_set:rlwe.SerializedSymmetricRlweCiphertext.power_of_s)
}

// optional double error = 3;
inline bool SerializedSymmetricRlweCiphertext::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedSymmetricRlweCiphertext::has_error() const {
  return _internal_has_error();
}
inline void SerializedSymmetricRlweCiphertext::clear_error() {
  _impl_.error_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SerializedSymmetricRlweCiphertext::_internal_error() const {
  return _impl_.error_;
}
inline double SerializedSymmetricRlweCiphertext::error() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedSymmetricRlweCiphertext.error)
  return _internal_error();
}
inline void SerializedSymmetricRlweCiphertext::_internal_set_error(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_ = value;
}
inline void SerializedSymmetricRlweCiphertext::set_error(double value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:rlwe.SerializedSymmetricRlweCiphertext.error)
}

// -------------------------------------------------------------------

// SerializedRelinearizationKey

// repeated .rlwe.SerializedNttPolynomial c = 1;
inline int SerializedRelinearizationKey::_internal_c_size() const {
  return _impl_.c_.size();
}
inline int SerializedRelinearizationKey::c_size() const {
  return _internal_c_size();
}
inline void SerializedRelinearizationKey::clear_c() {
  _impl_.c_.Clear();
}
inline ::rlwe::SerializedNttPolynomial* SerializedRelinearizationKey::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:rlwe.SerializedRelinearizationKey.c)
  return _impl_.c_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >*
SerializedRelinearizationKey::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:rlwe.SerializedRelinearizationKey.c)
  return &_impl_.c_;
}
inline const ::rlwe::SerializedNttPolynomial& SerializedRelinearizationKey::_internal_c(int index) const {
  return _impl_.c_.Get(index);
}
inline const ::rlwe::SerializedNttPolynomial& SerializedRelinearizationKey::c(int index) const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedRelinearizationKey.c)
  return _internal_c(index);
}
inline ::rlwe::SerializedNttPolynomial* SerializedRelinearizationKey::_internal_add_c() {
  return _impl_.c_.Add();
}
inline ::rlwe::SerializedNttPolynomial* SerializedRelinearizationKey::add_c() {
  ::rlwe::SerializedNttPolynomial* _add = _internal_add_c();
  // @@protoc_insertion_point(field_add:rlwe.SerializedRelinearizationKey.c)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >&
SerializedRelinearizationKey::c() const {
  // @@protoc_insertion_point(field_list:rlwe.SerializedRelinearizationKey.c)
  return _impl_.c_;
}

// optional int32 log_decomposition_modulus = 2;
inline bool SerializedRelinearizationKey::_internal_has_log_decomposition_modulus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SerializedRelinearizationKey::has_log_decomposition_modulus() const {
  return _internal_has_log_decomposition_modulus();
}
inline void SerializedRelinearizationKey::clear_log_decomposition_modulus() {
  _impl_.log_decomposition_modulus_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SerializedRelinearizationKey::_internal_log_decomposition_modulus() const {
  return _impl_.log_decomposition_modulus_;
}
inline int32_t SerializedRelinearizationKey::log_decomposition_modulus() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedRelinearizationKey.log_decomposition_modulus)
  return _internal_log_decomposition_modulus();
}
inline void SerializedRelinearizationKey::_internal_set_log_decomposition_modulus(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.log_decomposition_modulus_ = value;
}
inline void SerializedRelinearizationKey::set_log_decomposition_modulus(int32_t value) {
  _internal_set_log_decomposition_modulus(value);
  // @@protoc_insertion_point(field_set:rlwe.SerializedRelinearizationKey.log_decomposition_modulus)
}

// optional int32 num_parts = 3;
inline bool SerializedRelinearizationKey::_internal_has_num_parts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SerializedRelinearizationKey::has_num_parts() const {
  return _internal_has_num_parts();
}
inline void SerializedRelinearizationKey::clear_num_parts() {
  _impl_.num_parts_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SerializedRelinearizationKey::_internal_num_parts() const {
  return _impl_.num_parts_;
}
inline int32_t SerializedRelinearizationKey::num_parts() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedRelinearizationKey.num_parts)
  return _internal_num_parts();
}
inline void SerializedRelinearizationKey::_internal_set_num_parts(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_parts_ = value;
}
inline void SerializedRelinearizationKey::set_num_parts(int32_t value) {
  _internal_set_num_parts(value);
  // @@protoc_insertion_point(field_set:rlwe.SerializedRelinearizationKey.num_parts)
}

// optional bytes prng_seed = 4;
inline bool SerializedRelinearizationKey::_internal_has_prng_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SerializedRelinearizationKey::has_prng_seed() const {
  return _internal_has_prng_seed();
}
inline void SerializedRelinearizationKey::clear_prng_seed() {
  _impl_.prng_seed_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SerializedRelinearizationKey::prng_seed() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedRelinearizationKey.prng_seed)
  return _internal_prng_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SerializedRelinearizationKey::set_prng_seed(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.prng_seed_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rlwe.SerializedRelinearizationKey.prng_seed)
}
inline std::string* SerializedRelinearizationKey::mutable_prng_seed() {
  std::string* _s = _internal_mutable_prng_seed();
  // @@protoc_insertion_point(field_mutable:rlwe.SerializedRelinearizationKey.prng_seed)
  return _s;
}
inline const std::string& SerializedRelinearizationKey::_internal_prng_seed() const {
  return _impl_.prng_seed_.Get();
}
inline void SerializedRelinearizationKey::_internal_set_prng_seed(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prng_seed_.Set(value, GetArenaForAllocation());
}
inline std::string* SerializedRelinearizationKey::_internal_mutable_prng_seed() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.prng_seed_.Mutable(GetArenaForAllocation());
}
inline std::string* SerializedRelinearizationKey::release_prng_seed() {
  // @@protoc_insertion_point(field_release:rlwe.SerializedRelinearizationKey.prng_seed)
  if (!_internal_has_prng_seed()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.prng_seed_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prng_seed_.IsDefault()) {
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SerializedRelinearizationKey::set_allocated_prng_seed(std::string* prng_seed) {
  if (prng_seed != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prng_seed_.SetAllocated(prng_seed, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prng_seed_.IsDefault()) {
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rlwe.SerializedRelinearizationKey.prng_seed)
}

// optional int32 power_of_s = 5;
inline bool SerializedRelinearizationKey::_internal_has_power_of_s() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SerializedRelinearizationKey::has_power_of_s() const {
  return _internal_has_power_of_s();
}
inline void SerializedRelinearizationKey::clear_power_of_s() {
  _impl_.power_of_s_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t SerializedRelinearizationKey::_internal_power_of_s() const {
  return _impl_.power_of_s_;
}
inline int32_t SerializedRelinearizationKey::power_of_s() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedRelinearizationKey.power_of_s)
  return _internal_power_of_s();
}
inline void SerializedRelinearizationKey::_internal_set_power_of_s(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.power_of_s_ = value;
}
inline void SerializedRelinearizationKey::set_power_of_s(int32_t value) {
  _internal_set_power_of_s(value);
  // @@protoc_insertion_point(field_set:rlwe.SerializedRelinearizationKey.power_of_s)
}

// -------------------------------------------------------------------

// SerializedGaloisKey

// optional .rlwe.SerializedRelinearizationKey key = 1;
inline bool SerializedGaloisKey::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool SerializedGaloisKey::has_key() const {
  return _internal_has_key();
}
inline void SerializedGaloisKey::clear_key() {
  if (_impl_.key_ != nullptr) _impl_.key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::rlwe::SerializedRelinearizationKey& SerializedGaloisKey::_internal_key() const {
  const ::rlwe::SerializedRelinearizationKey* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::rlwe::SerializedRelinearizationKey&>(
      ::rlwe::_SerializedRelinearizationKey_default_instance_);
}
inline const ::rlwe::SerializedRelinearizationKey& SerializedGaloisKey::key() const {
  // @@protoc_insertion_point(field_get:rlwe.SerializedGaloisKey.key)
  return _internal_key();
}
inline void SerializedGaloisKey::unsafe_arena_set_allocated_key(
    ::rlwe::SerializedRelinearizationKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rlwe.SerializedGaloisKey.key)
}
inline ::rlwe::SerializedRelinearizationKey* SerializedGaloisKey::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rlwe::SerializedRelinearizationKey* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rlwe::SerializedRelinearizationKey* SerializedGaloisKey::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:rlwe.SerializedGaloisKey.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::rlwe::SerializedRelinearizationKey* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::rlwe::SerializedRelinearizationKey* SerializedGaloisKey::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::rlwe::SerializedRelinearizationKey>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::rlwe::SerializedRelinearizationKey* SerializedGaloisKey::mutable_key() {
  ::rlwe::SerializedRelinearizationKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:rlwe.SerializedGaloisKey.key)
  return _msg;
}
inline void SerializedGaloisKey::set_allocated_key(::rlwe::SerializedRelinearizationKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:rlwe.SerializedGaloisKey.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rlwe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_serialization_2eproto
