// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: private_membership_rlwe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_private_5fmembership_5frlwe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_private_5fmembership_5frlwe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "private_membership.pb.h"
#include "serialization.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_private_5fmembership_5frlwe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_private_5fmembership_5frlwe_2eproto {
  static const uint32_t offsets[];
};
namespace private_membership {
namespace rlwe {
class EncryptedBucket;
struct EncryptedBucketDefaultTypeInternal;
extern EncryptedBucketDefaultTypeInternal _EncryptedBucket_default_instance_;
class EncryptedBucket_EncryptedIdValuePair;
struct EncryptedBucket_EncryptedIdValuePairDefaultTypeInternal;
extern EncryptedBucket_EncryptedIdValuePairDefaultTypeInternal _EncryptedBucket_EncryptedIdValuePair_default_instance_;
class EncryptedBucketsParameters;
struct EncryptedBucketsParametersDefaultTypeInternal;
extern EncryptedBucketsParametersDefaultTypeInternal _EncryptedBucketsParameters_default_instance_;
class HashedBucketsParameters;
struct HashedBucketsParametersDefaultTypeInternal;
extern HashedBucketsParametersDefaultTypeInternal _HashedBucketsParameters_default_instance_;
class PirRequest;
struct PirRequestDefaultTypeInternal;
extern PirRequestDefaultTypeInternal _PirRequest_default_instance_;
class PirResponse;
struct PirResponseDefaultTypeInternal;
extern PirResponseDefaultTypeInternal _PirResponse_default_instance_;
class PrivateMembershipRlweOprfRequest;
struct PrivateMembershipRlweOprfRequestDefaultTypeInternal;
extern PrivateMembershipRlweOprfRequestDefaultTypeInternal _PrivateMembershipRlweOprfRequest_default_instance_;
class PrivateMembershipRlweOprfResponse;
struct PrivateMembershipRlweOprfResponseDefaultTypeInternal;
extern PrivateMembershipRlweOprfResponseDefaultTypeInternal _PrivateMembershipRlweOprfResponse_default_instance_;
class PrivateMembershipRlwePirResponse;
struct PrivateMembershipRlwePirResponseDefaultTypeInternal;
extern PrivateMembershipRlwePirResponseDefaultTypeInternal _PrivateMembershipRlwePirResponse_default_instance_;
class PrivateMembershipRlweQuery;
struct PrivateMembershipRlweQueryDefaultTypeInternal;
extern PrivateMembershipRlweQueryDefaultTypeInternal _PrivateMembershipRlweQuery_default_instance_;
class PrivateMembershipRlweQueryRequest;
struct PrivateMembershipRlweQueryRequestDefaultTypeInternal;
extern PrivateMembershipRlweQueryRequestDefaultTypeInternal _PrivateMembershipRlweQueryRequest_default_instance_;
class PrivateMembershipRlweQueryResponse;
struct PrivateMembershipRlweQueryResponseDefaultTypeInternal;
extern PrivateMembershipRlweQueryResponseDefaultTypeInternal _PrivateMembershipRlweQueryResponse_default_instance_;
class PrivateMembershipRlweQuery_HashedBucketId;
struct PrivateMembershipRlweQuery_HashedBucketIdDefaultTypeInternal;
extern PrivateMembershipRlweQuery_HashedBucketIdDefaultTypeInternal _PrivateMembershipRlweQuery_HashedBucketId_default_instance_;
class RlweMembershipResponses;
struct RlweMembershipResponsesDefaultTypeInternal;
extern RlweMembershipResponsesDefaultTypeInternal _RlweMembershipResponses_default_instance_;
class RlweMembershipResponses_MembershipResponseEntry;
struct RlweMembershipResponses_MembershipResponseEntryDefaultTypeInternal;
extern RlweMembershipResponses_MembershipResponseEntryDefaultTypeInternal _RlweMembershipResponses_MembershipResponseEntry_default_instance_;
class RlweParameters;
struct RlweParametersDefaultTypeInternal;
extern RlweParametersDefaultTypeInternal _RlweParameters_default_instance_;
class RlwePlaintextId;
struct RlwePlaintextIdDefaultTypeInternal;
extern RlwePlaintextIdDefaultTypeInternal _RlwePlaintextId_default_instance_;
class Uint128;
struct Uint128DefaultTypeInternal;
extern Uint128DefaultTypeInternal _Uint128_default_instance_;
}  // namespace rlwe
}  // namespace private_membership
PROTOBUF_NAMESPACE_OPEN
template<> ::private_membership::rlwe::EncryptedBucket* Arena::CreateMaybeMessage<::private_membership::rlwe::EncryptedBucket>(Arena*);
template<> ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* Arena::CreateMaybeMessage<::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair>(Arena*);
template<> ::private_membership::rlwe::EncryptedBucketsParameters* Arena::CreateMaybeMessage<::private_membership::rlwe::EncryptedBucketsParameters>(Arena*);
template<> ::private_membership::rlwe::HashedBucketsParameters* Arena::CreateMaybeMessage<::private_membership::rlwe::HashedBucketsParameters>(Arena*);
template<> ::private_membership::rlwe::PirRequest* Arena::CreateMaybeMessage<::private_membership::rlwe::PirRequest>(Arena*);
template<> ::private_membership::rlwe::PirResponse* Arena::CreateMaybeMessage<::private_membership::rlwe::PirResponse>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweOprfRequest>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweOprfResponse>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlwePirResponse* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlwePirResponse>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlweQuery* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQuery>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQueryRequest>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQueryResponse>(Arena*);
template<> ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId>(Arena*);
template<> ::private_membership::rlwe::RlweMembershipResponses* Arena::CreateMaybeMessage<::private_membership::rlwe::RlweMembershipResponses>(Arena*);
template<> ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* Arena::CreateMaybeMessage<::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry>(Arena*);
template<> ::private_membership::rlwe::RlweParameters* Arena::CreateMaybeMessage<::private_membership::rlwe::RlweParameters>(Arena*);
template<> ::private_membership::rlwe::RlwePlaintextId* Arena::CreateMaybeMessage<::private_membership::rlwe::RlwePlaintextId>(Arena*);
template<> ::private_membership::rlwe::Uint128* Arena::CreateMaybeMessage<::private_membership::rlwe::Uint128>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace private_membership {
namespace rlwe {

enum RlweUseCase : int {
  RLWE_USE_CASE_UNDEFINED = 0,
  TEST_USE_CASE = 1,
  TEST_USE_CASE2 = 2,
  TEST_USE_CASE3 = 3,
  CROS_DEVICE_STATE = 5,
  CROS_DEVICE_SECONDARY_STATE = 12,
  CROS_FRESNEL_DAILY = 13,
  CROS_FRESNEL_MONTHLY = 14,
  CROS_FRESNEL_FIRST_ACTIVE = 15,
  CROS_FRESNEL_7DAY_ACTIVE = 16,
  CROS_FRESNEL_28DAY_ACTIVE = 17,
  CROS_FRESNEL_CHURN_MONTHLY_COHORT = 19,
  CROS_FRESNEL_CHURN_MONTHLY_OBSERVATION = 20,
  RlweUseCase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RlweUseCase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RlweUseCase_IsValid(int value);
constexpr RlweUseCase RlweUseCase_MIN = RLWE_USE_CASE_UNDEFINED;
constexpr RlweUseCase RlweUseCase_MAX = CROS_FRESNEL_CHURN_MONTHLY_OBSERVATION;
constexpr int RlweUseCase_ARRAYSIZE = RlweUseCase_MAX + 1;

const std::string& RlweUseCase_Name(RlweUseCase value);
template<typename T>
inline const std::string& RlweUseCase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RlweUseCase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RlweUseCase_Name.");
  return RlweUseCase_Name(static_cast<RlweUseCase>(enum_t_value));
}
bool RlweUseCase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RlweUseCase* value);
// ===================================================================

class PrivateMembershipRlweOprfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweOprfRequest) */ {
 public:
  inline PrivateMembershipRlweOprfRequest() : PrivateMembershipRlweOprfRequest(nullptr) {}
  ~PrivateMembershipRlweOprfRequest() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweOprfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlweOprfRequest(const PrivateMembershipRlweOprfRequest& from);
  PrivateMembershipRlweOprfRequest(PrivateMembershipRlweOprfRequest&& from) noexcept
    : PrivateMembershipRlweOprfRequest() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlweOprfRequest& operator=(const PrivateMembershipRlweOprfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlweOprfRequest& operator=(PrivateMembershipRlweOprfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlweOprfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlweOprfRequest* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlweOprfRequest*>(
               &_PrivateMembershipRlweOprfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PrivateMembershipRlweOprfRequest& a, PrivateMembershipRlweOprfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlweOprfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlweOprfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlweOprfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlweOprfRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlweOprfRequest& from);
  void MergeFrom(const PrivateMembershipRlweOprfRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlweOprfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlweOprfRequest";
  }
  protected:
  explicit PrivateMembershipRlweOprfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedIdsFieldNumber = 1,
    kUseCaseFieldNumber = 2,
  };
  // repeated bytes encrypted_ids = 1;
  int encrypted_ids_size() const;
  private:
  int _internal_encrypted_ids_size() const;
  public:
  void clear_encrypted_ids();
  const std::string& encrypted_ids(int index) const;
  std::string* mutable_encrypted_ids(int index);
  void set_encrypted_ids(int index, const std::string& value);
  void set_encrypted_ids(int index, std::string&& value);
  void set_encrypted_ids(int index, const char* value);
  void set_encrypted_ids(int index, const void* value, size_t size);
  std::string* add_encrypted_ids();
  void add_encrypted_ids(const std::string& value);
  void add_encrypted_ids(std::string&& value);
  void add_encrypted_ids(const char* value);
  void add_encrypted_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& encrypted_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_encrypted_ids();
  private:
  const std::string& _internal_encrypted_ids(int index) const;
  std::string* _internal_add_encrypted_ids();
  public:

  // .private_membership.rlwe.RlweUseCase use_case = 2;
  void clear_use_case();
  ::private_membership::rlwe::RlweUseCase use_case() const;
  void set_use_case(::private_membership::rlwe::RlweUseCase value);
  private:
  ::private_membership::rlwe::RlweUseCase _internal_use_case() const;
  void _internal_set_use_case(::private_membership::rlwe::RlweUseCase value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweOprfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> encrypted_ids_;
    int use_case_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PrivateMembershipRlweOprfResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweOprfResponse) */ {
 public:
  inline PrivateMembershipRlweOprfResponse() : PrivateMembershipRlweOprfResponse(nullptr) {}
  ~PrivateMembershipRlweOprfResponse() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweOprfResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlweOprfResponse(const PrivateMembershipRlweOprfResponse& from);
  PrivateMembershipRlweOprfResponse(PrivateMembershipRlweOprfResponse&& from) noexcept
    : PrivateMembershipRlweOprfResponse() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlweOprfResponse& operator=(const PrivateMembershipRlweOprfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlweOprfResponse& operator=(PrivateMembershipRlweOprfResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlweOprfResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlweOprfResponse* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlweOprfResponse*>(
               &_PrivateMembershipRlweOprfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PrivateMembershipRlweOprfResponse& a, PrivateMembershipRlweOprfResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlweOprfResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlweOprfResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlweOprfResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlweOprfResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlweOprfResponse& from);
  void MergeFrom(const PrivateMembershipRlweOprfResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlweOprfResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlweOprfResponse";
  }
  protected:
  explicit PrivateMembershipRlweOprfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoublyEncryptedIdsFieldNumber = 1,
    kHashedBucketsParametersFieldNumber = 2,
    kEncryptedBucketsParametersFieldNumber = 3,
    kRlweParametersFieldNumber = 4,
    kKeyVersionFieldNumber = 5,
  };
  // repeated .private_membership.DoublyEncryptedId doubly_encrypted_ids = 1;
  int doubly_encrypted_ids_size() const;
  private:
  int _internal_doubly_encrypted_ids_size() const;
  public:
  void clear_doubly_encrypted_ids();
  ::private_membership::DoublyEncryptedId* mutable_doubly_encrypted_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::DoublyEncryptedId >*
      mutable_doubly_encrypted_ids();
  private:
  const ::private_membership::DoublyEncryptedId& _internal_doubly_encrypted_ids(int index) const;
  ::private_membership::DoublyEncryptedId* _internal_add_doubly_encrypted_ids();
  public:
  const ::private_membership::DoublyEncryptedId& doubly_encrypted_ids(int index) const;
  ::private_membership::DoublyEncryptedId* add_doubly_encrypted_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::DoublyEncryptedId >&
      doubly_encrypted_ids() const;

  // .private_membership.rlwe.HashedBucketsParameters hashed_buckets_parameters = 2;
  bool has_hashed_buckets_parameters() const;
  private:
  bool _internal_has_hashed_buckets_parameters() const;
  public:
  void clear_hashed_buckets_parameters();
  const ::private_membership::rlwe::HashedBucketsParameters& hashed_buckets_parameters() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::HashedBucketsParameters* release_hashed_buckets_parameters();
  ::private_membership::rlwe::HashedBucketsParameters* mutable_hashed_buckets_parameters();
  void set_allocated_hashed_buckets_parameters(::private_membership::rlwe::HashedBucketsParameters* hashed_buckets_parameters);
  private:
  const ::private_membership::rlwe::HashedBucketsParameters& _internal_hashed_buckets_parameters() const;
  ::private_membership::rlwe::HashedBucketsParameters* _internal_mutable_hashed_buckets_parameters();
  public:
  void unsafe_arena_set_allocated_hashed_buckets_parameters(
      ::private_membership::rlwe::HashedBucketsParameters* hashed_buckets_parameters);
  ::private_membership::rlwe::HashedBucketsParameters* unsafe_arena_release_hashed_buckets_parameters();

  // .private_membership.rlwe.EncryptedBucketsParameters encrypted_buckets_parameters = 3;
  bool has_encrypted_buckets_parameters() const;
  private:
  bool _internal_has_encrypted_buckets_parameters() const;
  public:
  void clear_encrypted_buckets_parameters();
  const ::private_membership::rlwe::EncryptedBucketsParameters& encrypted_buckets_parameters() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::EncryptedBucketsParameters* release_encrypted_buckets_parameters();
  ::private_membership::rlwe::EncryptedBucketsParameters* mutable_encrypted_buckets_parameters();
  void set_allocated_encrypted_buckets_parameters(::private_membership::rlwe::EncryptedBucketsParameters* encrypted_buckets_parameters);
  private:
  const ::private_membership::rlwe::EncryptedBucketsParameters& _internal_encrypted_buckets_parameters() const;
  ::private_membership::rlwe::EncryptedBucketsParameters* _internal_mutable_encrypted_buckets_parameters();
  public:
  void unsafe_arena_set_allocated_encrypted_buckets_parameters(
      ::private_membership::rlwe::EncryptedBucketsParameters* encrypted_buckets_parameters);
  ::private_membership::rlwe::EncryptedBucketsParameters* unsafe_arena_release_encrypted_buckets_parameters();

  // .private_membership.rlwe.RlweParameters rlwe_parameters = 4;
  bool has_rlwe_parameters() const;
  private:
  bool _internal_has_rlwe_parameters() const;
  public:
  void clear_rlwe_parameters();
  const ::private_membership::rlwe::RlweParameters& rlwe_parameters() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::RlweParameters* release_rlwe_parameters();
  ::private_membership::rlwe::RlweParameters* mutable_rlwe_parameters();
  void set_allocated_rlwe_parameters(::private_membership::rlwe::RlweParameters* rlwe_parameters);
  private:
  const ::private_membership::rlwe::RlweParameters& _internal_rlwe_parameters() const;
  ::private_membership::rlwe::RlweParameters* _internal_mutable_rlwe_parameters();
  public:
  void unsafe_arena_set_allocated_rlwe_parameters(
      ::private_membership::rlwe::RlweParameters* rlwe_parameters);
  ::private_membership::rlwe::RlweParameters* unsafe_arena_release_rlwe_parameters();

  // int64 key_version = 5;
  void clear_key_version();
  int64_t key_version() const;
  void set_key_version(int64_t value);
  private:
  int64_t _internal_key_version() const;
  void _internal_set_key_version(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweOprfResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::DoublyEncryptedId > doubly_encrypted_ids_;
    ::private_membership::rlwe::HashedBucketsParameters* hashed_buckets_parameters_;
    ::private_membership::rlwe::EncryptedBucketsParameters* encrypted_buckets_parameters_;
    ::private_membership::rlwe::RlweParameters* rlwe_parameters_;
    int64_t key_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PrivateMembershipRlweQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweQueryRequest) */ {
 public:
  inline PrivateMembershipRlweQueryRequest() : PrivateMembershipRlweQueryRequest(nullptr) {}
  ~PrivateMembershipRlweQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlweQueryRequest(const PrivateMembershipRlweQueryRequest& from);
  PrivateMembershipRlweQueryRequest(PrivateMembershipRlweQueryRequest&& from) noexcept
    : PrivateMembershipRlweQueryRequest() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlweQueryRequest& operator=(const PrivateMembershipRlweQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlweQueryRequest& operator=(PrivateMembershipRlweQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlweQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlweQueryRequest* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlweQueryRequest*>(
               &_PrivateMembershipRlweQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PrivateMembershipRlweQueryRequest& a, PrivateMembershipRlweQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlweQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlweQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlweQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlweQueryRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlweQueryRequest& from);
  void MergeFrom(const PrivateMembershipRlweQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlweQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlweQueryRequest";
  }
  protected:
  explicit PrivateMembershipRlweQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 1,
    kKeyVersionFieldNumber = 3,
    kUseCaseFieldNumber = 2,
  };
  // repeated .private_membership.rlwe.PrivateMembershipRlweQuery queries = 1;
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  ::private_membership::rlwe::PrivateMembershipRlweQuery* mutable_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweQuery >*
      mutable_queries();
  private:
  const ::private_membership::rlwe::PrivateMembershipRlweQuery& _internal_queries(int index) const;
  ::private_membership::rlwe::PrivateMembershipRlweQuery* _internal_add_queries();
  public:
  const ::private_membership::rlwe::PrivateMembershipRlweQuery& queries(int index) const;
  ::private_membership::rlwe::PrivateMembershipRlweQuery* add_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweQuery >&
      queries() const;

  // int64 key_version = 3;
  void clear_key_version();
  int64_t key_version() const;
  void set_key_version(int64_t value);
  private:
  int64_t _internal_key_version() const;
  void _internal_set_key_version(int64_t value);
  public:

  // .private_membership.rlwe.RlweUseCase use_case = 2;
  void clear_use_case();
  ::private_membership::rlwe::RlweUseCase use_case() const;
  void set_use_case(::private_membership::rlwe::RlweUseCase value);
  private:
  ::private_membership::rlwe::RlweUseCase _internal_use_case() const;
  void _internal_set_use_case(::private_membership::rlwe::RlweUseCase value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweQuery > queries_;
    int64_t key_version_;
    int use_case_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PrivateMembershipRlweQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweQueryResponse) */ {
 public:
  inline PrivateMembershipRlweQueryResponse() : PrivateMembershipRlweQueryResponse(nullptr) {}
  ~PrivateMembershipRlweQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlweQueryResponse(const PrivateMembershipRlweQueryResponse& from);
  PrivateMembershipRlweQueryResponse(PrivateMembershipRlweQueryResponse&& from) noexcept
    : PrivateMembershipRlweQueryResponse() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlweQueryResponse& operator=(const PrivateMembershipRlweQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlweQueryResponse& operator=(PrivateMembershipRlweQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlweQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlweQueryResponse* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlweQueryResponse*>(
               &_PrivateMembershipRlweQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrivateMembershipRlweQueryResponse& a, PrivateMembershipRlweQueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlweQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlweQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlweQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlweQueryResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlweQueryResponse& from);
  void MergeFrom(const PrivateMembershipRlweQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlweQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlweQueryResponse";
  }
  protected:
  explicit PrivateMembershipRlweQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPirResponsesFieldNumber = 1,
  };
  // repeated .private_membership.rlwe.PrivateMembershipRlwePirResponse pir_responses = 1;
  int pir_responses_size() const;
  private:
  int _internal_pir_responses_size() const;
  public:
  void clear_pir_responses();
  ::private_membership::rlwe::PrivateMembershipRlwePirResponse* mutable_pir_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlwePirResponse >*
      mutable_pir_responses();
  private:
  const ::private_membership::rlwe::PrivateMembershipRlwePirResponse& _internal_pir_responses(int index) const;
  ::private_membership::rlwe::PrivateMembershipRlwePirResponse* _internal_add_pir_responses();
  public:
  const ::private_membership::rlwe::PrivateMembershipRlwePirResponse& pir_responses(int index) const;
  ::private_membership::rlwe::PrivateMembershipRlwePirResponse* add_pir_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlwePirResponse >&
      pir_responses() const;

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlwePirResponse > pir_responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class RlwePlaintextId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.RlwePlaintextId) */ {
 public:
  inline RlwePlaintextId() : RlwePlaintextId(nullptr) {}
  ~RlwePlaintextId() override;
  explicit PROTOBUF_CONSTEXPR RlwePlaintextId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RlwePlaintextId(const RlwePlaintextId& from);
  RlwePlaintextId(RlwePlaintextId&& from) noexcept
    : RlwePlaintextId() {
    *this = ::std::move(from);
  }

  inline RlwePlaintextId& operator=(const RlwePlaintextId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RlwePlaintextId& operator=(RlwePlaintextId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RlwePlaintextId& default_instance() {
    return *internal_default_instance();
  }
  static inline const RlwePlaintextId* internal_default_instance() {
    return reinterpret_cast<const RlwePlaintextId*>(
               &_RlwePlaintextId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RlwePlaintextId& a, RlwePlaintextId& b) {
    a.Swap(&b);
  }
  inline void Swap(RlwePlaintextId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RlwePlaintextId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RlwePlaintextId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RlwePlaintextId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RlwePlaintextId& from);
  void MergeFrom(const RlwePlaintextId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RlwePlaintextId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.RlwePlaintextId";
  }
  protected:
  explicit RlwePlaintextId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonSensitiveIdFieldNumber = 1,
    kSensitiveIdFieldNumber = 2,
  };
  // string non_sensitive_id = 1;
  void clear_non_sensitive_id();
  const std::string& non_sensitive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_non_sensitive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_non_sensitive_id();
  PROTOBUF_NODISCARD std::string* release_non_sensitive_id();
  void set_allocated_non_sensitive_id(std::string* non_sensitive_id);
  private:
  const std::string& _internal_non_sensitive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_non_sensitive_id(const std::string& value);
  std::string* _internal_mutable_non_sensitive_id();
  public:

  // string sensitive_id = 2;
  void clear_sensitive_id();
  const std::string& sensitive_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sensitive_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sensitive_id();
  PROTOBUF_NODISCARD std::string* release_sensitive_id();
  void set_allocated_sensitive_id(std::string* sensitive_id);
  private:
  const std::string& _internal_sensitive_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sensitive_id(const std::string& value);
  std::string* _internal_mutable_sensitive_id();
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.RlwePlaintextId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr non_sensitive_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensitive_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class HashedBucketsParameters final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.HashedBucketsParameters) */ {
 public:
  inline HashedBucketsParameters() : HashedBucketsParameters(nullptr) {}
  ~HashedBucketsParameters() override;
  explicit PROTOBUF_CONSTEXPR HashedBucketsParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashedBucketsParameters(const HashedBucketsParameters& from);
  HashedBucketsParameters(HashedBucketsParameters&& from) noexcept
    : HashedBucketsParameters() {
    *this = ::std::move(from);
  }

  inline HashedBucketsParameters& operator=(const HashedBucketsParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashedBucketsParameters& operator=(HashedBucketsParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const HashedBucketsParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashedBucketsParameters* internal_default_instance() {
    return reinterpret_cast<const HashedBucketsParameters*>(
               &_HashedBucketsParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HashedBucketsParameters& a, HashedBucketsParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(HashedBucketsParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashedBucketsParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashedBucketsParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashedBucketsParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HashedBucketsParameters& from);
  void MergeFrom(const HashedBucketsParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HashedBucketsParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.HashedBucketsParameters";
  }
  protected:
  explicit HashedBucketsParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashedBucketIdLengthFieldNumber = 1,
    kNonSensitiveIdHashTypeFieldNumber = 2,
  };
  // int32 hashed_bucket_id_length = 1;
  void clear_hashed_bucket_id_length();
  int32_t hashed_bucket_id_length() const;
  void set_hashed_bucket_id_length(int32_t value);
  private:
  int32_t _internal_hashed_bucket_id_length() const;
  void _internal_set_hashed_bucket_id_length(int32_t value);
  public:

  // .private_membership.HashType non_sensitive_id_hash_type = 2;
  void clear_non_sensitive_id_hash_type();
  ::private_membership::HashType non_sensitive_id_hash_type() const;
  void set_non_sensitive_id_hash_type(::private_membership::HashType value);
  private:
  ::private_membership::HashType _internal_non_sensitive_id_hash_type() const;
  void _internal_set_non_sensitive_id_hash_type(::private_membership::HashType value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.HashedBucketsParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t hashed_bucket_id_length_;
    int non_sensitive_id_hash_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class EncryptedBucketsParameters final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.EncryptedBucketsParameters) */ {
 public:
  inline EncryptedBucketsParameters() : EncryptedBucketsParameters(nullptr) {}
  ~EncryptedBucketsParameters() override;
  explicit PROTOBUF_CONSTEXPR EncryptedBucketsParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedBucketsParameters(const EncryptedBucketsParameters& from);
  EncryptedBucketsParameters(EncryptedBucketsParameters&& from) noexcept
    : EncryptedBucketsParameters() {
    *this = ::std::move(from);
  }

  inline EncryptedBucketsParameters& operator=(const EncryptedBucketsParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedBucketsParameters& operator=(EncryptedBucketsParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EncryptedBucketsParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedBucketsParameters* internal_default_instance() {
    return reinterpret_cast<const EncryptedBucketsParameters*>(
               &_EncryptedBucketsParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EncryptedBucketsParameters& a, EncryptedBucketsParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedBucketsParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedBucketsParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedBucketsParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedBucketsParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptedBucketsParameters& from);
  void MergeFrom(const EncryptedBucketsParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedBucketsParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.EncryptedBucketsParameters";
  }
  protected:
  explicit EncryptedBucketsParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedBucketIdLengthFieldNumber = 1,
    kSensitiveIdHashTypeFieldNumber = 2,
  };
  // int32 encrypted_bucket_id_length = 1;
  void clear_encrypted_bucket_id_length();
  int32_t encrypted_bucket_id_length() const;
  void set_encrypted_bucket_id_length(int32_t value);
  private:
  int32_t _internal_encrypted_bucket_id_length() const;
  void _internal_set_encrypted_bucket_id_length(int32_t value);
  public:

  // .private_membership.EncryptedBucketHashType sensitive_id_hash_type = 2;
  void clear_sensitive_id_hash_type();
  ::private_membership::EncryptedBucketHashType sensitive_id_hash_type() const;
  void set_sensitive_id_hash_type(::private_membership::EncryptedBucketHashType value);
  private:
  ::private_membership::EncryptedBucketHashType _internal_sensitive_id_hash_type() const;
  void _internal_set_sensitive_id_hash_type(::private_membership::EncryptedBucketHashType value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.EncryptedBucketsParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t encrypted_bucket_id_length_;
    int sensitive_id_hash_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class RlweParameters final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.RlweParameters) */ {
 public:
  inline RlweParameters() : RlweParameters(nullptr) {}
  ~RlweParameters() override;
  explicit PROTOBUF_CONSTEXPR RlweParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RlweParameters(const RlweParameters& from);
  RlweParameters(RlweParameters&& from) noexcept
    : RlweParameters() {
    *this = ::std::move(from);
  }

  inline RlweParameters& operator=(const RlweParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RlweParameters& operator=(RlweParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RlweParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RlweParameters* internal_default_instance() {
    return reinterpret_cast<const RlweParameters*>(
               &_RlweParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RlweParameters& a, RlweParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RlweParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RlweParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RlweParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RlweParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RlweParameters& from);
  void MergeFrom(const RlweParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RlweParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.RlweParameters";
  }
  protected:
  explicit RlweParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulusFieldNumber = 1,
    kLogDegreeFieldNumber = 2,
    kLogTFieldNumber = 3,
    kVarianceFieldNumber = 4,
    kLevelsOfRecursionFieldNumber = 5,
  };
  // repeated .private_membership.rlwe.Uint128 modulus = 1;
  int modulus_size() const;
  private:
  int _internal_modulus_size() const;
  public:
  void clear_modulus();
  ::private_membership::rlwe::Uint128* mutable_modulus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::Uint128 >*
      mutable_modulus();
  private:
  const ::private_membership::rlwe::Uint128& _internal_modulus(int index) const;
  ::private_membership::rlwe::Uint128* _internal_add_modulus();
  public:
  const ::private_membership::rlwe::Uint128& modulus(int index) const;
  ::private_membership::rlwe::Uint128* add_modulus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::Uint128 >&
      modulus() const;

  // int32 log_degree = 2;
  void clear_log_degree();
  int32_t log_degree() const;
  void set_log_degree(int32_t value);
  private:
  int32_t _internal_log_degree() const;
  void _internal_set_log_degree(int32_t value);
  public:

  // int32 log_t = 3;
  void clear_log_t();
  int32_t log_t() const;
  void set_log_t(int32_t value);
  private:
  int32_t _internal_log_t() const;
  void _internal_set_log_t(int32_t value);
  public:

  // int32 variance = 4;
  void clear_variance();
  int32_t variance() const;
  void set_variance(int32_t value);
  private:
  int32_t _internal_variance() const;
  void _internal_set_variance(int32_t value);
  public:

  // int32 levels_of_recursion = 5;
  void clear_levels_of_recursion();
  int32_t levels_of_recursion() const;
  void set_levels_of_recursion(int32_t value);
  private:
  int32_t _internal_levels_of_recursion() const;
  void _internal_set_levels_of_recursion(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.RlweParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::Uint128 > modulus_;
    int32_t log_degree_;
    int32_t log_t_;
    int32_t variance_;
    int32_t levels_of_recursion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class Uint128 final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.Uint128) */ {
 public:
  inline Uint128() : Uint128(nullptr) {}
  ~Uint128() override;
  explicit PROTOBUF_CONSTEXPR Uint128(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint128(const Uint128& from);
  Uint128(Uint128&& from) noexcept
    : Uint128() {
    *this = ::std::move(from);
  }

  inline Uint128& operator=(const Uint128& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint128& operator=(Uint128&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Uint128& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint128* internal_default_instance() {
    return reinterpret_cast<const Uint128*>(
               &_Uint128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Uint128& a, Uint128& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint128* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint128* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Uint128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Uint128>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Uint128& from);
  void MergeFrom(const Uint128& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Uint128* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.Uint128";
  }
  protected:
  explicit Uint128(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoFieldNumber = 1,
    kHiFieldNumber = 2,
  };
  // uint64 lo = 1;
  void clear_lo();
  uint64_t lo() const;
  void set_lo(uint64_t value);
  private:
  uint64_t _internal_lo() const;
  void _internal_set_lo(uint64_t value);
  public:

  // uint64 hi = 2;
  void clear_hi();
  uint64_t hi() const;
  void set_hi(uint64_t value);
  private:
  uint64_t _internal_hi() const;
  void _internal_set_hi(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.Uint128)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t lo_;
    uint64_t hi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PrivateMembershipRlweQuery_HashedBucketId final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId) */ {
 public:
  inline PrivateMembershipRlweQuery_HashedBucketId() : PrivateMembershipRlweQuery_HashedBucketId(nullptr) {}
  ~PrivateMembershipRlweQuery_HashedBucketId() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweQuery_HashedBucketId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlweQuery_HashedBucketId(const PrivateMembershipRlweQuery_HashedBucketId& from);
  PrivateMembershipRlweQuery_HashedBucketId(PrivateMembershipRlweQuery_HashedBucketId&& from) noexcept
    : PrivateMembershipRlweQuery_HashedBucketId() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlweQuery_HashedBucketId& operator=(const PrivateMembershipRlweQuery_HashedBucketId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlweQuery_HashedBucketId& operator=(PrivateMembershipRlweQuery_HashedBucketId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlweQuery_HashedBucketId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlweQuery_HashedBucketId* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlweQuery_HashedBucketId*>(
               &_PrivateMembershipRlweQuery_HashedBucketId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PrivateMembershipRlweQuery_HashedBucketId& a, PrivateMembershipRlweQuery_HashedBucketId& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlweQuery_HashedBucketId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlweQuery_HashedBucketId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlweQuery_HashedBucketId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlweQuery_HashedBucketId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlweQuery_HashedBucketId& from);
  void MergeFrom(const PrivateMembershipRlweQuery_HashedBucketId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlweQuery_HashedBucketId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId";
  }
  protected:
  explicit PrivateMembershipRlweQuery_HashedBucketId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashedBucketIdFieldNumber = 1,
    kBitLengthFieldNumber = 2,
  };
  // bytes hashed_bucket_id = 1;
  void clear_hashed_bucket_id();
  const std::string& hashed_bucket_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashed_bucket_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashed_bucket_id();
  PROTOBUF_NODISCARD std::string* release_hashed_bucket_id();
  void set_allocated_hashed_bucket_id(std::string* hashed_bucket_id);
  private:
  const std::string& _internal_hashed_bucket_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashed_bucket_id(const std::string& value);
  std::string* _internal_mutable_hashed_bucket_id();
  public:

  // int32 bit_length = 2;
  void clear_bit_length();
  int32_t bit_length() const;
  void set_bit_length(int32_t value);
  private:
  int32_t _internal_bit_length() const;
  void _internal_set_bit_length(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashed_bucket_id_;
    int32_t bit_length_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PrivateMembershipRlweQuery final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweQuery) */ {
 public:
  inline PrivateMembershipRlweQuery() : PrivateMembershipRlweQuery(nullptr) {}
  ~PrivateMembershipRlweQuery() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlweQuery(const PrivateMembershipRlweQuery& from);
  PrivateMembershipRlweQuery(PrivateMembershipRlweQuery&& from) noexcept
    : PrivateMembershipRlweQuery() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlweQuery& operator=(const PrivateMembershipRlweQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlweQuery& operator=(PrivateMembershipRlweQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlweQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlweQuery* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlweQuery*>(
               &_PrivateMembershipRlweQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrivateMembershipRlweQuery& a, PrivateMembershipRlweQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlweQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlweQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlweQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlweQuery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlweQuery& from);
  void MergeFrom(const PrivateMembershipRlweQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlweQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlweQuery";
  }
  protected:
  explicit PrivateMembershipRlweQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PrivateMembershipRlweQuery_HashedBucketId HashedBucketId;

  // accessors -------------------------------------------------------

  enum : int {
    kQueriedEncryptedIdFieldNumber = 1,
    kPirRequestFieldNumber = 2,
    kHashedBucketIdFieldNumber = 3,
  };
  // bytes queried_encrypted_id = 1;
  void clear_queried_encrypted_id();
  const std::string& queried_encrypted_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_queried_encrypted_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_queried_encrypted_id();
  PROTOBUF_NODISCARD std::string* release_queried_encrypted_id();
  void set_allocated_queried_encrypted_id(std::string* queried_encrypted_id);
  private:
  const std::string& _internal_queried_encrypted_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queried_encrypted_id(const std::string& value);
  std::string* _internal_mutable_queried_encrypted_id();
  public:

  // .private_membership.rlwe.PirRequest pir_request = 2;
  bool has_pir_request() const;
  private:
  bool _internal_has_pir_request() const;
  public:
  void clear_pir_request();
  const ::private_membership::rlwe::PirRequest& pir_request() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::PirRequest* release_pir_request();
  ::private_membership::rlwe::PirRequest* mutable_pir_request();
  void set_allocated_pir_request(::private_membership::rlwe::PirRequest* pir_request);
  private:
  const ::private_membership::rlwe::PirRequest& _internal_pir_request() const;
  ::private_membership::rlwe::PirRequest* _internal_mutable_pir_request();
  public:
  void unsafe_arena_set_allocated_pir_request(
      ::private_membership::rlwe::PirRequest* pir_request);
  ::private_membership::rlwe::PirRequest* unsafe_arena_release_pir_request();

  // .private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId hashed_bucket_id = 3;
  bool has_hashed_bucket_id() const;
  private:
  bool _internal_has_hashed_bucket_id() const;
  public:
  void clear_hashed_bucket_id();
  const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId& hashed_bucket_id() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* release_hashed_bucket_id();
  ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* mutable_hashed_bucket_id();
  void set_allocated_hashed_bucket_id(::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* hashed_bucket_id);
  private:
  const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId& _internal_hashed_bucket_id() const;
  ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* _internal_mutable_hashed_bucket_id();
  public:
  void unsafe_arena_set_allocated_hashed_bucket_id(
      ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* hashed_bucket_id);
  ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* unsafe_arena_release_hashed_bucket_id();

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queried_encrypted_id_;
    ::private_membership::rlwe::PirRequest* pir_request_;
    ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* hashed_bucket_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PrivateMembershipRlwePirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlwePirResponse) */ {
 public:
  inline PrivateMembershipRlwePirResponse() : PrivateMembershipRlwePirResponse(nullptr) {}
  ~PrivateMembershipRlwePirResponse() override;
  explicit PROTOBUF_CONSTEXPR PrivateMembershipRlwePirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrivateMembershipRlwePirResponse(const PrivateMembershipRlwePirResponse& from);
  PrivateMembershipRlwePirResponse(PrivateMembershipRlwePirResponse&& from) noexcept
    : PrivateMembershipRlwePirResponse() {
    *this = ::std::move(from);
  }

  inline PrivateMembershipRlwePirResponse& operator=(const PrivateMembershipRlwePirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrivateMembershipRlwePirResponse& operator=(PrivateMembershipRlwePirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PrivateMembershipRlwePirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrivateMembershipRlwePirResponse* internal_default_instance() {
    return reinterpret_cast<const PrivateMembershipRlwePirResponse*>(
               &_PrivateMembershipRlwePirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PrivateMembershipRlwePirResponse& a, PrivateMembershipRlwePirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PrivateMembershipRlwePirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrivateMembershipRlwePirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrivateMembershipRlwePirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrivateMembershipRlwePirResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PrivateMembershipRlwePirResponse& from);
  void MergeFrom(const PrivateMembershipRlwePirResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrivateMembershipRlwePirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PrivateMembershipRlwePirResponse";
  }
  protected:
  explicit PrivateMembershipRlwePirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriedEncryptedIdFieldNumber = 1,
    kPirResponseFieldNumber = 2,
  };
  // bytes queried_encrypted_id = 1;
  void clear_queried_encrypted_id();
  const std::string& queried_encrypted_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_queried_encrypted_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_queried_encrypted_id();
  PROTOBUF_NODISCARD std::string* release_queried_encrypted_id();
  void set_allocated_queried_encrypted_id(std::string* queried_encrypted_id);
  private:
  const std::string& _internal_queried_encrypted_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queried_encrypted_id(const std::string& value);
  std::string* _internal_mutable_queried_encrypted_id();
  public:

  // .private_membership.rlwe.PirResponse pir_response = 2;
  bool has_pir_response() const;
  private:
  bool _internal_has_pir_response() const;
  public:
  void clear_pir_response();
  const ::private_membership::rlwe::PirResponse& pir_response() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::PirResponse* release_pir_response();
  ::private_membership::rlwe::PirResponse* mutable_pir_response();
  void set_allocated_pir_response(::private_membership::rlwe::PirResponse* pir_response);
  private:
  const ::private_membership::rlwe::PirResponse& _internal_pir_response() const;
  ::private_membership::rlwe::PirResponse* _internal_mutable_pir_response();
  public:
  void unsafe_arena_set_allocated_pir_response(
      ::private_membership::rlwe::PirResponse* pir_response);
  ::private_membership::rlwe::PirResponse* unsafe_arena_release_pir_response();

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlwePirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queried_encrypted_id_;
    ::private_membership::rlwe::PirResponse* pir_response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PirRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PirRequest) */ {
 public:
  inline PirRequest() : PirRequest(nullptr) {}
  ~PirRequest() override;
  explicit PROTOBUF_CONSTEXPR PirRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PirRequest(const PirRequest& from);
  PirRequest(PirRequest&& from) noexcept
    : PirRequest() {
    *this = ::std::move(from);
  }

  inline PirRequest& operator=(const PirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PirRequest& operator=(PirRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PirRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PirRequest* internal_default_instance() {
    return reinterpret_cast<const PirRequest*>(
               &_PirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PirRequest& a, PirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PirRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PirRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PirRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PirRequest& from);
  void MergeFrom(const PirRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PirRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PirRequest";
  }
  protected:
  explicit PirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kPrngSeedFieldNumber = 2,
  };
  // repeated .rlwe.SerializedNttPolynomial request = 1;
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::rlwe::SerializedNttPolynomial* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >*
      mutable_request();
  private:
  const ::rlwe::SerializedNttPolynomial& _internal_request(int index) const;
  ::rlwe::SerializedNttPolynomial* _internal_add_request();
  public:
  const ::rlwe::SerializedNttPolynomial& request(int index) const;
  ::rlwe::SerializedNttPolynomial* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >&
      request() const;

  // bytes prng_seed = 2;
  void clear_prng_seed();
  const std::string& prng_seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prng_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prng_seed();
  PROTOBUF_NODISCARD std::string* release_prng_seed();
  void set_allocated_prng_seed(std::string* prng_seed);
  private:
  const std::string& _internal_prng_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prng_seed(const std::string& value);
  std::string* _internal_mutable_prng_seed();
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PirRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial > request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prng_seed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class PirResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PirResponse) */ {
 public:
  inline PirResponse() : PirResponse(nullptr) {}
  ~PirResponse() override;
  explicit PROTOBUF_CONSTEXPR PirResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PirResponse(const PirResponse& from);
  PirResponse(PirResponse&& from) noexcept
    : PirResponse() {
    *this = ::std::move(from);
  }

  inline PirResponse& operator=(const PirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PirResponse& operator=(PirResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PirResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PirResponse* internal_default_instance() {
    return reinterpret_cast<const PirResponse*>(
               &_PirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PirResponse& a, PirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PirResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PirResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PirResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PirResponse& from);
  void MergeFrom(const PirResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PirResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.PirResponse";
  }
  protected:
  explicit PirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
    kPlaintextEntrySizeFieldNumber = 2,
  };
  // repeated .rlwe.SerializedSymmetricRlweCiphertext response = 1;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::rlwe::SerializedSymmetricRlweCiphertext* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedSymmetricRlweCiphertext >*
      mutable_response();
  private:
  const ::rlwe::SerializedSymmetricRlweCiphertext& _internal_response(int index) const;
  ::rlwe::SerializedSymmetricRlweCiphertext* _internal_add_response();
  public:
  const ::rlwe::SerializedSymmetricRlweCiphertext& response(int index) const;
  ::rlwe::SerializedSymmetricRlweCiphertext* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedSymmetricRlweCiphertext >&
      response() const;

  // int32 plaintext_entry_size = 2;
  void clear_plaintext_entry_size();
  int32_t plaintext_entry_size() const;
  void set_plaintext_entry_size(int32_t value);
  private:
  int32_t _internal_plaintext_entry_size() const;
  void _internal_set_plaintext_entry_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.PirResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedSymmetricRlweCiphertext > response_;
    int32_t plaintext_entry_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class EncryptedBucket_EncryptedIdValuePair final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair) */ {
 public:
  inline EncryptedBucket_EncryptedIdValuePair() : EncryptedBucket_EncryptedIdValuePair(nullptr) {}
  ~EncryptedBucket_EncryptedIdValuePair() override;
  explicit PROTOBUF_CONSTEXPR EncryptedBucket_EncryptedIdValuePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedBucket_EncryptedIdValuePair(const EncryptedBucket_EncryptedIdValuePair& from);
  EncryptedBucket_EncryptedIdValuePair(EncryptedBucket_EncryptedIdValuePair&& from) noexcept
    : EncryptedBucket_EncryptedIdValuePair() {
    *this = ::std::move(from);
  }

  inline EncryptedBucket_EncryptedIdValuePair& operator=(const EncryptedBucket_EncryptedIdValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedBucket_EncryptedIdValuePair& operator=(EncryptedBucket_EncryptedIdValuePair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EncryptedBucket_EncryptedIdValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedBucket_EncryptedIdValuePair* internal_default_instance() {
    return reinterpret_cast<const EncryptedBucket_EncryptedIdValuePair*>(
               &_EncryptedBucket_EncryptedIdValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EncryptedBucket_EncryptedIdValuePair& a, EncryptedBucket_EncryptedIdValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedBucket_EncryptedIdValuePair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedBucket_EncryptedIdValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedBucket_EncryptedIdValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedBucket_EncryptedIdValuePair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptedBucket_EncryptedIdValuePair& from);
  void MergeFrom(const EncryptedBucket_EncryptedIdValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedBucket_EncryptedIdValuePair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair";
  }
  protected:
  explicit EncryptedBucket_EncryptedIdValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedIdFieldNumber = 1,
    kEncryptedValueFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // bytes encrypted_id = 1;
  void clear_encrypted_id();
  const std::string& encrypted_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_id();
  PROTOBUF_NODISCARD std::string* release_encrypted_id();
  void set_allocated_encrypted_id(std::string* encrypted_id);
  private:
  const std::string& _internal_encrypted_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_id(const std::string& value);
  std::string* _internal_mutable_encrypted_id();
  public:

  // bytes encrypted_value = 2;
  void clear_encrypted_value();
  const std::string& encrypted_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_value();
  PROTOBUF_NODISCARD std::string* release_encrypted_value();
  void set_allocated_encrypted_value(std::string* encrypted_value);
  private:
  const std::string& _internal_encrypted_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_value(const std::string& value);
  std::string* _internal_mutable_encrypted_value();
  public:

  // .private_membership.rlwe.RlwePlaintextId id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::private_membership::rlwe::RlwePlaintextId& id() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::RlwePlaintextId* release_id();
  ::private_membership::rlwe::RlwePlaintextId* mutable_id();
  void set_allocated_id(::private_membership::rlwe::RlwePlaintextId* id);
  private:
  const ::private_membership::rlwe::RlwePlaintextId& _internal_id() const;
  ::private_membership::rlwe::RlwePlaintextId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::private_membership::rlwe::RlwePlaintextId* id);
  ::private_membership::rlwe::RlwePlaintextId* unsafe_arena_release_id();

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_value_;
    ::private_membership::rlwe::RlwePlaintextId* id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class EncryptedBucket final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.EncryptedBucket) */ {
 public:
  inline EncryptedBucket() : EncryptedBucket(nullptr) {}
  ~EncryptedBucket() override;
  explicit PROTOBUF_CONSTEXPR EncryptedBucket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedBucket(const EncryptedBucket& from);
  EncryptedBucket(EncryptedBucket&& from) noexcept
    : EncryptedBucket() {
    *this = ::std::move(from);
  }

  inline EncryptedBucket& operator=(const EncryptedBucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedBucket& operator=(EncryptedBucket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EncryptedBucket& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedBucket* internal_default_instance() {
    return reinterpret_cast<const EncryptedBucket*>(
               &_EncryptedBucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EncryptedBucket& a, EncryptedBucket& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedBucket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedBucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedBucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedBucket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptedBucket& from);
  void MergeFrom(const EncryptedBucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedBucket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.EncryptedBucket";
  }
  protected:
  explicit EncryptedBucket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef EncryptedBucket_EncryptedIdValuePair EncryptedIdValuePair;

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedIdValuePairsFieldNumber = 1,
  };
  // repeated .private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair encrypted_id_value_pairs = 1;
  int encrypted_id_value_pairs_size() const;
  private:
  int _internal_encrypted_id_value_pairs_size() const;
  public:
  void clear_encrypted_id_value_pairs();
  ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* mutable_encrypted_id_value_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair >*
      mutable_encrypted_id_value_pairs();
  private:
  const ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair& _internal_encrypted_id_value_pairs(int index) const;
  ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* _internal_add_encrypted_id_value_pairs();
  public:
  const ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair& encrypted_id_value_pairs(int index) const;
  ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* add_encrypted_id_value_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair >&
      encrypted_id_value_pairs() const;

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.EncryptedBucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair > encrypted_id_value_pairs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class RlweMembershipResponses_MembershipResponseEntry final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry) */ {
 public:
  inline RlweMembershipResponses_MembershipResponseEntry() : RlweMembershipResponses_MembershipResponseEntry(nullptr) {}
  ~RlweMembershipResponses_MembershipResponseEntry() override;
  explicit PROTOBUF_CONSTEXPR RlweMembershipResponses_MembershipResponseEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RlweMembershipResponses_MembershipResponseEntry(const RlweMembershipResponses_MembershipResponseEntry& from);
  RlweMembershipResponses_MembershipResponseEntry(RlweMembershipResponses_MembershipResponseEntry&& from) noexcept
    : RlweMembershipResponses_MembershipResponseEntry() {
    *this = ::std::move(from);
  }

  inline RlweMembershipResponses_MembershipResponseEntry& operator=(const RlweMembershipResponses_MembershipResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline RlweMembershipResponses_MembershipResponseEntry& operator=(RlweMembershipResponses_MembershipResponseEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RlweMembershipResponses_MembershipResponseEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const RlweMembershipResponses_MembershipResponseEntry* internal_default_instance() {
    return reinterpret_cast<const RlweMembershipResponses_MembershipResponseEntry*>(
               &_RlweMembershipResponses_MembershipResponseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(RlweMembershipResponses_MembershipResponseEntry& a, RlweMembershipResponses_MembershipResponseEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(RlweMembershipResponses_MembershipResponseEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RlweMembershipResponses_MembershipResponseEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RlweMembershipResponses_MembershipResponseEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RlweMembershipResponses_MembershipResponseEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RlweMembershipResponses_MembershipResponseEntry& from);
  void MergeFrom(const RlweMembershipResponses_MembershipResponseEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RlweMembershipResponses_MembershipResponseEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry";
  }
  protected:
  explicit RlweMembershipResponses_MembershipResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaintextIdFieldNumber = 1,
    kMembershipResponseFieldNumber = 2,
  };
  // .private_membership.rlwe.RlwePlaintextId plaintext_id = 1;
  bool has_plaintext_id() const;
  private:
  bool _internal_has_plaintext_id() const;
  public:
  void clear_plaintext_id();
  const ::private_membership::rlwe::RlwePlaintextId& plaintext_id() const;
  PROTOBUF_NODISCARD ::private_membership::rlwe::RlwePlaintextId* release_plaintext_id();
  ::private_membership::rlwe::RlwePlaintextId* mutable_plaintext_id();
  void set_allocated_plaintext_id(::private_membership::rlwe::RlwePlaintextId* plaintext_id);
  private:
  const ::private_membership::rlwe::RlwePlaintextId& _internal_plaintext_id() const;
  ::private_membership::rlwe::RlwePlaintextId* _internal_mutable_plaintext_id();
  public:
  void unsafe_arena_set_allocated_plaintext_id(
      ::private_membership::rlwe::RlwePlaintextId* plaintext_id);
  ::private_membership::rlwe::RlwePlaintextId* unsafe_arena_release_plaintext_id();

  // .private_membership.MembershipResponse membership_response = 2;
  bool has_membership_response() const;
  private:
  bool _internal_has_membership_response() const;
  public:
  void clear_membership_response();
  const ::private_membership::MembershipResponse& membership_response() const;
  PROTOBUF_NODISCARD ::private_membership::MembershipResponse* release_membership_response();
  ::private_membership::MembershipResponse* mutable_membership_response();
  void set_allocated_membership_response(::private_membership::MembershipResponse* membership_response);
  private:
  const ::private_membership::MembershipResponse& _internal_membership_response() const;
  ::private_membership::MembershipResponse* _internal_mutable_membership_response();
  public:
  void unsafe_arena_set_allocated_membership_response(
      ::private_membership::MembershipResponse* membership_response);
  ::private_membership::MembershipResponse* unsafe_arena_release_membership_response();

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::private_membership::rlwe::RlwePlaintextId* plaintext_id_;
    ::private_membership::MembershipResponse* membership_response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// -------------------------------------------------------------------

class RlweMembershipResponses final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.RlweMembershipResponses) */ {
 public:
  inline RlweMembershipResponses() : RlweMembershipResponses(nullptr) {}
  ~RlweMembershipResponses() override;
  explicit PROTOBUF_CONSTEXPR RlweMembershipResponses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RlweMembershipResponses(const RlweMembershipResponses& from);
  RlweMembershipResponses(RlweMembershipResponses&& from) noexcept
    : RlweMembershipResponses() {
    *this = ::std::move(from);
  }

  inline RlweMembershipResponses& operator=(const RlweMembershipResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline RlweMembershipResponses& operator=(RlweMembershipResponses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RlweMembershipResponses& default_instance() {
    return *internal_default_instance();
  }
  static inline const RlweMembershipResponses* internal_default_instance() {
    return reinterpret_cast<const RlweMembershipResponses*>(
               &_RlweMembershipResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RlweMembershipResponses& a, RlweMembershipResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(RlweMembershipResponses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RlweMembershipResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RlweMembershipResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RlweMembershipResponses>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RlweMembershipResponses& from);
  void MergeFrom(const RlweMembershipResponses& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RlweMembershipResponses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "private_membership.rlwe.RlweMembershipResponses";
  }
  protected:
  explicit RlweMembershipResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RlweMembershipResponses_MembershipResponseEntry MembershipResponseEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipResponsesFieldNumber = 1,
  };
  // repeated .private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry membership_responses = 1;
  int membership_responses_size() const;
  private:
  int _internal_membership_responses_size() const;
  public:
  void clear_membership_responses();
  ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* mutable_membership_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry >*
      mutable_membership_responses();
  private:
  const ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry& _internal_membership_responses(int index) const;
  ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* _internal_add_membership_responses();
  public:
  const ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry& membership_responses(int index) const;
  ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* add_membership_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry >&
      membership_responses() const;

  // @@protoc_insertion_point(class_scope:private_membership.rlwe.RlweMembershipResponses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry > membership_responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_private_5fmembership_5frlwe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrivateMembershipRlweOprfRequest

// repeated bytes encrypted_ids = 1;
inline int PrivateMembershipRlweOprfRequest::_internal_encrypted_ids_size() const {
  return _impl_.encrypted_ids_.size();
}
inline int PrivateMembershipRlweOprfRequest::encrypted_ids_size() const {
  return _internal_encrypted_ids_size();
}
inline void PrivateMembershipRlweOprfRequest::clear_encrypted_ids() {
  _impl_.encrypted_ids_.Clear();
}
inline std::string* PrivateMembershipRlweOprfRequest::add_encrypted_ids() {
  std::string* _s = _internal_add_encrypted_ids();
  // @@protoc_insertion_point(field_add_mutable:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
  return _s;
}
inline const std::string& PrivateMembershipRlweOprfRequest::_internal_encrypted_ids(int index) const {
  return _impl_.encrypted_ids_.Get(index);
}
inline const std::string& PrivateMembershipRlweOprfRequest::encrypted_ids(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
  return _internal_encrypted_ids(index);
}
inline std::string* PrivateMembershipRlweOprfRequest::mutable_encrypted_ids(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
  return _impl_.encrypted_ids_.Mutable(index);
}
inline void PrivateMembershipRlweOprfRequest::set_encrypted_ids(int index, const std::string& value) {
  _impl_.encrypted_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline void PrivateMembershipRlweOprfRequest::set_encrypted_ids(int index, std::string&& value) {
  _impl_.encrypted_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline void PrivateMembershipRlweOprfRequest::set_encrypted_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.encrypted_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline void PrivateMembershipRlweOprfRequest::set_encrypted_ids(int index, const void* value, size_t size) {
  _impl_.encrypted_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline std::string* PrivateMembershipRlweOprfRequest::_internal_add_encrypted_ids() {
  return _impl_.encrypted_ids_.Add();
}
inline void PrivateMembershipRlweOprfRequest::add_encrypted_ids(const std::string& value) {
  _impl_.encrypted_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline void PrivateMembershipRlweOprfRequest::add_encrypted_ids(std::string&& value) {
  _impl_.encrypted_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline void PrivateMembershipRlweOprfRequest::add_encrypted_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.encrypted_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline void PrivateMembershipRlweOprfRequest::add_encrypted_ids(const void* value, size_t size) {
  _impl_.encrypted_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PrivateMembershipRlweOprfRequest::encrypted_ids() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
  return _impl_.encrypted_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PrivateMembershipRlweOprfRequest::mutable_encrypted_ids() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PrivateMembershipRlweOprfRequest.encrypted_ids)
  return &_impl_.encrypted_ids_;
}

// .private_membership.rlwe.RlweUseCase use_case = 2;
inline void PrivateMembershipRlweOprfRequest::clear_use_case() {
  _impl_.use_case_ = 0;
}
inline ::private_membership::rlwe::RlweUseCase PrivateMembershipRlweOprfRequest::_internal_use_case() const {
  return static_cast< ::private_membership::rlwe::RlweUseCase >(_impl_.use_case_);
}
inline ::private_membership::rlwe::RlweUseCase PrivateMembershipRlweOprfRequest::use_case() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfRequest.use_case)
  return _internal_use_case();
}
inline void PrivateMembershipRlweOprfRequest::_internal_set_use_case(::private_membership::rlwe::RlweUseCase value) {
  
  _impl_.use_case_ = value;
}
inline void PrivateMembershipRlweOprfRequest::set_use_case(::private_membership::rlwe::RlweUseCase value) {
  _internal_set_use_case(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweOprfRequest.use_case)
}

// -------------------------------------------------------------------

// PrivateMembershipRlweOprfResponse

// repeated .private_membership.DoublyEncryptedId doubly_encrypted_ids = 1;
inline int PrivateMembershipRlweOprfResponse::_internal_doubly_encrypted_ids_size() const {
  return _impl_.doubly_encrypted_ids_.size();
}
inline int PrivateMembershipRlweOprfResponse::doubly_encrypted_ids_size() const {
  return _internal_doubly_encrypted_ids_size();
}
inline ::private_membership::DoublyEncryptedId* PrivateMembershipRlweOprfResponse::mutable_doubly_encrypted_ids(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweOprfResponse.doubly_encrypted_ids)
  return _impl_.doubly_encrypted_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::DoublyEncryptedId >*
PrivateMembershipRlweOprfResponse::mutable_doubly_encrypted_ids() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PrivateMembershipRlweOprfResponse.doubly_encrypted_ids)
  return &_impl_.doubly_encrypted_ids_;
}
inline const ::private_membership::DoublyEncryptedId& PrivateMembershipRlweOprfResponse::_internal_doubly_encrypted_ids(int index) const {
  return _impl_.doubly_encrypted_ids_.Get(index);
}
inline const ::private_membership::DoublyEncryptedId& PrivateMembershipRlweOprfResponse::doubly_encrypted_ids(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfResponse.doubly_encrypted_ids)
  return _internal_doubly_encrypted_ids(index);
}
inline ::private_membership::DoublyEncryptedId* PrivateMembershipRlweOprfResponse::_internal_add_doubly_encrypted_ids() {
  return _impl_.doubly_encrypted_ids_.Add();
}
inline ::private_membership::DoublyEncryptedId* PrivateMembershipRlweOprfResponse::add_doubly_encrypted_ids() {
  ::private_membership::DoublyEncryptedId* _add = _internal_add_doubly_encrypted_ids();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PrivateMembershipRlweOprfResponse.doubly_encrypted_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::DoublyEncryptedId >&
PrivateMembershipRlweOprfResponse::doubly_encrypted_ids() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.PrivateMembershipRlweOprfResponse.doubly_encrypted_ids)
  return _impl_.doubly_encrypted_ids_;
}

// .private_membership.rlwe.HashedBucketsParameters hashed_buckets_parameters = 2;
inline bool PrivateMembershipRlweOprfResponse::_internal_has_hashed_buckets_parameters() const {
  return this != internal_default_instance() && _impl_.hashed_buckets_parameters_ != nullptr;
}
inline bool PrivateMembershipRlweOprfResponse::has_hashed_buckets_parameters() const {
  return _internal_has_hashed_buckets_parameters();
}
inline void PrivateMembershipRlweOprfResponse::clear_hashed_buckets_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.hashed_buckets_parameters_ != nullptr) {
    delete _impl_.hashed_buckets_parameters_;
  }
  _impl_.hashed_buckets_parameters_ = nullptr;
}
inline const ::private_membership::rlwe::HashedBucketsParameters& PrivateMembershipRlweOprfResponse::_internal_hashed_buckets_parameters() const {
  const ::private_membership::rlwe::HashedBucketsParameters* p = _impl_.hashed_buckets_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::HashedBucketsParameters&>(
      ::private_membership::rlwe::_HashedBucketsParameters_default_instance_);
}
inline const ::private_membership::rlwe::HashedBucketsParameters& PrivateMembershipRlweOprfResponse::hashed_buckets_parameters() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfResponse.hashed_buckets_parameters)
  return _internal_hashed_buckets_parameters();
}
inline void PrivateMembershipRlweOprfResponse::unsafe_arena_set_allocated_hashed_buckets_parameters(
    ::private_membership::rlwe::HashedBucketsParameters* hashed_buckets_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hashed_buckets_parameters_);
  }
  _impl_.hashed_buckets_parameters_ = hashed_buckets_parameters;
  if (hashed_buckets_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweOprfResponse.hashed_buckets_parameters)
}
inline ::private_membership::rlwe::HashedBucketsParameters* PrivateMembershipRlweOprfResponse::release_hashed_buckets_parameters() {
  
  ::private_membership::rlwe::HashedBucketsParameters* temp = _impl_.hashed_buckets_parameters_;
  _impl_.hashed_buckets_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::HashedBucketsParameters* PrivateMembershipRlweOprfResponse::unsafe_arena_release_hashed_buckets_parameters() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweOprfResponse.hashed_buckets_parameters)
  
  ::private_membership::rlwe::HashedBucketsParameters* temp = _impl_.hashed_buckets_parameters_;
  _impl_.hashed_buckets_parameters_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::HashedBucketsParameters* PrivateMembershipRlweOprfResponse::_internal_mutable_hashed_buckets_parameters() {
  
  if (_impl_.hashed_buckets_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::HashedBucketsParameters>(GetArenaForAllocation());
    _impl_.hashed_buckets_parameters_ = p;
  }
  return _impl_.hashed_buckets_parameters_;
}
inline ::private_membership::rlwe::HashedBucketsParameters* PrivateMembershipRlweOprfResponse::mutable_hashed_buckets_parameters() {
  ::private_membership::rlwe::HashedBucketsParameters* _msg = _internal_mutable_hashed_buckets_parameters();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweOprfResponse.hashed_buckets_parameters)
  return _msg;
}
inline void PrivateMembershipRlweOprfResponse::set_allocated_hashed_buckets_parameters(::private_membership::rlwe::HashedBucketsParameters* hashed_buckets_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hashed_buckets_parameters_;
  }
  if (hashed_buckets_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hashed_buckets_parameters);
    if (message_arena != submessage_arena) {
      hashed_buckets_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hashed_buckets_parameters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hashed_buckets_parameters_ = hashed_buckets_parameters;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweOprfResponse.hashed_buckets_parameters)
}

// .private_membership.rlwe.EncryptedBucketsParameters encrypted_buckets_parameters = 3;
inline bool PrivateMembershipRlweOprfResponse::_internal_has_encrypted_buckets_parameters() const {
  return this != internal_default_instance() && _impl_.encrypted_buckets_parameters_ != nullptr;
}
inline bool PrivateMembershipRlweOprfResponse::has_encrypted_buckets_parameters() const {
  return _internal_has_encrypted_buckets_parameters();
}
inline void PrivateMembershipRlweOprfResponse::clear_encrypted_buckets_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.encrypted_buckets_parameters_ != nullptr) {
    delete _impl_.encrypted_buckets_parameters_;
  }
  _impl_.encrypted_buckets_parameters_ = nullptr;
}
inline const ::private_membership::rlwe::EncryptedBucketsParameters& PrivateMembershipRlweOprfResponse::_internal_encrypted_buckets_parameters() const {
  const ::private_membership::rlwe::EncryptedBucketsParameters* p = _impl_.encrypted_buckets_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::EncryptedBucketsParameters&>(
      ::private_membership::rlwe::_EncryptedBucketsParameters_default_instance_);
}
inline const ::private_membership::rlwe::EncryptedBucketsParameters& PrivateMembershipRlweOprfResponse::encrypted_buckets_parameters() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfResponse.encrypted_buckets_parameters)
  return _internal_encrypted_buckets_parameters();
}
inline void PrivateMembershipRlweOprfResponse::unsafe_arena_set_allocated_encrypted_buckets_parameters(
    ::private_membership::rlwe::EncryptedBucketsParameters* encrypted_buckets_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.encrypted_buckets_parameters_);
  }
  _impl_.encrypted_buckets_parameters_ = encrypted_buckets_parameters;
  if (encrypted_buckets_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweOprfResponse.encrypted_buckets_parameters)
}
inline ::private_membership::rlwe::EncryptedBucketsParameters* PrivateMembershipRlweOprfResponse::release_encrypted_buckets_parameters() {
  
  ::private_membership::rlwe::EncryptedBucketsParameters* temp = _impl_.encrypted_buckets_parameters_;
  _impl_.encrypted_buckets_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::EncryptedBucketsParameters* PrivateMembershipRlweOprfResponse::unsafe_arena_release_encrypted_buckets_parameters() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweOprfResponse.encrypted_buckets_parameters)
  
  ::private_membership::rlwe::EncryptedBucketsParameters* temp = _impl_.encrypted_buckets_parameters_;
  _impl_.encrypted_buckets_parameters_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::EncryptedBucketsParameters* PrivateMembershipRlweOprfResponse::_internal_mutable_encrypted_buckets_parameters() {
  
  if (_impl_.encrypted_buckets_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::EncryptedBucketsParameters>(GetArenaForAllocation());
    _impl_.encrypted_buckets_parameters_ = p;
  }
  return _impl_.encrypted_buckets_parameters_;
}
inline ::private_membership::rlwe::EncryptedBucketsParameters* PrivateMembershipRlweOprfResponse::mutable_encrypted_buckets_parameters() {
  ::private_membership::rlwe::EncryptedBucketsParameters* _msg = _internal_mutable_encrypted_buckets_parameters();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweOprfResponse.encrypted_buckets_parameters)
  return _msg;
}
inline void PrivateMembershipRlweOprfResponse::set_allocated_encrypted_buckets_parameters(::private_membership::rlwe::EncryptedBucketsParameters* encrypted_buckets_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.encrypted_buckets_parameters_;
  }
  if (encrypted_buckets_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(encrypted_buckets_parameters);
    if (message_arena != submessage_arena) {
      encrypted_buckets_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypted_buckets_parameters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.encrypted_buckets_parameters_ = encrypted_buckets_parameters;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweOprfResponse.encrypted_buckets_parameters)
}

// .private_membership.rlwe.RlweParameters rlwe_parameters = 4;
inline bool PrivateMembershipRlweOprfResponse::_internal_has_rlwe_parameters() const {
  return this != internal_default_instance() && _impl_.rlwe_parameters_ != nullptr;
}
inline bool PrivateMembershipRlweOprfResponse::has_rlwe_parameters() const {
  return _internal_has_rlwe_parameters();
}
inline void PrivateMembershipRlweOprfResponse::clear_rlwe_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.rlwe_parameters_ != nullptr) {
    delete _impl_.rlwe_parameters_;
  }
  _impl_.rlwe_parameters_ = nullptr;
}
inline const ::private_membership::rlwe::RlweParameters& PrivateMembershipRlweOprfResponse::_internal_rlwe_parameters() const {
  const ::private_membership::rlwe::RlweParameters* p = _impl_.rlwe_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::RlweParameters&>(
      ::private_membership::rlwe::_RlweParameters_default_instance_);
}
inline const ::private_membership::rlwe::RlweParameters& PrivateMembershipRlweOprfResponse::rlwe_parameters() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfResponse.rlwe_parameters)
  return _internal_rlwe_parameters();
}
inline void PrivateMembershipRlweOprfResponse::unsafe_arena_set_allocated_rlwe_parameters(
    ::private_membership::rlwe::RlweParameters* rlwe_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rlwe_parameters_);
  }
  _impl_.rlwe_parameters_ = rlwe_parameters;
  if (rlwe_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweOprfResponse.rlwe_parameters)
}
inline ::private_membership::rlwe::RlweParameters* PrivateMembershipRlweOprfResponse::release_rlwe_parameters() {
  
  ::private_membership::rlwe::RlweParameters* temp = _impl_.rlwe_parameters_;
  _impl_.rlwe_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::RlweParameters* PrivateMembershipRlweOprfResponse::unsafe_arena_release_rlwe_parameters() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweOprfResponse.rlwe_parameters)
  
  ::private_membership::rlwe::RlweParameters* temp = _impl_.rlwe_parameters_;
  _impl_.rlwe_parameters_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::RlweParameters* PrivateMembershipRlweOprfResponse::_internal_mutable_rlwe_parameters() {
  
  if (_impl_.rlwe_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::RlweParameters>(GetArenaForAllocation());
    _impl_.rlwe_parameters_ = p;
  }
  return _impl_.rlwe_parameters_;
}
inline ::private_membership::rlwe::RlweParameters* PrivateMembershipRlweOprfResponse::mutable_rlwe_parameters() {
  ::private_membership::rlwe::RlweParameters* _msg = _internal_mutable_rlwe_parameters();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweOprfResponse.rlwe_parameters)
  return _msg;
}
inline void PrivateMembershipRlweOprfResponse::set_allocated_rlwe_parameters(::private_membership::rlwe::RlweParameters* rlwe_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rlwe_parameters_;
  }
  if (rlwe_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rlwe_parameters);
    if (message_arena != submessage_arena) {
      rlwe_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rlwe_parameters, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rlwe_parameters_ = rlwe_parameters;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweOprfResponse.rlwe_parameters)
}

// int64 key_version = 5;
inline void PrivateMembershipRlweOprfResponse::clear_key_version() {
  _impl_.key_version_ = int64_t{0};
}
inline int64_t PrivateMembershipRlweOprfResponse::_internal_key_version() const {
  return _impl_.key_version_;
}
inline int64_t PrivateMembershipRlweOprfResponse::key_version() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweOprfResponse.key_version)
  return _internal_key_version();
}
inline void PrivateMembershipRlweOprfResponse::_internal_set_key_version(int64_t value) {
  
  _impl_.key_version_ = value;
}
inline void PrivateMembershipRlweOprfResponse::set_key_version(int64_t value) {
  _internal_set_key_version(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweOprfResponse.key_version)
}

// -------------------------------------------------------------------

// PrivateMembershipRlweQueryRequest

// repeated .private_membership.rlwe.PrivateMembershipRlweQuery queries = 1;
inline int PrivateMembershipRlweQueryRequest::_internal_queries_size() const {
  return _impl_.queries_.size();
}
inline int PrivateMembershipRlweQueryRequest::queries_size() const {
  return _internal_queries_size();
}
inline void PrivateMembershipRlweQueryRequest::clear_queries() {
  _impl_.queries_.Clear();
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery* PrivateMembershipRlweQueryRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweQueryRequest.queries)
  return _impl_.queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweQuery >*
PrivateMembershipRlweQueryRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PrivateMembershipRlweQueryRequest.queries)
  return &_impl_.queries_;
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQuery& PrivateMembershipRlweQueryRequest::_internal_queries(int index) const {
  return _impl_.queries_.Get(index);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQuery& PrivateMembershipRlweQueryRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQueryRequest.queries)
  return _internal_queries(index);
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery* PrivateMembershipRlweQueryRequest::_internal_add_queries() {
  return _impl_.queries_.Add();
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery* PrivateMembershipRlweQueryRequest::add_queries() {
  ::private_membership::rlwe::PrivateMembershipRlweQuery* _add = _internal_add_queries();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PrivateMembershipRlweQueryRequest.queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweQuery >&
PrivateMembershipRlweQueryRequest::queries() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.PrivateMembershipRlweQueryRequest.queries)
  return _impl_.queries_;
}

// .private_membership.rlwe.RlweUseCase use_case = 2;
inline void PrivateMembershipRlweQueryRequest::clear_use_case() {
  _impl_.use_case_ = 0;
}
inline ::private_membership::rlwe::RlweUseCase PrivateMembershipRlweQueryRequest::_internal_use_case() const {
  return static_cast< ::private_membership::rlwe::RlweUseCase >(_impl_.use_case_);
}
inline ::private_membership::rlwe::RlweUseCase PrivateMembershipRlweQueryRequest::use_case() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQueryRequest.use_case)
  return _internal_use_case();
}
inline void PrivateMembershipRlweQueryRequest::_internal_set_use_case(::private_membership::rlwe::RlweUseCase value) {
  
  _impl_.use_case_ = value;
}
inline void PrivateMembershipRlweQueryRequest::set_use_case(::private_membership::rlwe::RlweUseCase value) {
  _internal_set_use_case(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweQueryRequest.use_case)
}

// int64 key_version = 3;
inline void PrivateMembershipRlweQueryRequest::clear_key_version() {
  _impl_.key_version_ = int64_t{0};
}
inline int64_t PrivateMembershipRlweQueryRequest::_internal_key_version() const {
  return _impl_.key_version_;
}
inline int64_t PrivateMembershipRlweQueryRequest::key_version() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQueryRequest.key_version)
  return _internal_key_version();
}
inline void PrivateMembershipRlweQueryRequest::_internal_set_key_version(int64_t value) {
  
  _impl_.key_version_ = value;
}
inline void PrivateMembershipRlweQueryRequest::set_key_version(int64_t value) {
  _internal_set_key_version(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweQueryRequest.key_version)
}

// -------------------------------------------------------------------

// PrivateMembershipRlweQueryResponse

// repeated .private_membership.rlwe.PrivateMembershipRlwePirResponse pir_responses = 1;
inline int PrivateMembershipRlweQueryResponse::_internal_pir_responses_size() const {
  return _impl_.pir_responses_.size();
}
inline int PrivateMembershipRlweQueryResponse::pir_responses_size() const {
  return _internal_pir_responses_size();
}
inline void PrivateMembershipRlweQueryResponse::clear_pir_responses() {
  _impl_.pir_responses_.Clear();
}
inline ::private_membership::rlwe::PrivateMembershipRlwePirResponse* PrivateMembershipRlweQueryResponse::mutable_pir_responses(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweQueryResponse.pir_responses)
  return _impl_.pir_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlwePirResponse >*
PrivateMembershipRlweQueryResponse::mutable_pir_responses() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PrivateMembershipRlweQueryResponse.pir_responses)
  return &_impl_.pir_responses_;
}
inline const ::private_membership::rlwe::PrivateMembershipRlwePirResponse& PrivateMembershipRlweQueryResponse::_internal_pir_responses(int index) const {
  return _impl_.pir_responses_.Get(index);
}
inline const ::private_membership::rlwe::PrivateMembershipRlwePirResponse& PrivateMembershipRlweQueryResponse::pir_responses(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQueryResponse.pir_responses)
  return _internal_pir_responses(index);
}
inline ::private_membership::rlwe::PrivateMembershipRlwePirResponse* PrivateMembershipRlweQueryResponse::_internal_add_pir_responses() {
  return _impl_.pir_responses_.Add();
}
inline ::private_membership::rlwe::PrivateMembershipRlwePirResponse* PrivateMembershipRlweQueryResponse::add_pir_responses() {
  ::private_membership::rlwe::PrivateMembershipRlwePirResponse* _add = _internal_add_pir_responses();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PrivateMembershipRlweQueryResponse.pir_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlwePirResponse >&
PrivateMembershipRlweQueryResponse::pir_responses() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.PrivateMembershipRlweQueryResponse.pir_responses)
  return _impl_.pir_responses_;
}

// -------------------------------------------------------------------

// RlwePlaintextId

// string non_sensitive_id = 1;
inline void RlwePlaintextId::clear_non_sensitive_id() {
  _impl_.non_sensitive_id_.ClearToEmpty();
}
inline const std::string& RlwePlaintextId::non_sensitive_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlwePlaintextId.non_sensitive_id)
  return _internal_non_sensitive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RlwePlaintextId::set_non_sensitive_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.non_sensitive_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.RlwePlaintextId.non_sensitive_id)
}
inline std::string* RlwePlaintextId::mutable_non_sensitive_id() {
  std::string* _s = _internal_mutable_non_sensitive_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.RlwePlaintextId.non_sensitive_id)
  return _s;
}
inline const std::string& RlwePlaintextId::_internal_non_sensitive_id() const {
  return _impl_.non_sensitive_id_.Get();
}
inline void RlwePlaintextId::_internal_set_non_sensitive_id(const std::string& value) {
  
  _impl_.non_sensitive_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RlwePlaintextId::_internal_mutable_non_sensitive_id() {
  
  return _impl_.non_sensitive_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RlwePlaintextId::release_non_sensitive_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.RlwePlaintextId.non_sensitive_id)
  return _impl_.non_sensitive_id_.Release();
}
inline void RlwePlaintextId::set_allocated_non_sensitive_id(std::string* non_sensitive_id) {
  if (non_sensitive_id != nullptr) {
    
  } else {
    
  }
  _impl_.non_sensitive_id_.SetAllocated(non_sensitive_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.non_sensitive_id_.IsDefault()) {
    _impl_.non_sensitive_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.RlwePlaintextId.non_sensitive_id)
}

// string sensitive_id = 2;
inline void RlwePlaintextId::clear_sensitive_id() {
  _impl_.sensitive_id_.ClearToEmpty();
}
inline const std::string& RlwePlaintextId::sensitive_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlwePlaintextId.sensitive_id)
  return _internal_sensitive_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RlwePlaintextId::set_sensitive_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sensitive_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.RlwePlaintextId.sensitive_id)
}
inline std::string* RlwePlaintextId::mutable_sensitive_id() {
  std::string* _s = _internal_mutable_sensitive_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.RlwePlaintextId.sensitive_id)
  return _s;
}
inline const std::string& RlwePlaintextId::_internal_sensitive_id() const {
  return _impl_.sensitive_id_.Get();
}
inline void RlwePlaintextId::_internal_set_sensitive_id(const std::string& value) {
  
  _impl_.sensitive_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RlwePlaintextId::_internal_mutable_sensitive_id() {
  
  return _impl_.sensitive_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RlwePlaintextId::release_sensitive_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.RlwePlaintextId.sensitive_id)
  return _impl_.sensitive_id_.Release();
}
inline void RlwePlaintextId::set_allocated_sensitive_id(std::string* sensitive_id) {
  if (sensitive_id != nullptr) {
    
  } else {
    
  }
  _impl_.sensitive_id_.SetAllocated(sensitive_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sensitive_id_.IsDefault()) {
    _impl_.sensitive_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.RlwePlaintextId.sensitive_id)
}

// -------------------------------------------------------------------

// HashedBucketsParameters

// int32 hashed_bucket_id_length = 1;
inline void HashedBucketsParameters::clear_hashed_bucket_id_length() {
  _impl_.hashed_bucket_id_length_ = 0;
}
inline int32_t HashedBucketsParameters::_internal_hashed_bucket_id_length() const {
  return _impl_.hashed_bucket_id_length_;
}
inline int32_t HashedBucketsParameters::hashed_bucket_id_length() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.HashedBucketsParameters.hashed_bucket_id_length)
  return _internal_hashed_bucket_id_length();
}
inline void HashedBucketsParameters::_internal_set_hashed_bucket_id_length(int32_t value) {
  
  _impl_.hashed_bucket_id_length_ = value;
}
inline void HashedBucketsParameters::set_hashed_bucket_id_length(int32_t value) {
  _internal_set_hashed_bucket_id_length(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.HashedBucketsParameters.hashed_bucket_id_length)
}

// .private_membership.HashType non_sensitive_id_hash_type = 2;
inline void HashedBucketsParameters::clear_non_sensitive_id_hash_type() {
  _impl_.non_sensitive_id_hash_type_ = 0;
}
inline ::private_membership::HashType HashedBucketsParameters::_internal_non_sensitive_id_hash_type() const {
  return static_cast< ::private_membership::HashType >(_impl_.non_sensitive_id_hash_type_);
}
inline ::private_membership::HashType HashedBucketsParameters::non_sensitive_id_hash_type() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.HashedBucketsParameters.non_sensitive_id_hash_type)
  return _internal_non_sensitive_id_hash_type();
}
inline void HashedBucketsParameters::_internal_set_non_sensitive_id_hash_type(::private_membership::HashType value) {
  
  _impl_.non_sensitive_id_hash_type_ = value;
}
inline void HashedBucketsParameters::set_non_sensitive_id_hash_type(::private_membership::HashType value) {
  _internal_set_non_sensitive_id_hash_type(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.HashedBucketsParameters.non_sensitive_id_hash_type)
}

// -------------------------------------------------------------------

// EncryptedBucketsParameters

// int32 encrypted_bucket_id_length = 1;
inline void EncryptedBucketsParameters::clear_encrypted_bucket_id_length() {
  _impl_.encrypted_bucket_id_length_ = 0;
}
inline int32_t EncryptedBucketsParameters::_internal_encrypted_bucket_id_length() const {
  return _impl_.encrypted_bucket_id_length_;
}
inline int32_t EncryptedBucketsParameters::encrypted_bucket_id_length() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.EncryptedBucketsParameters.encrypted_bucket_id_length)
  return _internal_encrypted_bucket_id_length();
}
inline void EncryptedBucketsParameters::_internal_set_encrypted_bucket_id_length(int32_t value) {
  
  _impl_.encrypted_bucket_id_length_ = value;
}
inline void EncryptedBucketsParameters::set_encrypted_bucket_id_length(int32_t value) {
  _internal_set_encrypted_bucket_id_length(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.EncryptedBucketsParameters.encrypted_bucket_id_length)
}

// .private_membership.EncryptedBucketHashType sensitive_id_hash_type = 2;
inline void EncryptedBucketsParameters::clear_sensitive_id_hash_type() {
  _impl_.sensitive_id_hash_type_ = 0;
}
inline ::private_membership::EncryptedBucketHashType EncryptedBucketsParameters::_internal_sensitive_id_hash_type() const {
  return static_cast< ::private_membership::EncryptedBucketHashType >(_impl_.sensitive_id_hash_type_);
}
inline ::private_membership::EncryptedBucketHashType EncryptedBucketsParameters::sensitive_id_hash_type() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.EncryptedBucketsParameters.sensitive_id_hash_type)
  return _internal_sensitive_id_hash_type();
}
inline void EncryptedBucketsParameters::_internal_set_sensitive_id_hash_type(::private_membership::EncryptedBucketHashType value) {
  
  _impl_.sensitive_id_hash_type_ = value;
}
inline void EncryptedBucketsParameters::set_sensitive_id_hash_type(::private_membership::EncryptedBucketHashType value) {
  _internal_set_sensitive_id_hash_type(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.EncryptedBucketsParameters.sensitive_id_hash_type)
}

// -------------------------------------------------------------------

// RlweParameters

// repeated .private_membership.rlwe.Uint128 modulus = 1;
inline int RlweParameters::_internal_modulus_size() const {
  return _impl_.modulus_.size();
}
inline int RlweParameters::modulus_size() const {
  return _internal_modulus_size();
}
inline void RlweParameters::clear_modulus() {
  _impl_.modulus_.Clear();
}
inline ::private_membership::rlwe::Uint128* RlweParameters::mutable_modulus(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.RlweParameters.modulus)
  return _impl_.modulus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::Uint128 >*
RlweParameters::mutable_modulus() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.RlweParameters.modulus)
  return &_impl_.modulus_;
}
inline const ::private_membership::rlwe::Uint128& RlweParameters::_internal_modulus(int index) const {
  return _impl_.modulus_.Get(index);
}
inline const ::private_membership::rlwe::Uint128& RlweParameters::modulus(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweParameters.modulus)
  return _internal_modulus(index);
}
inline ::private_membership::rlwe::Uint128* RlweParameters::_internal_add_modulus() {
  return _impl_.modulus_.Add();
}
inline ::private_membership::rlwe::Uint128* RlweParameters::add_modulus() {
  ::private_membership::rlwe::Uint128* _add = _internal_add_modulus();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.RlweParameters.modulus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::Uint128 >&
RlweParameters::modulus() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.RlweParameters.modulus)
  return _impl_.modulus_;
}

// int32 log_degree = 2;
inline void RlweParameters::clear_log_degree() {
  _impl_.log_degree_ = 0;
}
inline int32_t RlweParameters::_internal_log_degree() const {
  return _impl_.log_degree_;
}
inline int32_t RlweParameters::log_degree() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweParameters.log_degree)
  return _internal_log_degree();
}
inline void RlweParameters::_internal_set_log_degree(int32_t value) {
  
  _impl_.log_degree_ = value;
}
inline void RlweParameters::set_log_degree(int32_t value) {
  _internal_set_log_degree(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.RlweParameters.log_degree)
}

// int32 log_t = 3;
inline void RlweParameters::clear_log_t() {
  _impl_.log_t_ = 0;
}
inline int32_t RlweParameters::_internal_log_t() const {
  return _impl_.log_t_;
}
inline int32_t RlweParameters::log_t() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweParameters.log_t)
  return _internal_log_t();
}
inline void RlweParameters::_internal_set_log_t(int32_t value) {
  
  _impl_.log_t_ = value;
}
inline void RlweParameters::set_log_t(int32_t value) {
  _internal_set_log_t(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.RlweParameters.log_t)
}

// int32 variance = 4;
inline void RlweParameters::clear_variance() {
  _impl_.variance_ = 0;
}
inline int32_t RlweParameters::_internal_variance() const {
  return _impl_.variance_;
}
inline int32_t RlweParameters::variance() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweParameters.variance)
  return _internal_variance();
}
inline void RlweParameters::_internal_set_variance(int32_t value) {
  
  _impl_.variance_ = value;
}
inline void RlweParameters::set_variance(int32_t value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.RlweParameters.variance)
}

// int32 levels_of_recursion = 5;
inline void RlweParameters::clear_levels_of_recursion() {
  _impl_.levels_of_recursion_ = 0;
}
inline int32_t RlweParameters::_internal_levels_of_recursion() const {
  return _impl_.levels_of_recursion_;
}
inline int32_t RlweParameters::levels_of_recursion() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweParameters.levels_of_recursion)
  return _internal_levels_of_recursion();
}
inline void RlweParameters::_internal_set_levels_of_recursion(int32_t value) {
  
  _impl_.levels_of_recursion_ = value;
}
inline void RlweParameters::set_levels_of_recursion(int32_t value) {
  _internal_set_levels_of_recursion(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.RlweParameters.levels_of_recursion)
}

// -------------------------------------------------------------------

// Uint128

// uint64 lo = 1;
inline void Uint128::clear_lo() {
  _impl_.lo_ = uint64_t{0u};
}
inline uint64_t Uint128::_internal_lo() const {
  return _impl_.lo_;
}
inline uint64_t Uint128::lo() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.Uint128.lo)
  return _internal_lo();
}
inline void Uint128::_internal_set_lo(uint64_t value) {
  
  _impl_.lo_ = value;
}
inline void Uint128::set_lo(uint64_t value) {
  _internal_set_lo(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.Uint128.lo)
}

// uint64 hi = 2;
inline void Uint128::clear_hi() {
  _impl_.hi_ = uint64_t{0u};
}
inline uint64_t Uint128::_internal_hi() const {
  return _impl_.hi_;
}
inline uint64_t Uint128::hi() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.Uint128.hi)
  return _internal_hi();
}
inline void Uint128::_internal_set_hi(uint64_t value) {
  
  _impl_.hi_ = value;
}
inline void Uint128::set_hi(uint64_t value) {
  _internal_set_hi(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.Uint128.hi)
}

// -------------------------------------------------------------------

// PrivateMembershipRlweQuery_HashedBucketId

// bytes hashed_bucket_id = 1;
inline void PrivateMembershipRlweQuery_HashedBucketId::clear_hashed_bucket_id() {
  _impl_.hashed_bucket_id_.ClearToEmpty();
}
inline const std::string& PrivateMembershipRlweQuery_HashedBucketId::hashed_bucket_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.hashed_bucket_id)
  return _internal_hashed_bucket_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMembershipRlweQuery_HashedBucketId::set_hashed_bucket_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hashed_bucket_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.hashed_bucket_id)
}
inline std::string* PrivateMembershipRlweQuery_HashedBucketId::mutable_hashed_bucket_id() {
  std::string* _s = _internal_mutable_hashed_bucket_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.hashed_bucket_id)
  return _s;
}
inline const std::string& PrivateMembershipRlweQuery_HashedBucketId::_internal_hashed_bucket_id() const {
  return _impl_.hashed_bucket_id_.Get();
}
inline void PrivateMembershipRlweQuery_HashedBucketId::_internal_set_hashed_bucket_id(const std::string& value) {
  
  _impl_.hashed_bucket_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweQuery_HashedBucketId::_internal_mutable_hashed_bucket_id() {
  
  return _impl_.hashed_bucket_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweQuery_HashedBucketId::release_hashed_bucket_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.hashed_bucket_id)
  return _impl_.hashed_bucket_id_.Release();
}
inline void PrivateMembershipRlweQuery_HashedBucketId::set_allocated_hashed_bucket_id(std::string* hashed_bucket_id) {
  if (hashed_bucket_id != nullptr) {
    
  } else {
    
  }
  _impl_.hashed_bucket_id_.SetAllocated(hashed_bucket_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hashed_bucket_id_.IsDefault()) {
    _impl_.hashed_bucket_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.hashed_bucket_id)
}

// int32 bit_length = 2;
inline void PrivateMembershipRlweQuery_HashedBucketId::clear_bit_length() {
  _impl_.bit_length_ = 0;
}
inline int32_t PrivateMembershipRlweQuery_HashedBucketId::_internal_bit_length() const {
  return _impl_.bit_length_;
}
inline int32_t PrivateMembershipRlweQuery_HashedBucketId::bit_length() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.bit_length)
  return _internal_bit_length();
}
inline void PrivateMembershipRlweQuery_HashedBucketId::_internal_set_bit_length(int32_t value) {
  
  _impl_.bit_length_ = value;
}
inline void PrivateMembershipRlweQuery_HashedBucketId::set_bit_length(int32_t value) {
  _internal_set_bit_length(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId.bit_length)
}

// -------------------------------------------------------------------

// PrivateMembershipRlweQuery

// bytes queried_encrypted_id = 1;
inline void PrivateMembershipRlweQuery::clear_queried_encrypted_id() {
  _impl_.queried_encrypted_id_.ClearToEmpty();
}
inline const std::string& PrivateMembershipRlweQuery::queried_encrypted_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQuery.queried_encrypted_id)
  return _internal_queried_encrypted_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMembershipRlweQuery::set_queried_encrypted_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.queried_encrypted_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweQuery.queried_encrypted_id)
}
inline std::string* PrivateMembershipRlweQuery::mutable_queried_encrypted_id() {
  std::string* _s = _internal_mutable_queried_encrypted_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweQuery.queried_encrypted_id)
  return _s;
}
inline const std::string& PrivateMembershipRlweQuery::_internal_queried_encrypted_id() const {
  return _impl_.queried_encrypted_id_.Get();
}
inline void PrivateMembershipRlweQuery::_internal_set_queried_encrypted_id(const std::string& value) {
  
  _impl_.queried_encrypted_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweQuery::_internal_mutable_queried_encrypted_id() {
  
  return _impl_.queried_encrypted_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweQuery::release_queried_encrypted_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweQuery.queried_encrypted_id)
  return _impl_.queried_encrypted_id_.Release();
}
inline void PrivateMembershipRlweQuery::set_allocated_queried_encrypted_id(std::string* queried_encrypted_id) {
  if (queried_encrypted_id != nullptr) {
    
  } else {
    
  }
  _impl_.queried_encrypted_id_.SetAllocated(queried_encrypted_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.queried_encrypted_id_.IsDefault()) {
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweQuery.queried_encrypted_id)
}

// .private_membership.rlwe.PirRequest pir_request = 2;
inline bool PrivateMembershipRlweQuery::_internal_has_pir_request() const {
  return this != internal_default_instance() && _impl_.pir_request_ != nullptr;
}
inline bool PrivateMembershipRlweQuery::has_pir_request() const {
  return _internal_has_pir_request();
}
inline void PrivateMembershipRlweQuery::clear_pir_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.pir_request_ != nullptr) {
    delete _impl_.pir_request_;
  }
  _impl_.pir_request_ = nullptr;
}
inline const ::private_membership::rlwe::PirRequest& PrivateMembershipRlweQuery::_internal_pir_request() const {
  const ::private_membership::rlwe::PirRequest* p = _impl_.pir_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PirRequest&>(
      ::private_membership::rlwe::_PirRequest_default_instance_);
}
inline const ::private_membership::rlwe::PirRequest& PrivateMembershipRlweQuery::pir_request() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQuery.pir_request)
  return _internal_pir_request();
}
inline void PrivateMembershipRlweQuery::unsafe_arena_set_allocated_pir_request(
    ::private_membership::rlwe::PirRequest* pir_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pir_request_);
  }
  _impl_.pir_request_ = pir_request;
  if (pir_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweQuery.pir_request)
}
inline ::private_membership::rlwe::PirRequest* PrivateMembershipRlweQuery::release_pir_request() {
  
  ::private_membership::rlwe::PirRequest* temp = _impl_.pir_request_;
  _impl_.pir_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::PirRequest* PrivateMembershipRlweQuery::unsafe_arena_release_pir_request() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweQuery.pir_request)
  
  ::private_membership::rlwe::PirRequest* temp = _impl_.pir_request_;
  _impl_.pir_request_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::PirRequest* PrivateMembershipRlweQuery::_internal_mutable_pir_request() {
  
  if (_impl_.pir_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::PirRequest>(GetArenaForAllocation());
    _impl_.pir_request_ = p;
  }
  return _impl_.pir_request_;
}
inline ::private_membership::rlwe::PirRequest* PrivateMembershipRlweQuery::mutable_pir_request() {
  ::private_membership::rlwe::PirRequest* _msg = _internal_mutable_pir_request();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweQuery.pir_request)
  return _msg;
}
inline void PrivateMembershipRlweQuery::set_allocated_pir_request(::private_membership::rlwe::PirRequest* pir_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pir_request_;
  }
  if (pir_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pir_request);
    if (message_arena != submessage_arena) {
      pir_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pir_request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pir_request_ = pir_request;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweQuery.pir_request)
}

// .private_membership.rlwe.PrivateMembershipRlweQuery.HashedBucketId hashed_bucket_id = 3;
inline bool PrivateMembershipRlweQuery::_internal_has_hashed_bucket_id() const {
  return this != internal_default_instance() && _impl_.hashed_bucket_id_ != nullptr;
}
inline bool PrivateMembershipRlweQuery::has_hashed_bucket_id() const {
  return _internal_has_hashed_bucket_id();
}
inline void PrivateMembershipRlweQuery::clear_hashed_bucket_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.hashed_bucket_id_ != nullptr) {
    delete _impl_.hashed_bucket_id_;
  }
  _impl_.hashed_bucket_id_ = nullptr;
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId& PrivateMembershipRlweQuery::_internal_hashed_bucket_id() const {
  const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* p = _impl_.hashed_bucket_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId&>(
      ::private_membership::rlwe::_PrivateMembershipRlweQuery_HashedBucketId_default_instance_);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId& PrivateMembershipRlweQuery::hashed_bucket_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweQuery.hashed_bucket_id)
  return _internal_hashed_bucket_id();
}
inline void PrivateMembershipRlweQuery::unsafe_arena_set_allocated_hashed_bucket_id(
    ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* hashed_bucket_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.hashed_bucket_id_);
  }
  _impl_.hashed_bucket_id_ = hashed_bucket_id;
  if (hashed_bucket_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweQuery.hashed_bucket_id)
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* PrivateMembershipRlweQuery::release_hashed_bucket_id() {
  
  ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* temp = _impl_.hashed_bucket_id_;
  _impl_.hashed_bucket_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* PrivateMembershipRlweQuery::unsafe_arena_release_hashed_bucket_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweQuery.hashed_bucket_id)
  
  ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* temp = _impl_.hashed_bucket_id_;
  _impl_.hashed_bucket_id_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* PrivateMembershipRlweQuery::_internal_mutable_hashed_bucket_id() {
  
  if (_impl_.hashed_bucket_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId>(GetArenaForAllocation());
    _impl_.hashed_bucket_id_ = p;
  }
  return _impl_.hashed_bucket_id_;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* PrivateMembershipRlweQuery::mutable_hashed_bucket_id() {
  ::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* _msg = _internal_mutable_hashed_bucket_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweQuery.hashed_bucket_id)
  return _msg;
}
inline void PrivateMembershipRlweQuery::set_allocated_hashed_bucket_id(::private_membership::rlwe::PrivateMembershipRlweQuery_HashedBucketId* hashed_bucket_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.hashed_bucket_id_;
  }
  if (hashed_bucket_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hashed_bucket_id);
    if (message_arena != submessage_arena) {
      hashed_bucket_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hashed_bucket_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.hashed_bucket_id_ = hashed_bucket_id;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweQuery.hashed_bucket_id)
}

// -------------------------------------------------------------------

// PrivateMembershipRlwePirResponse

// bytes queried_encrypted_id = 1;
inline void PrivateMembershipRlwePirResponse::clear_queried_encrypted_id() {
  _impl_.queried_encrypted_id_.ClearToEmpty();
}
inline const std::string& PrivateMembershipRlwePirResponse::queried_encrypted_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlwePirResponse.queried_encrypted_id)
  return _internal_queried_encrypted_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMembershipRlwePirResponse::set_queried_encrypted_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.queried_encrypted_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlwePirResponse.queried_encrypted_id)
}
inline std::string* PrivateMembershipRlwePirResponse::mutable_queried_encrypted_id() {
  std::string* _s = _internal_mutable_queried_encrypted_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlwePirResponse.queried_encrypted_id)
  return _s;
}
inline const std::string& PrivateMembershipRlwePirResponse::_internal_queried_encrypted_id() const {
  return _impl_.queried_encrypted_id_.Get();
}
inline void PrivateMembershipRlwePirResponse::_internal_set_queried_encrypted_id(const std::string& value) {
  
  _impl_.queried_encrypted_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlwePirResponse::_internal_mutable_queried_encrypted_id() {
  
  return _impl_.queried_encrypted_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlwePirResponse::release_queried_encrypted_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlwePirResponse.queried_encrypted_id)
  return _impl_.queried_encrypted_id_.Release();
}
inline void PrivateMembershipRlwePirResponse::set_allocated_queried_encrypted_id(std::string* queried_encrypted_id) {
  if (queried_encrypted_id != nullptr) {
    
  } else {
    
  }
  _impl_.queried_encrypted_id_.SetAllocated(queried_encrypted_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.queried_encrypted_id_.IsDefault()) {
    _impl_.queried_encrypted_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlwePirResponse.queried_encrypted_id)
}

// .private_membership.rlwe.PirResponse pir_response = 2;
inline bool PrivateMembershipRlwePirResponse::_internal_has_pir_response() const {
  return this != internal_default_instance() && _impl_.pir_response_ != nullptr;
}
inline bool PrivateMembershipRlwePirResponse::has_pir_response() const {
  return _internal_has_pir_response();
}
inline void PrivateMembershipRlwePirResponse::clear_pir_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.pir_response_ != nullptr) {
    delete _impl_.pir_response_;
  }
  _impl_.pir_response_ = nullptr;
}
inline const ::private_membership::rlwe::PirResponse& PrivateMembershipRlwePirResponse::_internal_pir_response() const {
  const ::private_membership::rlwe::PirResponse* p = _impl_.pir_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PirResponse&>(
      ::private_membership::rlwe::_PirResponse_default_instance_);
}
inline const ::private_membership::rlwe::PirResponse& PrivateMembershipRlwePirResponse::pir_response() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlwePirResponse.pir_response)
  return _internal_pir_response();
}
inline void PrivateMembershipRlwePirResponse::unsafe_arena_set_allocated_pir_response(
    ::private_membership::rlwe::PirResponse* pir_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pir_response_);
  }
  _impl_.pir_response_ = pir_response;
  if (pir_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlwePirResponse.pir_response)
}
inline ::private_membership::rlwe::PirResponse* PrivateMembershipRlwePirResponse::release_pir_response() {
  
  ::private_membership::rlwe::PirResponse* temp = _impl_.pir_response_;
  _impl_.pir_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::PirResponse* PrivateMembershipRlwePirResponse::unsafe_arena_release_pir_response() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlwePirResponse.pir_response)
  
  ::private_membership::rlwe::PirResponse* temp = _impl_.pir_response_;
  _impl_.pir_response_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::PirResponse* PrivateMembershipRlwePirResponse::_internal_mutable_pir_response() {
  
  if (_impl_.pir_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::PirResponse>(GetArenaForAllocation());
    _impl_.pir_response_ = p;
  }
  return _impl_.pir_response_;
}
inline ::private_membership::rlwe::PirResponse* PrivateMembershipRlwePirResponse::mutable_pir_response() {
  ::private_membership::rlwe::PirResponse* _msg = _internal_mutable_pir_response();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlwePirResponse.pir_response)
  return _msg;
}
inline void PrivateMembershipRlwePirResponse::set_allocated_pir_response(::private_membership::rlwe::PirResponse* pir_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pir_response_;
  }
  if (pir_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pir_response);
    if (message_arena != submessage_arena) {
      pir_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pir_response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pir_response_ = pir_response;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlwePirResponse.pir_response)
}

// -------------------------------------------------------------------

// PirRequest

// repeated .rlwe.SerializedNttPolynomial request = 1;
inline int PirRequest::_internal_request_size() const {
  return _impl_.request_.size();
}
inline int PirRequest::request_size() const {
  return _internal_request_size();
}
inline ::rlwe::SerializedNttPolynomial* PirRequest::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PirRequest.request)
  return _impl_.request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >*
PirRequest::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PirRequest.request)
  return &_impl_.request_;
}
inline const ::rlwe::SerializedNttPolynomial& PirRequest::_internal_request(int index) const {
  return _impl_.request_.Get(index);
}
inline const ::rlwe::SerializedNttPolynomial& PirRequest::request(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PirRequest.request)
  return _internal_request(index);
}
inline ::rlwe::SerializedNttPolynomial* PirRequest::_internal_add_request() {
  return _impl_.request_.Add();
}
inline ::rlwe::SerializedNttPolynomial* PirRequest::add_request() {
  ::rlwe::SerializedNttPolynomial* _add = _internal_add_request();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PirRequest.request)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedNttPolynomial >&
PirRequest::request() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.PirRequest.request)
  return _impl_.request_;
}

// bytes prng_seed = 2;
inline void PirRequest::clear_prng_seed() {
  _impl_.prng_seed_.ClearToEmpty();
}
inline const std::string& PirRequest::prng_seed() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PirRequest.prng_seed)
  return _internal_prng_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PirRequest::set_prng_seed(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prng_seed_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PirRequest.prng_seed)
}
inline std::string* PirRequest::mutable_prng_seed() {
  std::string* _s = _internal_mutable_prng_seed();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PirRequest.prng_seed)
  return _s;
}
inline const std::string& PirRequest::_internal_prng_seed() const {
  return _impl_.prng_seed_.Get();
}
inline void PirRequest::_internal_set_prng_seed(const std::string& value) {
  
  _impl_.prng_seed_.Set(value, GetArenaForAllocation());
}
inline std::string* PirRequest::_internal_mutable_prng_seed() {
  
  return _impl_.prng_seed_.Mutable(GetArenaForAllocation());
}
inline std::string* PirRequest::release_prng_seed() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.PirRequest.prng_seed)
  return _impl_.prng_seed_.Release();
}
inline void PirRequest::set_allocated_prng_seed(std::string* prng_seed) {
  if (prng_seed != nullptr) {
    
  } else {
    
  }
  _impl_.prng_seed_.SetAllocated(prng_seed, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prng_seed_.IsDefault()) {
    _impl_.prng_seed_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PirRequest.prng_seed)
}

// -------------------------------------------------------------------

// PirResponse

// repeated .rlwe.SerializedSymmetricRlweCiphertext response = 1;
inline int PirResponse::_internal_response_size() const {
  return _impl_.response_.size();
}
inline int PirResponse::response_size() const {
  return _internal_response_size();
}
inline ::rlwe::SerializedSymmetricRlweCiphertext* PirResponse::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.PirResponse.response)
  return _impl_.response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedSymmetricRlweCiphertext >*
PirResponse::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PirResponse.response)
  return &_impl_.response_;
}
inline const ::rlwe::SerializedSymmetricRlweCiphertext& PirResponse::_internal_response(int index) const {
  return _impl_.response_.Get(index);
}
inline const ::rlwe::SerializedSymmetricRlweCiphertext& PirResponse::response(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PirResponse.response)
  return _internal_response(index);
}
inline ::rlwe::SerializedSymmetricRlweCiphertext* PirResponse::_internal_add_response() {
  return _impl_.response_.Add();
}
inline ::rlwe::SerializedSymmetricRlweCiphertext* PirResponse::add_response() {
  ::rlwe::SerializedSymmetricRlweCiphertext* _add = _internal_add_response();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.PirResponse.response)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rlwe::SerializedSymmetricRlweCiphertext >&
PirResponse::response() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.PirResponse.response)
  return _impl_.response_;
}

// int32 plaintext_entry_size = 2;
inline void PirResponse::clear_plaintext_entry_size() {
  _impl_.plaintext_entry_size_ = 0;
}
inline int32_t PirResponse::_internal_plaintext_entry_size() const {
  return _impl_.plaintext_entry_size_;
}
inline int32_t PirResponse::plaintext_entry_size() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.PirResponse.plaintext_entry_size)
  return _internal_plaintext_entry_size();
}
inline void PirResponse::_internal_set_plaintext_entry_size(int32_t value) {
  
  _impl_.plaintext_entry_size_ = value;
}
inline void PirResponse::set_plaintext_entry_size(int32_t value) {
  _internal_set_plaintext_entry_size(value);
  // @@protoc_insertion_point(field_set:private_membership.rlwe.PirResponse.plaintext_entry_size)
}

// -------------------------------------------------------------------

// EncryptedBucket_EncryptedIdValuePair

// bytes encrypted_id = 1;
inline void EncryptedBucket_EncryptedIdValuePair::clear_encrypted_id() {
  _impl_.encrypted_id_.ClearToEmpty();
}
inline const std::string& EncryptedBucket_EncryptedIdValuePair::encrypted_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_id)
  return _internal_encrypted_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedBucket_EncryptedIdValuePair::set_encrypted_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encrypted_id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_id)
}
inline std::string* EncryptedBucket_EncryptedIdValuePair::mutable_encrypted_id() {
  std::string* _s = _internal_mutable_encrypted_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_id)
  return _s;
}
inline const std::string& EncryptedBucket_EncryptedIdValuePair::_internal_encrypted_id() const {
  return _impl_.encrypted_id_.Get();
}
inline void EncryptedBucket_EncryptedIdValuePair::_internal_set_encrypted_id(const std::string& value) {
  
  _impl_.encrypted_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedBucket_EncryptedIdValuePair::_internal_mutable_encrypted_id() {
  
  return _impl_.encrypted_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedBucket_EncryptedIdValuePair::release_encrypted_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_id)
  return _impl_.encrypted_id_.Release();
}
inline void EncryptedBucket_EncryptedIdValuePair::set_allocated_encrypted_id(std::string* encrypted_id) {
  if (encrypted_id != nullptr) {
    
  } else {
    
  }
  _impl_.encrypted_id_.SetAllocated(encrypted_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encrypted_id_.IsDefault()) {
    _impl_.encrypted_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_id)
}

// bytes encrypted_value = 2;
inline void EncryptedBucket_EncryptedIdValuePair::clear_encrypted_value() {
  _impl_.encrypted_value_.ClearToEmpty();
}
inline const std::string& EncryptedBucket_EncryptedIdValuePair::encrypted_value() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_value)
  return _internal_encrypted_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptedBucket_EncryptedIdValuePair::set_encrypted_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.encrypted_value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_value)
}
inline std::string* EncryptedBucket_EncryptedIdValuePair::mutable_encrypted_value() {
  std::string* _s = _internal_mutable_encrypted_value();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_value)
  return _s;
}
inline const std::string& EncryptedBucket_EncryptedIdValuePair::_internal_encrypted_value() const {
  return _impl_.encrypted_value_.Get();
}
inline void EncryptedBucket_EncryptedIdValuePair::_internal_set_encrypted_value(const std::string& value) {
  
  _impl_.encrypted_value_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedBucket_EncryptedIdValuePair::_internal_mutable_encrypted_value() {
  
  return _impl_.encrypted_value_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptedBucket_EncryptedIdValuePair::release_encrypted_value() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_value)
  return _impl_.encrypted_value_.Release();
}
inline void EncryptedBucket_EncryptedIdValuePair::set_allocated_encrypted_value(std::string* encrypted_value) {
  if (encrypted_value != nullptr) {
    
  } else {
    
  }
  _impl_.encrypted_value_.SetAllocated(encrypted_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.encrypted_value_.IsDefault()) {
    _impl_.encrypted_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.encrypted_value)
}

// .private_membership.rlwe.RlwePlaintextId id = 3;
inline bool EncryptedBucket_EncryptedIdValuePair::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool EncryptedBucket_EncryptedIdValuePair::has_id() const {
  return _internal_has_id();
}
inline void EncryptedBucket_EncryptedIdValuePair::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
inline const ::private_membership::rlwe::RlwePlaintextId& EncryptedBucket_EncryptedIdValuePair::_internal_id() const {
  const ::private_membership::rlwe::RlwePlaintextId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::RlwePlaintextId&>(
      ::private_membership::rlwe::_RlwePlaintextId_default_instance_);
}
inline const ::private_membership::rlwe::RlwePlaintextId& EncryptedBucket_EncryptedIdValuePair::id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.id)
  return _internal_id();
}
inline void EncryptedBucket_EncryptedIdValuePair::unsafe_arena_set_allocated_id(
    ::private_membership::rlwe::RlwePlaintextId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.id)
}
inline ::private_membership::rlwe::RlwePlaintextId* EncryptedBucket_EncryptedIdValuePair::release_id() {
  
  ::private_membership::rlwe::RlwePlaintextId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::RlwePlaintextId* EncryptedBucket_EncryptedIdValuePair::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.id)
  
  ::private_membership::rlwe::RlwePlaintextId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::RlwePlaintextId* EncryptedBucket_EncryptedIdValuePair::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::RlwePlaintextId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::private_membership::rlwe::RlwePlaintextId* EncryptedBucket_EncryptedIdValuePair::mutable_id() {
  ::private_membership::rlwe::RlwePlaintextId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.id)
  return _msg;
}
inline void EncryptedBucket_EncryptedIdValuePair::set_allocated_id(::private_membership::rlwe::RlwePlaintextId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair.id)
}

// -------------------------------------------------------------------

// EncryptedBucket

// repeated .private_membership.rlwe.EncryptedBucket.EncryptedIdValuePair encrypted_id_value_pairs = 1;
inline int EncryptedBucket::_internal_encrypted_id_value_pairs_size() const {
  return _impl_.encrypted_id_value_pairs_.size();
}
inline int EncryptedBucket::encrypted_id_value_pairs_size() const {
  return _internal_encrypted_id_value_pairs_size();
}
inline void EncryptedBucket::clear_encrypted_id_value_pairs() {
  _impl_.encrypted_id_value_pairs_.Clear();
}
inline ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* EncryptedBucket::mutable_encrypted_id_value_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.EncryptedBucket.encrypted_id_value_pairs)
  return _impl_.encrypted_id_value_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair >*
EncryptedBucket::mutable_encrypted_id_value_pairs() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.EncryptedBucket.encrypted_id_value_pairs)
  return &_impl_.encrypted_id_value_pairs_;
}
inline const ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair& EncryptedBucket::_internal_encrypted_id_value_pairs(int index) const {
  return _impl_.encrypted_id_value_pairs_.Get(index);
}
inline const ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair& EncryptedBucket::encrypted_id_value_pairs(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.EncryptedBucket.encrypted_id_value_pairs)
  return _internal_encrypted_id_value_pairs(index);
}
inline ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* EncryptedBucket::_internal_add_encrypted_id_value_pairs() {
  return _impl_.encrypted_id_value_pairs_.Add();
}
inline ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* EncryptedBucket::add_encrypted_id_value_pairs() {
  ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair* _add = _internal_add_encrypted_id_value_pairs();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.EncryptedBucket.encrypted_id_value_pairs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::EncryptedBucket_EncryptedIdValuePair >&
EncryptedBucket::encrypted_id_value_pairs() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.EncryptedBucket.encrypted_id_value_pairs)
  return _impl_.encrypted_id_value_pairs_;
}

// -------------------------------------------------------------------

// RlweMembershipResponses_MembershipResponseEntry

// .private_membership.rlwe.RlwePlaintextId plaintext_id = 1;
inline bool RlweMembershipResponses_MembershipResponseEntry::_internal_has_plaintext_id() const {
  return this != internal_default_instance() && _impl_.plaintext_id_ != nullptr;
}
inline bool RlweMembershipResponses_MembershipResponseEntry::has_plaintext_id() const {
  return _internal_has_plaintext_id();
}
inline void RlweMembershipResponses_MembershipResponseEntry::clear_plaintext_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.plaintext_id_ != nullptr) {
    delete _impl_.plaintext_id_;
  }
  _impl_.plaintext_id_ = nullptr;
}
inline const ::private_membership::rlwe::RlwePlaintextId& RlweMembershipResponses_MembershipResponseEntry::_internal_plaintext_id() const {
  const ::private_membership::rlwe::RlwePlaintextId* p = _impl_.plaintext_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::RlwePlaintextId&>(
      ::private_membership::rlwe::_RlwePlaintextId_default_instance_);
}
inline const ::private_membership::rlwe::RlwePlaintextId& RlweMembershipResponses_MembershipResponseEntry::plaintext_id() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.plaintext_id)
  return _internal_plaintext_id();
}
inline void RlweMembershipResponses_MembershipResponseEntry::unsafe_arena_set_allocated_plaintext_id(
    ::private_membership::rlwe::RlwePlaintextId* plaintext_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plaintext_id_);
  }
  _impl_.plaintext_id_ = plaintext_id;
  if (plaintext_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.plaintext_id)
}
inline ::private_membership::rlwe::RlwePlaintextId* RlweMembershipResponses_MembershipResponseEntry::release_plaintext_id() {
  
  ::private_membership::rlwe::RlwePlaintextId* temp = _impl_.plaintext_id_;
  _impl_.plaintext_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::rlwe::RlwePlaintextId* RlweMembershipResponses_MembershipResponseEntry::unsafe_arena_release_plaintext_id() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.plaintext_id)
  
  ::private_membership::rlwe::RlwePlaintextId* temp = _impl_.plaintext_id_;
  _impl_.plaintext_id_ = nullptr;
  return temp;
}
inline ::private_membership::rlwe::RlwePlaintextId* RlweMembershipResponses_MembershipResponseEntry::_internal_mutable_plaintext_id() {
  
  if (_impl_.plaintext_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::rlwe::RlwePlaintextId>(GetArenaForAllocation());
    _impl_.plaintext_id_ = p;
  }
  return _impl_.plaintext_id_;
}
inline ::private_membership::rlwe::RlwePlaintextId* RlweMembershipResponses_MembershipResponseEntry::mutable_plaintext_id() {
  ::private_membership::rlwe::RlwePlaintextId* _msg = _internal_mutable_plaintext_id();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.plaintext_id)
  return _msg;
}
inline void RlweMembershipResponses_MembershipResponseEntry::set_allocated_plaintext_id(::private_membership::rlwe::RlwePlaintextId* plaintext_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.plaintext_id_;
  }
  if (plaintext_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plaintext_id);
    if (message_arena != submessage_arena) {
      plaintext_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plaintext_id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.plaintext_id_ = plaintext_id;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.plaintext_id)
}

// .private_membership.MembershipResponse membership_response = 2;
inline bool RlweMembershipResponses_MembershipResponseEntry::_internal_has_membership_response() const {
  return this != internal_default_instance() && _impl_.membership_response_ != nullptr;
}
inline bool RlweMembershipResponses_MembershipResponseEntry::has_membership_response() const {
  return _internal_has_membership_response();
}
inline const ::private_membership::MembershipResponse& RlweMembershipResponses_MembershipResponseEntry::_internal_membership_response() const {
  const ::private_membership::MembershipResponse* p = _impl_.membership_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::private_membership::MembershipResponse&>(
      ::private_membership::_MembershipResponse_default_instance_);
}
inline const ::private_membership::MembershipResponse& RlweMembershipResponses_MembershipResponseEntry::membership_response() const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.membership_response)
  return _internal_membership_response();
}
inline void RlweMembershipResponses_MembershipResponseEntry::unsafe_arena_set_allocated_membership_response(
    ::private_membership::MembershipResponse* membership_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.membership_response_);
  }
  _impl_.membership_response_ = membership_response;
  if (membership_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.membership_response)
}
inline ::private_membership::MembershipResponse* RlweMembershipResponses_MembershipResponseEntry::release_membership_response() {
  
  ::private_membership::MembershipResponse* temp = _impl_.membership_response_;
  _impl_.membership_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::private_membership::MembershipResponse* RlweMembershipResponses_MembershipResponseEntry::unsafe_arena_release_membership_response() {
  // @@protoc_insertion_point(field_release:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.membership_response)
  
  ::private_membership::MembershipResponse* temp = _impl_.membership_response_;
  _impl_.membership_response_ = nullptr;
  return temp;
}
inline ::private_membership::MembershipResponse* RlweMembershipResponses_MembershipResponseEntry::_internal_mutable_membership_response() {
  
  if (_impl_.membership_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::private_membership::MembershipResponse>(GetArenaForAllocation());
    _impl_.membership_response_ = p;
  }
  return _impl_.membership_response_;
}
inline ::private_membership::MembershipResponse* RlweMembershipResponses_MembershipResponseEntry::mutable_membership_response() {
  ::private_membership::MembershipResponse* _msg = _internal_mutable_membership_response();
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.membership_response)
  return _msg;
}
inline void RlweMembershipResponses_MembershipResponseEntry::set_allocated_membership_response(::private_membership::MembershipResponse* membership_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.membership_response_);
  }
  if (membership_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(membership_response));
    if (message_arena != submessage_arena) {
      membership_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, membership_response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.membership_response_ = membership_response;
  // @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry.membership_response)
}

// -------------------------------------------------------------------

// RlweMembershipResponses

// repeated .private_membership.rlwe.RlweMembershipResponses.MembershipResponseEntry membership_responses = 1;
inline int RlweMembershipResponses::_internal_membership_responses_size() const {
  return _impl_.membership_responses_.size();
}
inline int RlweMembershipResponses::membership_responses_size() const {
  return _internal_membership_responses_size();
}
inline void RlweMembershipResponses::clear_membership_responses() {
  _impl_.membership_responses_.Clear();
}
inline ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* RlweMembershipResponses::mutable_membership_responses(int index) {
  // @@protoc_insertion_point(field_mutable:private_membership.rlwe.RlweMembershipResponses.membership_responses)
  return _impl_.membership_responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry >*
RlweMembershipResponses::mutable_membership_responses() {
  // @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.RlweMembershipResponses.membership_responses)
  return &_impl_.membership_responses_;
}
inline const ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry& RlweMembershipResponses::_internal_membership_responses(int index) const {
  return _impl_.membership_responses_.Get(index);
}
inline const ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry& RlweMembershipResponses::membership_responses(int index) const {
  // @@protoc_insertion_point(field_get:private_membership.rlwe.RlweMembershipResponses.membership_responses)
  return _internal_membership_responses(index);
}
inline ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* RlweMembershipResponses::_internal_add_membership_responses() {
  return _impl_.membership_responses_.Add();
}
inline ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* RlweMembershipResponses::add_membership_responses() {
  ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry* _add = _internal_add_membership_responses();
  // @@protoc_insertion_point(field_add:private_membership.rlwe.RlweMembershipResponses.membership_responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::RlweMembershipResponses_MembershipResponseEntry >&
RlweMembershipResponses::membership_responses() const {
  // @@protoc_insertion_point(field_list:private_membership.rlwe.RlweMembershipResponses.membership_responses)
  return _impl_.membership_responses_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rlwe
}  // namespace private_membership

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::private_membership::rlwe::RlweUseCase> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_private_5fmembership_5frlwe_2eproto
